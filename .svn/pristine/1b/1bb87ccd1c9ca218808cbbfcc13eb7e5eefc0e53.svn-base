//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TimeTickerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TimeTicker), typeof(System.Object));
		L.RegFunction("Start", Start);
		L.RegFunction("StartReverse", StartReverse);
		L.RegFunction("Pause", Pause);
		L.RegFunction("IsPause", IsPause);
		L.RegFunction("Stop", Stop);
		L.RegFunction("New", _CreateTimeTicker);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnTick", get_OnTick, set_OnTick);
		L.RegVar("OnEnd", get_OnEnd, set_OnEnd);
		L.RegVar("TotalTime", get_TotalTime, null);
		L.RegVar("NowTime", get_NowTime, null);
		L.RegVar("OverTime", get_OverTime, null);
		L.RegVar("IsTicking", get_IsTicking, null);
		L.RegVar("IsReverse", get_IsReverse, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTimeTicker(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				TimeTicker obj = new TimeTicker();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: TimeTicker.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeTicker obj = (TimeTicker)ToLua.CheckObject(L, 1, typeof(TimeTicker));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Start(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartReverse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeTicker obj = (TimeTicker)ToLua.CheckObject(L, 1, typeof(TimeTicker));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.StartReverse(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeTicker obj = (TimeTicker)ToLua.CheckObject(L, 1, typeof(TimeTicker));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Pause(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TimeTicker obj = (TimeTicker)ToLua.CheckObject(L, 1, typeof(TimeTicker));
			bool o = obj.IsPause();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TimeTicker obj = (TimeTicker)ToLua.CheckObject(L, 1, typeof(TimeTicker));
			obj.Stop();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnTick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeTicker obj = (TimeTicker)o;
			System.Action<TimeTicker> ret = obj.OnTick;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnTick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnEnd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeTicker obj = (TimeTicker)o;
			System.Action<TimeTicker> ret = obj.OnEnd;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnEnd on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeTicker obj = (TimeTicker)o;
			float ret = obj.TotalTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TotalTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NowTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeTicker obj = (TimeTicker)o;
			float ret = obj.NowTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NowTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OverTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeTicker obj = (TimeTicker)o;
			float ret = obj.OverTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OverTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsTicking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeTicker obj = (TimeTicker)o;
			bool ret = obj.IsTicking;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsTicking on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsReverse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeTicker obj = (TimeTicker)o;
			bool ret = obj.IsReverse;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsReverse on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnTick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeTicker obj = (TimeTicker)o;
			System.Action<TimeTicker> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<TimeTicker>)ToLua.CheckObject(L, 2, typeof(System.Action<TimeTicker>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<TimeTicker>), func) as System.Action<TimeTicker>;
			}

			obj.OnTick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnTick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnEnd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeTicker obj = (TimeTicker)o;
			System.Action<TimeTicker> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<TimeTicker>)ToLua.CheckObject(L, 2, typeof(System.Action<TimeTicker>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<TimeTicker>), func) as System.Action<TimeTicker>;
			}

			obj.OnEnd = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnEnd on a nil value" : e.Message);
		}
	}
}

