using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;


class LuaCMUIEventLib
{
    class CMUIEventInfo : ICoreComponentInfo
    {
        public Type type { get { return typeof(CMUIEvent); } }
        public string name { get { return LuaCMUIEventLib.LIB_NAME; } }
        public void newLuaObj(ILuaState lua, Component cmp)
        { 
            LuaCMUIEventLib._wrap(lua, cmp as CMUIEvent);
        }
    }

    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
//    static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "CMUIEvent";


    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("Listener",M_Listener),
            new NameFuncPair("ReBindFunc",M_ReBindFunc)
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {  
             new NameFuncPair("ReBindAll",S_ReBindAll),
             new NameFuncPair("Go",S_Go) 
        };
        //注册静态属性
        NameValuePair[] static_property = new NameValuePair[]
        {
            new NameValuePair("Name",LIB_NAME),
        };
        m_ClassRegHelper.RegStatics(lua, static_define, static_property);

        //注册枚举
        NameValuePair[] UIEventType_define = new NameValuePair[]
        {
            new NameValuePair("Submit",UIEventType.Submit),
            new NameValuePair("Click",UIEventType.Click),
            new NameValuePair("DoubleClick",UIEventType.DoubleClick),
            new NameValuePair("Hover",UIEventType.Hover),
            new NameValuePair("Press",UIEventType.Press),
            new NameValuePair("LongPress",UIEventType.LongPress), 
            new NameValuePair("Select",UIEventType.Select),
            new NameValuePair("Scroll",UIEventType.Scroll),
            new NameValuePair("DragStart",UIEventType.DragStart),
            new NameValuePair("Drag",UIEventType.Drag),
            new NameValuePair("DragOver",UIEventType.DragOver),
            new NameValuePair("DragOut",UIEventType.DragOut),
            new NameValuePair("DragEnd",UIEventType.DragEnd),
            new NameValuePair("Drop",UIEventType.Drop),
            new NameValuePair("Key",UIEventType.Key),
            new NameValuePair("Tooltip",UIEventType.Tooltip),
            new NameValuePair("LinkClick",UIEventType.LinkClick),
            new NameValuePair("PixelClick",UIEventType.PixelClick), 
            new NameValuePair("PixelPress",UIEventType.PixelPress), 
            new NameValuePair("SelectionChange",UIEventType.SelectionChange), 
        };
        m_ClassRegHelper.RegEnum(lua, "UIEventType", UIEventType_define);

        LuaGameObjectLib.RegComponent(new CMUIEventInfo());

        return 1;
    }

    public static void _wrap(ILuaState lua, CMUIEvent comp)
    { 
        LuaOpenLibs._wrapComponent(lua, comp, LIB_NAME, m_ClassRegHelper);
    }

    public static CMUIEvent Lua2Obj(ILuaState lua, int index)
    {
       LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<CMUIEvent>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }

    
    static int M_Listener(ILuaState lua)
    {
        //in self,widgetGameObject,UIEventType,callbackLuaClass,callbackLuaFunc,userParam
        //out void
        try
        {
            int n = lua.GetTop();
            CMUIEvent self = Lua2Obj(lua, 1);
            UIEventType eventType = (UIEventType)lua.L_CheckInteger(3);

            lua.PushValue(4);
            int callbackLuaClassRef = lua.L_Ref(LuaDef.LUA_REGISTRYINDEX);

            string callbackLuaFuncRef = lua.L_CheckString(5);

            lua.PushValue(2);
            int gameObjRef = lua.L_Ref(LuaDef.LUA_REGISTRYINDEX);


            object param = n >= 6 ? LuaRoot.GetAnyValue(lua, 6) : null;

            self.Listener(lua, gameObjRef, eventType, callbackLuaClassRef, callbackLuaFuncRef, param);
        }catch(Exception ex)
        {
            lua.L_Error(ex.ToString());
        }
        return 0;
    }

    static int M_ReBindFunc(ILuaState lua)
    {
        //in self[,newFunc]
        //out void
        int n = lua.GetTop();
        CMUIEvent self = Lua2Obj(lua, 1);
        if (n == 2)
        {
            string newFunc = lua.L_CheckString(2);
            self.ReBindFunc(lua, newFunc);
        }
        else
            self.ReBindFunc(lua);

        return 0;
    }

    static int S_ReBindAll(ILuaState lua)
    {
        //in gameObject
        //out void
        GameObject gameObject = LuaGameObjectLib.Lua2Obj(lua, 1);
        CMUIEvent[] cms = gameObject.GetComponents<CMUIEvent>();

        foreach (CMUIEvent curr in cms) curr.ReBindFunc(lua);

        return 0;
    }


    static int S_Go(ILuaState lua)
    {
        //in gameObject,UIEventType
        LuaCMUIEventLib._wrap(
            lua,
            CMUIEvent.Go(LuaGameObjectLib.Lua2Obj(lua, 1), (UIEventType)lua.L_CheckInteger(2))
        );
        return 1;
    } 
}
 
