using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using UniLua;

public class LuaVector2Lib
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
    static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "Vector2";
    public static int OpenLib(ILuaState lua)
    {

        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
            new NameFuncPair("__add",OP___add),//重载加法
            new NameFuncPair("__mul",OP___mul),//重载乘法
            new NameFuncPair("__div",OP___div),//重载除法
            new NameFuncPair("__sub",OP___sub),//重载减法
            new NameFuncPair("__unm",OP___unm),//重载负号
            new NameFuncPair("__tostring",OP___tostring),
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
            new NameFuncPair("new",S_new),
            new NameFuncPair("Lerp",S_Lerp),
            new NameFuncPair("SLerp",S_SLerp),
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        return 1;
    }



    private static int OP___add(ILuaState lua)
    {
       LuaMemberHelper.CheckClass(lua, 1);
       LuaMemberHelper.CheckClass(lua, 2);

        float x1 = m_MemberHelper.GetFloat(lua, 1, "x");
        float y1 = m_MemberHelper.GetFloat(lua, 1, "y");
        
        float x2 = m_MemberHelper.GetFloat(lua, 2, "x");
        float y2 = m_MemberHelper.GetFloat(lua, 2, "y");



        _wrap(
            lua,
            x1 + x2,
            y1 + y2
            );

        return 1;
    }

    private static int OP___sub(ILuaState lua)
    {
       LuaMemberHelper.CheckClass(lua, 1);
       LuaMemberHelper.CheckClass(lua, 2);

        float x1 = m_MemberHelper.GetFloat(lua, 1, "x");
        float y1 = m_MemberHelper.GetFloat(lua, 1, "y");
        
        float x2 = m_MemberHelper.GetFloat(lua, 2, "x");
        float y2 = m_MemberHelper.GetFloat(lua, 2, "y");


        _wrap(
            lua,
            x1 - x2,
            y1 - y2
            );

        return 1;
    }

    private static int OP___mul(ILuaState lua)
    {
       LuaMemberHelper.CheckClass(lua, 1);
       LuaMemberHelper.CheckClass(lua, 2);

        float x1 = m_MemberHelper.GetFloat(lua, 1, "x");
        float y1 = m_MemberHelper.GetFloat(lua, 1, "y");
        
        float x2 = m_MemberHelper.GetFloat(lua, 2, "x");
        float y2 = m_MemberHelper.GetFloat(lua, 2, "y");


        _wrap(
            lua,
            x1 * x2,
            y1 * y2
            );

        return 1;
    }

    private static int OP___div(ILuaState lua)
    {
       LuaMemberHelper.CheckClass(lua, 1);
       LuaMemberHelper.CheckClass(lua, 2);

        float x1 = m_MemberHelper.GetFloat(lua, 1, "x");
        float y1 = m_MemberHelper.GetFloat(lua, 1, "y");
        
        float x2 = m_MemberHelper.GetFloat(lua, 2, "x");
        float y2 = m_MemberHelper.GetFloat(lua, 2, "y");


        _wrap(
            lua,
            x1 / x2,
            y1 / y2
            );

        return 1;
    }

    private static int OP___unm(ILuaState lua)
    {
       LuaMemberHelper.CheckClass(lua, 1);

        float x1 = m_MemberHelper.GetFloat(lua, 1, "x");
        float y1 = m_MemberHelper.GetFloat(lua, 1, "y");

        _wrap(lua, -x1, -y1);

        return 1;
    }

    private static int OP___tostring(ILuaState lua)
    {
        //in self
        //out string

       LuaMemberHelper.CheckClass(lua, 1);

        float x1 = m_MemberHelper.GetFloat(lua, 1, "x");
        float y1 = m_MemberHelper.GetFloat(lua, 1, "y");

        lua.PushString(string.Format("{0},{1}", x1, y1));

        return 1;
    }

    public static void Lua2Obj(ILuaState lua, int index, out Vector2 re)
    {
       LuaMemberHelper.CheckClass(lua, index);

        re = new Vector2(
           m_MemberHelper.GetFloat(lua, index, "x"),
           m_MemberHelper.GetFloat(lua, index, "y")
         );
    }



    private static int S_new(ILuaState lua)
    {
        int n = lua.GetTop();

        float x = n >= 1 ? (float)lua.L_CheckNumber(1) : 0.0f;
        float y = n >= 2 ? (float)lua.L_CheckNumber(2) : 0.0f;

        _wrap(lua, x, y);

        return 1;
    }

    public static void _wrap(ILuaState lua, Vector2 v2)
    {
        _wrap(lua, v2.x, v2.y);
    }

    public static void _wrap(ILuaState lua, float x, float y)
    {
        NameValuePair[] propertys = new NameValuePair[]
        {
            new NameValuePair("x",x),
            new NameValuePair("y",y)
        };

        m_ClassRegHelper.InstanceLuaClass(lua, propertys);
    }

    //插值函数
    public static int S_Lerp(ILuaState lua)
    {
        //in Vector2 from, Vector2 to, float t
        //out Vector2

       LuaMemberHelper.CheckClass(lua, 1);
       LuaMemberHelper.CheckClass(lua, 2);

        float t = (float)lua.L_CheckNumber(3);
        float x1 = m_MemberHelper.GetFloat(lua, 1, "x");
        float y1 = m_MemberHelper.GetFloat(lua, 1, "y");
        
        float x2 = m_MemberHelper.GetFloat(lua, 2, "x");
        float y2 = m_MemberHelper.GetFloat(lua, 2, "y");

        _wrap(
            lua,
            Mathf.Lerp(x1, x2, t),
            Mathf.Lerp(y1, y2, t)
            );

        return 1;
    }

    //球形插值函数
    public static int S_SLerp(ILuaState lua)
    {
        //in Vector2 from, Vector2 to, float t
        //out Vector2

       LuaMemberHelper.CheckClass(lua, 1);
       LuaMemberHelper.CheckClass(lua, 2);

        float t = (float)lua.L_CheckNumber(3);
        float x1 = m_MemberHelper.GetFloat(lua, 1, "x");
        float y1 = m_MemberHelper.GetFloat(lua, 1, "y");
   
        float x2 = m_MemberHelper.GetFloat(lua, 2, "x");
        float y2 = m_MemberHelper.GetFloat(lua, 2, "y");

        _wrap(
            lua,
            QKMath.SLerp(x1, x2, t),
            QKMath.SLerp(y1, y2, t)
            );

        return 1;
    }
     
}
 