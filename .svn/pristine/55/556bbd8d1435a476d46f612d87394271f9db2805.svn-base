using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using UniLua;

class LuaCMAvatarAnimator_AutoLib
{

    class CMAvatarAnimator_AutoInfo : ICoreComponentInfo
    {
        public Type type { get { return typeof(AvatarAnimator_Auto); } }
        public string name { get { return LuaCMAvatarAnimator_AutoLib.LIB_NAME; } }
        public void newLuaObj(ILuaState lua, Component cmp)
        {
            LuaCMAvatarAnimator_AutoLib._wrap(lua, cmp as AvatarAnimator_Auto);
        }
    }

    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
  //  static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "CMAvatarAnimator_Auto";

    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("Play",M_Play),
            new NameFuncPair("GetFlip",M_GetFlip),
            new NameFuncPair("SetFlip",M_SetFlip),
              new NameFuncPair("GetClipLength",M_GetClipLength),
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
           
            
        };
        //注册静态属性
        NameValuePair[] static_property = new NameValuePair[]
        {
            new NameValuePair("Name",LIB_NAME),
        };
        m_ClassRegHelper.RegStatics(lua, static_define, static_property);

        LuaGameObjectLib.RegComponent(new CMAvatarAnimator_AutoInfo());

        return 1;
    }

    public static void _wrap(ILuaState lua, AvatarAnimator_Auto comp)
    {
        LuaOpenLibs._wrapComponent(lua, comp, LIB_NAME, m_ClassRegHelper);
    }

    public static AvatarAnimator_Auto Lua2Obj(ILuaState lua, int index)
    {
        LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<AvatarAnimator_Auto>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }

 
    static int M_Play(ILuaState lua)
    {
        //in self,clipName[,isLoop,randStart]
        //out void
        int n = lua.GetTop();
        AvatarAnimator_Auto self = Lua2Obj(lua, 1);
        string clipName = lua.L_CheckString(2);
        bool isLoop = n>2? lua.ToBoolean(3):true;
        bool randStart = n>3?lua.ToBoolean(4):false;
        self.Play(clipName,randStart,isLoop);

        return 0;
    } 

    static int M_GetFlip(ILuaState lua)
    {
        //in self
        //out SpriteFlip
        AvatarAnimator_Auto self = Lua2Obj(lua, 1);
        lua.PushInteger((int)self.flip);
        return 1;
    }

    static int M_SetFlip(ILuaState lua)
    {
        //in self,SpriteFlip
        //out nil
        AvatarAnimator_Auto self = Lua2Obj(lua, 1);
        int flip =lua.L_CheckInteger(2);
        self.flip = (Flip)flip;
        return 0;
    }

    static int M_GetClipLength(ILuaState lua)
    {
        //in self,clipName
        //out nil
        AvatarAnimator_Auto self = Lua2Obj(lua, 1);
        string clipName = lua.L_CheckString(2);
        lua.PushNumber(self.GetClipLength(clipName));

        return 1;
    }

} 
