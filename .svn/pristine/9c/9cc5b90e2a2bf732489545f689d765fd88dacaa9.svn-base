using System;
using System.Collections;
using UnityEngine;
using UniLua;
using System.Collections.Generic;



public class CMLua_Light : MonoBehaviour
{
    public CMLuaFuns m_Funcs = null;
     
    protected virtual void Start()
    {
        CallLuaInterface("Start");
    }

    protected virtual void OnEnable() { CallLuaOnEnable(); }

    public void CallLuaOnEnable() { if (m_Funcs != null) CallLuaInterface("OnEnable"); }

    protected virtual void OnDisable() { CallLuaInterface("OnDisable"); }

    protected virtual void OnDestroy()
    {
        CallLuaInterface("OnDestroy");
        m_Funcs.Destroy(LuaRoot._Lua);
    }

    //调用lua接口，适合运行期内只执行1次，或者相对低频的事件
    //优点，不需要存接口引用，节约内存。
    //缺点，相对缓存了接口引用的方式性能略低
    protected void CallLuaInterface(string interfaceName)
    {
        LuaCall.CallLuaInterface(m_Funcs.ClassRef, interfaceName);
    }
}

public class CMLua : CMLua_Light
{

    protected override void OnEnable() { base.OnEnable(); CoroutineManage.Single.RegComponentUpdate(IUpdate); }

    protected override void OnDisable() { base.OnDisable(); CoroutineManage.Single.UnRegComponentUpdate(IUpdate); }

    void IUpdate()
    {
        if ((bool)this)
            LuaRoot.CallMember(m_Funcs.UpdateRef, m_Funcs.ClassRef);
    }
}
