using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;

public class LuaArmySquareInfoLibs
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();

    public const string LIB_NAME = "ArmySquareInfo";

    public static int OpenLib(ILuaState lua)
    {

        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("SetEquips",M_SetEquips), 
            new NameFuncPair("SetSkillLevels",M_SetSkillLevels), 
            new NameFuncPair("SetHP",M_SetHP), 
            new NameFuncPair("SetCD",M_SetCD),  
            new NameFuncPair("SetFlag",M_SetFlag),  
            new NameFuncPair("SetFID",M_SetFID),  
            new NameFuncPair("SetZS",M_SetZS ), 
            new NameFuncPair("SetHXJ", M_SetHXJ), 
            new NameFuncPair("SetSXJ",M_SetSXJ ), 
            new NameFuncPair("SetHeroLevel",M_SetHeroLevel ), 
            new NameFuncPair("SetSoldiersCount",M_SetSoldiersCount ), 
            new NameFuncPair("SetHeroID",M_SetHeroID ),  
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        { 
            new NameFuncPair("new",S_new), 
        };
        m_ClassRegHelper.RegStatics(lua, static_define);
         

        return 1;
    }



    public static void _wrap(ILuaState lua, ArmySquareInfo obj)
    {
        NameValuePair[] propertys = new NameValuePair[]
        {
            new NameValuePair(LuaOpenLibs.OBJ_HANDELNAME,obj),
        };

        m_ClassRegHelper.InstanceLuaClass(lua, propertys);
    }

    public static ArmySquareInfo Lua2Obj(ILuaState lua, int index)
    {
        LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<ArmySquareInfo>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }


    static int S_new(ILuaState lua)
    {
        //in
        //out ArmySquareInfo
        _wrap(lua, new ArmySquareInfo());
        return 1;
    }


    static int M_SetHeroID(ILuaState lua)
    {
        //in self,heroID

        var self = Lua2Obj(lua, 1);
        var heroID = lua.L_CheckInteger(2);

        self.staticHeroID = heroID;
        return 0;
    }


    static int M_SetSoldiersCount(ILuaState lua)
    {
        //in self,count

        var self = Lua2Obj(lua, 1);
        var count = lua.L_CheckInteger(2);

        self.soldiersCount = count;
        return 0;
    }

    static int M_SetHeroLevel(ILuaState lua)
    {
        //in self,level
        var self = Lua2Obj(lua, 1);
        var level = lua.L_CheckInteger(2);

        self.heroLevel = level;
        return 0;

    }

    static int M_SetSXJ(ILuaState lua)
    {
        //in self,xj
        var self = Lua2Obj(lua, 1);
        var xj = (short)lua.L_CheckInteger(2);

        self.sxj = xj;
        return 0;
    }

    static int M_SetHXJ(ILuaState lua)
    {
        //in self,xj
        var self = Lua2Obj(lua, 1);
        var xj = (short)lua.L_CheckInteger(2);

        self.hxj = xj;
        return 0;
    }

    static int M_SetZS(ILuaState lua)
    {
        //in self,zs
        var self = Lua2Obj(lua, 1);
        var zs =  lua.ToBoolean(2);

        self.zs = zs;
        return 0;
    }


     

    static int M_SetFID(ILuaState lua)
    {
        //in self,fid
         
        var self = Lua2Obj(lua, 1);
        var fid = lua.L_CheckInteger(2);

        self.fid = (byte)fid;
        return 0;
    }
    
    static int M_SetFlag(ILuaState lua)
    {
        //in self,flag

        var self = Lua2Obj(lua, 1);
        var flag = lua.L_CheckInteger(2);

        self.flag = (ArmyFlag)flag;
        return 0;
    }

    static int M_SetCD(ILuaState lua)
    {
        //in self,cd

        var self = Lua2Obj(lua, 1);
        var cd = lua.L_CheckNumber(2);

        self.cd =  (float)cd;
        return 0;
    }

    static int M_SetHP(ILuaState lua)
    {
        //in self,hp

        var self = Lua2Obj(lua, 1);
        var hp = lua.L_CheckInteger(2);

        self.hp =  hp;
        return 0;
    }


    static int M_SetSkillLevels(ILuaState lua)
    {
        //in self,table{1,1,...}

        var self = Lua2Obj(lua, 1);
        lua.L_ArgCheck(lua.IsTable(2), 2, "必须是一个lua表");


        var SillLevels = new Dictionary<short, short>();
        //遍历传入的lua表
        lua.PushNil();
        while (lua.Next(-2))
        {
            /* 处理相应数据。此时栈上 -1 处为 value, -2 处为 key */
            int idx = lua.L_CheckInteger(-2)-1;
            int SkillLevel = lua.L_CheckInteger(-1);
            SillLevels.Add((short)idx, (short)SkillLevel);
            lua.Pop(1);
        }

        self.sklv = new short[SData_HeroData.MaxSkillCount];
        for (short i = 0; i < SData_HeroData.MaxSkillCount; i++)
        {
            self.sklv[i] = SillLevels.ContainsKey(i) ? SillLevels[i] : (short)0;
        }
        return 0;
    }

    static int M_SetEquips(ILuaState lua)
    {
        //in self,table{Equip1,Equip2,...}

        var self = Lua2Obj(lua, 1);
        lua.L_ArgCheck(lua.IsTable(2), 2, "必须是一个lua表");


        var EquipList = new List<Equip>();
        //遍历传入的lua表
        lua.PushNil();
        while (lua.Next(-2))
        {
            /* 处理相应数据。此时栈上 -1 处为 value, -2 处为 key */
            var equip = LuaEquipLibs.Lua2Obj(lua, -1);
            EquipList.Add(equip);
            lua.Pop(1);
        }

        self.Equips = EquipList.ToArray();
        return 0;
    } 
     
} 