using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using OOSync;
using UnityEngine;
class LuaSyncObjLib
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();

    public const string LIB_NAME = "SyncObj";

    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("GetValue",M_GetValue) ,  
            new NameFuncPair("SetValue",M_SetValue) , 
            new NameFuncPair("GetChild",M_GetChild) , 
            new NameFuncPair("GetChildCount",M_GetChildCount) , 
            new NameFuncPair("GetName",M_GetName) ,  
            new NameFuncPair("Foreach",M_Foreach) ,  
            new NameFuncPair("GetPath",M_GetPath) ,  
            new NameFuncPair("Delete",M_Delete)
        };


        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
              
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        return 1;
    }


    public static void _wrap(ILuaState lua, SyncObj newObj)
    {
        LuaOpenLibs._wrap(m_ClassRegHelper, lua, newObj);
    }


    public static SyncObj Lua2Obj(ILuaState lua, int index)
    {
        return LuaOpenLibs.Lua2Obj<SyncObj>(lua, index);
 
    }

    public static int M_SetValue(ILuaState lua)
    {
        //in self,attrName,attValue
        SyncObj self = Lua2Obj(lua, 1);
        string attrName = lua.L_CheckString(2);
        string attrValue = lua.L_CheckString(3);
        self.SetValue(attrName, attrValue);
        return 0;
    }

    public static int M_GetValue(ILuaState lua)
    {
        //in self,attrName
        //out string 
        SyncObj self = Lua2Obj(lua, 1);
        string attrName = lua.L_CheckString(2);
        var re = self.GetValue(attrName);
        lua.L_ArgCheck(re != null, 1, "不存在的属性 " + attrName);
        lua.PushString(re); 
        return 1; 
    }

    public static int M_GetChildCount(ILuaState lua)
    {
        //in self
        //out int
        SyncObj self = Lua2Obj(lua, 1);
        lua.PushInteger(self.ChildCount);
        return 1; 
    }

    public static int M_GetChild(ILuaState lua)
    {
        //in self,name,[,autoCreate]
        //out SyncObj
        SyncObj self = Lua2Obj(lua, 1);
        string name = lua.L_CheckString(2);
        bool autoCreate = (lua.GetTop()==3)?lua.ToBoolean(3):false;
        LuaSyncObjLib._wrap(lua, self.GetChild(name, autoCreate));
        return 1;
 
    }

    public static int M_GetName(ILuaState lua)
    {
        //in self
        //out string
        SyncObj self = Lua2Obj(lua, 1); 
        lua.PushString(self.Name);
        return 1;
    }

    public static int M_GetPath(ILuaState lua)
    {
        //in self
        //out string
        SyncObj self = Lua2Obj(lua, 1);
        lua.PushString(self.Path);
        return 1;
    }

    public static int M_Delete(ILuaState lua)
    {
        //in self
        SyncObj self = Lua2Obj(lua, 1);
        self.Delete();
        return 0;
    }


    public static int M_Foreach(ILuaState lua)
    {
        //in self,function
        //out void 
        var self = Lua2Obj(lua, 1);
        lua.L_ArgCheck(lua.IsFunction(2), 2, "must be a function");

        try
        {

            foreach (var kv in self.m_childs)
            {
                // push `traceback' function  
                var b = lua.GetTop() + 1;
                lua.PushCSharpFunction(LuaRoot.Traceback);

                //压入回掉函数
                lua.PushValue(2);

                //压入参数
                _wrap(lua,kv.Value);  

                //调用函数
                var status = lua.PCall(1, 0, b);
                if (status != ThreadStatus.LUA_OK)
                {
                    lua.Remove(b);
                    ULDebug.LogError(lua.ToString(-1));
                }

                // remove `traceback' function  
                lua.Remove(b); 
            }
        }
        catch (Exception ex)
        {
            lua.L_Error(ex.ToString());
        }
        finally
        {
            // LuaRoot._Lua.L_Unref(LuaDef.LUA_REGISTRYINDEX, funcRef);
        }
        return 0;
    }
     
}