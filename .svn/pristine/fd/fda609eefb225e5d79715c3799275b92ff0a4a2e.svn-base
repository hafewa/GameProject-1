using UnityEngine;
using System.Collections; 
public class UIZoomScale : MonoBehaviour {

	// Use this for initialization
    private float zMin = -100;         //可缩放范围最小值
    private float zMax = 1000f;         //可缩放范围最大值
    private float zMid = 200;           //省、城分界线
    private float zDefault1 = 500f;
    private float zDefault2 = 0;
    private float zSpeed = 10.0f;       //变化速率

    private float x = 0;
    private float xc = 0;
    private float y = 0;
    private float yc = 0;

    private bool m_Enable = true;
    private float defaultZPosition;
    private float CurrDelta = 0.0f;
    private GameObject Target;
    private int ChangeCount;
    private float FastSpace = 0.0f;
    private bool CurrState = true;//当前的缩放状态
    private bool isLarge = false;//通知主动调用方向
    private bool isFast = false;
    public UIEventListener.BoolDelegate onShiftEvent;
    public QKEvent onLuaShift;

    void Awake()
    {
        UIFingerZoom fz = gameObject.GetComponent<UIFingerZoom>();
        fz.onZoom += UpdateZoomScale;

        Target = fz.target;
        defaultZPosition = Target.transform.localPosition.z;

        SetEnable(true);
    }
	void Start () {
        
	}
    public bool GetZoomState()
    {
        return CurrState;
    }
    public void BindEvent(UIEventListener.BoolDelegate _Event)//C#!!回调
    {
        onShiftEvent += _Event;
    }
    public void onShift()//主动调用切换状态
    {

        int DeltaZ = (int)(Target.transform.localPosition.z - (CurrState ? zDefault2 : zDefault1));

        isLarge = DeltaZ < 0;
        ChangeCount = Mathf.Abs(DeltaZ / (int)zSpeed) + 1;
        ChangeCount = 10;
        FastSpace = -(float)DeltaZ / 10;
        InvokeRepeating("UpdateOnce", 0, 0.03f);
    }

    public void Move(int _Value)//主动调用切换状态
    {
        int DeltaZ = (int)Target.transform.localPosition.z - _Value;

        isLarge = DeltaZ < 0;
        ChangeCount = 10;
        FastSpace = -(float)DeltaZ / 10;
        InvokeRepeating("UpdateOnce", 0, 0.03f);
    }

    public void Adjust(bool isLarge)
    {
        UpdateZoomScale(null, isLarge);
    }
    void UpdateOnce()
    {
        ChangeCount--;
        if (ChangeCount == 0)
            CancelInvoke("UpdateOnce");
        isFast = true;
        UpdateZoomScale(null, isLarge);
    }
    
    void UpdateZoomScale(GameObject _gb,bool _isLarge)
    {
        if (!m_Enable) return;

        UpdateCurrScale(_isLarge);

        float BeforeChange = Target.transform.localPosition.z;
        float AfterChange = Target.transform.localPosition.z + CurrDelta;
        if (isFast)
        {
            AfterChange = Target.transform.localPosition.z + FastSpace;
            isFast = false;
        }
            
        Vector3 v3 = new Vector3(Target.transform.localPosition.x, Target.transform.localPosition.y, AfterChange);
        Target.transform.localPosition = v3;
        GameObject MapObject = GameObject.Find("rotateControl/map");
        if (MapObject == null) return;
        UIPanel MapPanel = MapObject.GetComponent<UIPanel>();
        Vector4 v4 = MapPanel.baseClipRegion;
        v4.z = AfterChange * x + xc;
        v4.w = AfterChange * y + yc;
        MapPanel.baseClipRegion = v4;

        bool before = BeforeChange >= zMid;
        bool after = AfterChange >= zMid;
        //两个值不一样 说明需要切换状态
        if (before != after)
        {
            CurrState = after;

            if (onShiftEvent != null)
                onShiftEvent(null, after);

            if (onLuaShift != null)
                onLuaShift.Call(Target);
        }
    }
    void UpdateCurrScale(bool _isLarge)
    {
        CurrDelta = 0;

        if (Target.transform.localPosition.z >= zMax && _isLarge) return;
        if (Target.transform.localPosition.z <= zMin && !_isLarge) return;

        CurrDelta = _isLarge ? zSpeed : -zSpeed;
    }

    public void SetInfo(float _Max, float _Mid, float _Min, float _Def1, float _Def2, float _Speed)
    {
        zMin = _Min;        //可缩放范围最小值
        zMax = _Max;        //可缩放范围最大值
        zMid = _Mid;        //省、城分界线
        zDefault1 = _Def1;
        zDefault2 = _Def2;
        zSpeed = _Speed;    //变化速率
    }

    public void SetSizeInfo(int BigX,int SmallX ,int BigY ,int SmallY)
    {
        x = (BigX - SmallX) / (zMax - zMin);
        xc = BigX - (zMax * x);

        y = (BigY - SmallY) / (zMax - zMin);
        yc = BigY - (zMax * y); 
    }

    public void SetEnable(bool _isEnable)
    {
        m_Enable = _isEnable;
    }
}
