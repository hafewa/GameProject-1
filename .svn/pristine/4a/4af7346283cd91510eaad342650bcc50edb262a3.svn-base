using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;
public class LuaCall
{

    public  static void CallLuaInterface(int classRef,string interfaceName)
    {
        LuaRoot._Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, classRef);
        int startRef = LuaRoot.StoreMethod(LuaRoot._Lua, interfaceName);
        LuaRoot._Lua.Pop(1);//弹出class

        if (startRef > 0)
        {
            try
            {
                LuaRoot.CallMember(startRef, classRef);
            }
            catch (Exception ex)
            {
                ULDebug.LogError(ex.ToString());
            }
            finally
            {
                LuaRoot._Lua.L_Unref(LuaDef.LUA_REGISTRYINDEX, startRef);
            }
        }
    }

    public static void CallLuaInterface(int classRef, string interfaceName,object param1)
    {
        LuaRoot._Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, classRef);
        int startRef = LuaRoot.StoreMethod(LuaRoot._Lua, interfaceName);
        LuaRoot._Lua.Pop(1);//弹出class

        if (startRef > 0)
        {
            try
            {
                LuaRoot.CallMember(startRef, classRef, param1);
            }
            catch (Exception ex)
            {
                ULDebug.LogError(ex.ToString());
            }
            finally
            {
                LuaRoot._Lua.L_Unref(LuaDef.LUA_REGISTRYINDEX, startRef);
            }
        }
    }



    public static Vector2 CallLuaInterfaceRV2(int classRef, string interfaceName)
    {
        LuaRoot._Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, classRef);
        int startRef = LuaRoot.StoreMethod(LuaRoot._Lua, interfaceName);
        LuaRoot._Lua.Pop(1);//弹出class

        if (startRef > 0)
        {
            try
            {
               object rev = LuaRoot.R_CallMember(startRef, classRef);
              IDisposable dspObj = rev as IDisposable;
              if (dspObj!=null)
              {
                  using(dspObj)
                  {
                     ILuaValue luaV = rev as ILuaValue;
                     luaV.Push(LuaRoot._Lua);
                     Vector2 re;  LuaVector2Lib.Lua2Obj(LuaRoot._Lua,-1,out re);
                     LuaRoot._Lua.Pop(1);
                     return re;
                  }
              } 

            }
            catch (Exception ex)
            {
                ULDebug.LogError(ex.ToString());
            }
            finally
            {
                LuaRoot._Lua.L_Unref(LuaDef.LUA_REGISTRYINDEX, startRef);
            }
        }

        return Vector2.zero;
    }

    public static void CallMemberG(int funcRef, int classRef, int goRefI)
    {
        var _Lua = LuaRoot._Lua;
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, funcRef);

        // insert `traceback' function  
        var b = _Lua.GetTop();
        _Lua.PushCSharpFunction(LuaRoot.Traceback);
        _Lua.Insert(b);

        //传递self参数
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, classRef);

        //传递go
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, goRefI);


        //调用函数
        var status = _Lua.PCall(2, 0, b);
        if (status != ThreadStatus.LUA_OK)
        {
            ULDebug.LogError(_Lua.ToString(-1));
        }

        // remove `traceback' function  
        _Lua.Remove(b);
    }


    public static void CallMemberG<T1>(int funcRef, int classRef, int goRefI, T1 v1)
    {
        var _Lua = LuaRoot._Lua;
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, funcRef);

        // insert `traceback' function  
        var b = _Lua.GetTop();
        _Lua.PushCSharpFunction(LuaRoot.Traceback);
        _Lua.Insert(b);

        //传递self参数
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, classRef);

        //传递go
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, goRefI);

        //传递v1
        LuaRoot.PushObject(_Lua, v1);


        //调用函数
        var status = _Lua.PCall(3, 0, b);
        if (status != ThreadStatus.LUA_OK)
        {
            ULDebug.LogError(_Lua.ToString(-1));
        }

        // remove `traceback' function  
        _Lua.Remove(b);
    }



    public static void CallMemberG<T1, T2>(int funcRef, int classRef, int goRefI, T1 v1, T2 v2)
    {
        var _Lua = LuaRoot._Lua;
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, funcRef);

        // insert `traceback' function  
        var b = _Lua.GetTop();
        _Lua.PushCSharpFunction(LuaRoot.Traceback);
        _Lua.Insert(b);

        //传递self参数
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, classRef);

        //传递go
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, goRefI);

        //传递v1
        LuaRoot.PushObject(_Lua, v1);

        //传递v2
        LuaRoot.PushObject(_Lua, v2);

        bool isok = true;

        //调用函数
        var status = _Lua.PCall(4, 0, b);
        if (status != ThreadStatus.LUA_OK)
        {
            isok = false;
            ULDebug.LogError(_Lua.ToString(-1));
        }

        // remove `traceback' function  
        _Lua.Remove(b);
        if (!isok) throw new Exception();
    }


    public static void CallMemberG(int funcRef, int classRef, int goRefI, Vector2 v)
    {
        var _Lua = LuaRoot._Lua;

        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, funcRef);

        // insert `traceback' function  
        var b = _Lua.GetTop();
        _Lua.PushCSharpFunction(LuaRoot.Traceback);
        _Lua.Insert(b);

        //传递self参数
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, classRef);

        //传递go
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, goRefI);

        //传递v
        LuaVector2Lib._wrap(_Lua, v);

        //调用函数
        var status = _Lua.PCall(2, 0, b);
        if (status != ThreadStatus.LUA_OK)
        {
            ULDebug.LogError(_Lua.ToString(-1));
        }

        // remove `traceback' function  
        _Lua.Remove(b);
    }


    public static void CallMemberG(int funcRef, int classRef, int goRefI, GameObject v)
    {
        var _Lua = LuaRoot._Lua;

        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, funcRef);

        // insert `traceback' function  
        var b = _Lua.GetTop();
        _Lua.PushCSharpFunction(LuaRoot.Traceback);
        _Lua.Insert(b);

        //传递self参数
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, classRef);

        //传递go
        _Lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, goRefI);

        //传递v
        LuaGameObjectLib._wrap(_Lua, v);

        //调用函数
        var status = _Lua.PCall(2, 0, b);
        if (status != ThreadStatus.LUA_OK)
        {
            ULDebug.LogError(_Lua.ToString(-1));
        }

        // remove `traceback' function  
        _Lua.Remove(b);
    }


}
 
