using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace CHttp
{
    public class CHttpSession : IDisposable
    {
        public CHttpSession(string url,string uid)
        {
            Dispose();
            mUrl = url;
            mUid = uid;
        }

        public void SetToken(string token)
        {
            if(mToken != token)
            {
                CoroutineManage.Single.StopCoroutine(coSend());
                mQueue.Clear();
            }
            mToken = token;
        }

        public void Dispose()
        {
            mUid = string.Empty;
            mToken = string.Empty;
            CoroutineManage.Single.StopCoroutine(coSend());
            mQueue.Clear();
        }

        public CHttpRequest CreateRequest(QK_JsonValue_Map nm, int flag,bool delaySupport)
        {
            QK_JsonValue_Map request = new QK_JsonValue_Map();
            request.addStrValue("uid", mUid);
            request.addStrValue("token", mToken);
            request.addStrValue("flag", flag.ToString());
            request.addStrValue("num", (mRequestNum++).ToString());
            request.addValue("Content", nm);

            return new CHttpRequest(mUrl, request,delaySupport);
        }

        /// <summary>
        /// 发送一个请求
        /// </summary>
        public void Send(CHttpRequest tempRequest)
        {
            if (NetworkReachability.NotReachable == Application.internetReachability)
            {
                tempRequest.NotifyFinished(CHttpErrorCode.NetError, "离线中");
                if(!tempRequest.DelaySupport)return;
            }
            mQueue.Enqueue(tempRequest);
            // 自动发送队列中的请求
            AutoSendRequest();
        }

        /// <summary>
        /// 所属用户Uid
        /// </summary>
        public string Uid
        {
            get { return mUid; }
        }
        /// <summary>
        /// 通讯令牌
        /// </summary>
        public string Token
        {
            get { return mToken; }
        }

        void AutoSendRequest()
        {
            if (!mSending)
            {
                mSending = true;
                CoroutineManage.Single.StartCoroutine(coSend());
            }
        }

        IEnumerator coSend()
        {
            while (mQueue.Count > 0)
            {
                CHttpRequest tempRequest = mQueue.Dequeue();
                if (!tempRequest.Sending)
                {
                    tempRequest.Send();
                }
                while(!tempRequest.Finished)
                {
                    yield return null;
                }

                if (tempRequest.Finished)
                {
                    if (CHttpErrorCode.Success != tempRequest.Response.ErrorCode)
                    {
                        Queue<CHttpRequest> tempQueue = new Queue<CHttpRequest>();
                        bool findNoSupport = false;
                        if (tempRequest.DelaySupport)
                        {

                            tempRequest.Reset();
                            tempRequest.SetMode(CHttpRequestMode.Delay);
                            tempQueue.Enqueue(tempRequest);

                            while (mQueue.Count > 0)
                            {
                                CHttpRequest t = mQueue.Dequeue();
                                if (!t.DelaySupport)
                                {
                                    findNoSupport = true;
                                }
                                if (t != tempRequest)
                                {
                                    t.NotifyFinished(CHttpErrorCode.Unkonw, "执行失败");
                                }
                                if (!findNoSupport)
                                {
                                    t.Reset();
                                    t.SetMode(CHttpRequestMode.Delay);
                                    tempQueue.Enqueue(t);
                                }
                            }
                        }
                        mQueue = tempQueue;

                        yield return null;
                    }
                }

                mSending = mQueue.Count > 0;
            }
        }

        /// <summary>
        /// 请求索引
        /// </summary>
        ulong mRequestNum = 0;
        /// <summary>
        /// 是否正在发送
        /// </summary>
        bool mSending = false;
        /// <summary>
        /// 所属通讯地址
        /// </summary>
        string mUrl = string.Empty;
        /// <summary>
        /// 用户Id
        /// </summary>
        string mUid = string.Empty;
        /// <summary>
        /// 通讯令牌
        /// </summary>
        string mToken = string.Empty;
        /// <summary>
        /// 请求队列
        /// </summary>
        Queue<CHttpRequest> mQueue = new Queue<CHttpRequest>();
    }
}
