using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using MonoEX;

class LuaProtoZipLib
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();

    public const string LIB_NAME = "ProtoZip";

    public static int OpenLib(ILuaState lua)
    { 
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        { 
        };


        NameFuncPair[] operator_define = new NameFuncPair[]
        {
            
        }; 
        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);

         NameFuncPair[] static_define = new NameFuncPair[]
        {
             new NameFuncPair("CompressProto",S_CompressProto),
            new NameFuncPair("DecompressProto",S_DecompressProto),
            new NameFuncPair("CompressQKJsonProto",S_CompressQKJsonProto),
            new NameFuncPair("DecompressQKJsonProto",S_DecompressQKJsonProto), 
        };

         m_ClassRegHelper.RegStatics(lua, static_define);

        return 1;
    }



    static int S_CompressProto(ILuaState lua)
    {
        //in ByteArray
        //out ByteArray
        ByteArray input = LuaByteArrayLib.Lua2Obj(lua, 1);
        ByteArray re = new ByteArray(ProtoZip.CompressProto(input.ToBytes()));
        LuaByteArrayLib._wrap(lua, re);
        return 1;
    }

    static int S_DecompressProto(ILuaState lua)
    {
        //in ByteArray
        //out ByteArray
        ByteArray input = LuaByteArrayLib.Lua2Obj(lua, 1);
        byte[] rebytes = ProtoZip.DecompressProto(input.ToBytes());
        if (rebytes == null)
            lua.PushNil();
        else
        {
            ByteArray re = new ByteArray(rebytes);
            LuaByteArrayLib._wrap(lua, re);
        }
        return 1;
    }

    static int S_CompressQKJsonProto(ILuaState lua)
    {
        //in string
        //out ByteArray
        string jsonCode = lua.L_CheckString(1);
        byte[] rebytes = ProtoZip.CompressQKJsonProto(jsonCode);
        ByteArray re = new ByteArray(rebytes);
        LuaByteArrayLib._wrap(lua, re);
        return 1;
    }

    static int S_DecompressQKJsonProto(ILuaState lua)
    {
        //in ByteArray
        //out string
        ByteArray input = LuaByteArrayLib.Lua2Obj(lua, 1);
        string jsonCode = ProtoZip.DecompressQKJsonProto(input.ToBytes());
        if (jsonCode == null)
            lua.PushNil();
        else
            lua.PushString(jsonCode);
        return 1;
    }
}
