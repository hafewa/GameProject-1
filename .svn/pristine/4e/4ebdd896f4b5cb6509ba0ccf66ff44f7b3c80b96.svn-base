using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using DG.Tweening;


//渐显渐隐模式
public enum WndFadeMode
{
    None = 0,//没有渐显效果
    ScaleAlpha = 1,//一边缩放，一边半透
    Alpha = 2,//半透
    Scale = 3, //缩放
}

//窗体动画模式
public enum WndAnimationMode
{
    situ = 0,//原地不动的
    down = 1,//从上方掉下来
    up = 2,//从下方升起
    left = 3,//从左边拉出
    right = 4,//从右边拉出
}
 
public class Wnd : IDisposable
{
   
    public const float DefaultDuration = 0.5f;
    public Wnd(GameObject panelObj, GameObject baffleObj, wndInfo wInfo)
    {
        m_wndObj = panelObj.transform.GetChild(0).gameObject;
        m_wInfo = wInfo;
        m_panelObj = panelObj;
        m_baffleObj = baffleObj;
    }

    public void Hide(float duration)
    {
        _ShowHide(false, duration);
    }

    public void _Show(float duration)
    { 
        showCount++;
        _ShowHide(true, duration);
    }

    public string Name { get { return m_wInfo.name; } }
    //是否为一个新的实例
    public bool IsNewInstance { get { return showCount == 1; } }

    void tweenShowHide(bool isShow,float t)
    {
        if (m_wndObj == null) return;

         if(m_wInfo.fade == WndFadeMode.Alpha || m_wInfo.fade == WndFadeMode.ScaleAlpha)//补间alpha
        {
            if (isShow)
                m_wndObj.GetComponent<UIWidget>().alpha = DP_TweenFuncs.Tween_Linear_Float(0, 1, t);
            else
                m_wndObj.GetComponent<UIWidget>().alpha = DP_TweenFuncs.Tween_Linear_Float(m_TweenStartAlpha, 0, t);
        }

        if(m_wInfo.fade == WndFadeMode.Scale || m_wInfo.fade == WndFadeMode.ScaleAlpha)//补间缩放
        {
            if (isShow)
            {
                var s = WndConfig.Single.WndScaleEnterCurve.Evaluate(t);
                m_wndObj.transform.localScale = new Vector3(s, s, s);
            } else
            {
                var x = DP_TweenFuncs.Tween_Linear_Float(m_TweenStartScale.x, 0, t);
                var y = DP_TweenFuncs.Tween_Linear_Float(m_TweenStartScale.y, 0, t);
                var z = DP_TweenFuncs.Tween_Linear_Float(m_TweenStartScale.z, 0, t);
                m_wndObj.transform.localScale = new Vector3(x, y, z);
            }
        }

        if (m_wInfo.animaMode != WndAnimationMode.situ)
        {
            Vector3 startPos = Vector3.zero;
            UIWidget widget = m_wndObj.GetComponent<UIWidget>();
            //处理出场模式
            switch (m_wInfo.animaMode)
            {
                case WndAnimationMode.down:
                    {
                        startPos.y = widget.height;
                    }
                    break;
                case WndAnimationMode.up:
                    {
                        startPos.y = -widget.height;
                    }
                    break;
                case WndAnimationMode.left:
                    {
                        startPos.x = -widget.width;
                    }
                    break;
                case WndAnimationMode.right:
                    {
                        startPos.x = widget.width;
                    }
                    break;
            } 

            if (isShow)
            {

                 m_wndObj.transform.localPosition = new Vector3(
                    DP_TweenFuncs.Tween_Linear_Float(startPos.x, 0, t),
                    DP_TweenFuncs.Tween_Linear_Float(startPos.y, 0, t),
                    DP_TweenFuncs.Tween_Linear_Float(startPos.z, 0, t)
                    );

            }
            else
            { 
                m_wndObj.transform.localPosition = new Vector3(
                   DP_TweenFuncs.Tween_Linear_Float(m_TweenStartPos.x,startPos.x,  t),
                   DP_TweenFuncs.Tween_Linear_Float(m_TweenStartPos.y,startPos.y,  t),
                   DP_TweenFuncs.Tween_Linear_Float(m_TweenStartPos.z, startPos.z, t)
                   );
            }
        } 
    }


    Vector3 m_TweenStartScale;
    Vector3 m_TweenStartPos;
    float m_TweenStartAlpha;

    void _ShowHide(bool isShow, float duration)
    {
        //移除所有现有的显示效果
        StopAllTweener();
         
        if (isShow && !m_panelObj.activeSelf)
        {
            m_panelObj.SetActive(true);
        }

        if (isShow)  m_Visible = true;
         
        if (duration>0)//需要渐变
        {
            //显示挡板
            m_baffleObj.SetActive(true);

            UIWidget widget = m_wndObj.GetComponent<UIWidget>();
            widget.SetAnchor((GameObject)null);//解除锚点

            m_TweenStartScale = m_wndObj.transform.localScale;
              m_TweenStartPos = m_wndObj.transform.localPosition;
              m_TweenStartAlpha = m_wndObj.GetComponent<UIWidget>().alpha;


            var t = 0f;
            m_Tween = DOTween.To(() => t, (v) => { t = v; tweenShowHide(isShow, v); }, 1, duration).SetAutoKill(true).SetEase(Ease.Linear)
                .OnComplete(() =>
                    {
                        //隐藏挡板
                        m_baffleObj.SetActive(false);
                        if (!isShow) _DoHide();
                    }
                );
            
        }else//瞬间完成
        {
            if (isShow)
            {
                m_panelObj.SetActive(true); 
                m_Visible = true;
                m_wndObj.GetComponent<UIWidget>().alpha = 1;
                m_wndObj.transform.localScale = Vector3.one;
            }
            else
                _DoHide();
        } 
    }


    public GameObject FindWidget(string objName)
    {
        string[] name_path = objName.Split('/');

        Transform tf = GameObjectExtension.FindChild(m_wndObj.transform, name_path);
        return (tf==null)?null:tf.gameObject;
    }

    public GameObject GetGameObject()
    {
        return m_wndObj;
    }

    /*
    void OnFinished()
    {
        m_TweenCount--;
        if (m_TweenCount > 0) return;
        if (m_TweenCount < 0) { m_TweenCount = 0; return; }

        bool needHide = false;

        {

            if (m_wndObj.GetComponents<TweenScale>().Length > 0)
            {
                if (m_wndObj.transform.localScale.x < 0.1f)
                {
                    needHide = true;
                }
            }

            if (!needHide)
            {
                float currAlpha = NGuiHelper.GetAlpha(m_wndObj);
                if (currAlpha < 0.1f)
                {
                    needHide = true;
                }
            }
        }
        
        RemoveAllEffect();
        
        //if (needHide)   _DoHide(); 
    }
    */

    void _DoHide()
    {
        if (m_panelObj == null) return;
        m_panelObj.SetActive(false); //关闭一切逻辑，并隐藏
        m_Visible = false;
        WndManage.Single._OnWndHide(m_wInfo.name);//通知界面隐藏
    }

    /*
    void RemoveAllEffect()
    { 
        m_wndObj.RemoveComponents(  typeof(TweenAlpha));
        m_wndObj.RemoveComponents( typeof(TweenScale));
        m_wndObj.RemoveComponents(  typeof(TweenPosition)); 
    }*/

    public void Dispose()
    {

        StopAllTweener();

        if (m_Visible)
            _DoHide();


        if (m_panelObj != null)
        {
            GameObject.Destroy(m_panelObj);
            m_panelObj = null;
        } 
    }
    void StopAllTweener()
    {
        if (m_Tween != null && m_Tween.IsActive())
        {m_Tween.Kill(); m_Tween = null;}
    }

    public bool IsVisible { get { return m_Visible; } }

    public int showCount = 0;//从实例创建以来的总显示次数
    bool m_Visible = false;
    public GameObject m_wndObj = null;
    public GameObject m_panelObj = null;
    public GameObject m_baffleObj = null;
    wndInfo m_wInfo = null;
    Tweener m_Tween = null;
    //bool m_isShowing = false;
    //int m_TweenCount = 0;
}
