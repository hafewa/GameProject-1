using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using QKSDK;
using QKFrameWork.CQKCommand;
 
class LuaGamePlatformLogicLib
{ 
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();

    public const string LIB_NAME = "GamePlatformLogic";

    public static int OpenLib(ILuaState lua)
    {

        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            
            
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
            new NameFuncPair("ShowLogin",S_ShowLogin),
            new NameFuncPair("EvtLoginSuccess",S_EvtLoginSuccess),
            new NameFuncPair("EvtLoginExpired",S_EvtLoginExpired),
            new NameFuncPair("EvtRequestSending",S_EvtRequestSending),
            new NameFuncPair("EvtRequestFinished",S_EvtRequestFinished),
            new NameFuncPair("EvtConnectBroken",S_EvtConnectBroken),
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        /*
        NameValuePair[] enum_GamePlatformID = new NameValuePair[]
        {
            //new NameValuePair("QK",PlatformIDDef.QK),
        };
        m_ClassRegHelper.RegEnum(lua, "GamePlatformID", enum_GamePlatformID);*/
        return 1;
    }
     

     static int S_ShowLogin(ILuaState lua)
    {
        SDKInstance.ShowLoginUI();

		return 0;
    }

    static int S_EvtLoginSuccess(ILuaState lua)
     {
        if (GameQKSDKListener.Single.OnLoginSuccess == null)
        {
            GameQKSDKListener.Single.OnLoginSuccess = new QKEvent();
        }
        LuaEventLib._wrap(lua, GameQKSDKListener.Single.OnLoginSuccess);
        return 1;
     }

    static int S_EvtLoginExpired(ILuaState lua)
    {
        if (GameQKSDKListener.Single.OnLoginExpired == null)
        {
            GameQKSDKListener.Single.OnLoginExpired = new QKEvent();
        }
        LuaEventLib._wrap(lua, GameQKSDKListener.Single.OnLoginExpired);
        return 1;
    }

    static int S_EvtRequestSending(ILuaState lua)
    {
        if (GameQKSDKListener.Single.OnRequestSending == null)
        {
            GameQKSDKListener.Single.OnRequestSending = new QKEvent();
        }
        LuaEventLib._wrap(lua, GameQKSDKListener.Single.OnRequestSending);
        return 1;
    }

    static int S_EvtRequestFinished(ILuaState lua)
    {
        if (GameQKSDKListener.Single.OnRequestFinished == null)
        {
            GameQKSDKListener.Single.OnRequestFinished = new QKEvent();
        }
        LuaEventLib._wrap(lua, GameQKSDKListener.Single.OnRequestFinished);
        return 1;
    }

    static int S_EvtConnectBroken(ILuaState lua)
    {
        if (GameQKSDKListener.Single.OnConnectBroken == null)
        {
            GameQKSDKListener.Single.OnConnectBroken = new QKEvent();
        }
        LuaEventLib._wrap(lua, GameQKSDKListener.Single.OnConnectBroken);
        return 1;
    } 
} 
 
