using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using UniLua; 
class LuaStringEXLib
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
    public static void OpenLib(ILuaState lua)
    {
        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
            new NameFuncPair("sformat",S_sformat), 

        };
        m_ClassRegHelper.AppendStatics(lua,LuaStrLib.LIB_NAME, static_define);
    }
     
    public static int S_sformat(ILuaState lua)
    {
        try
        {
            int n = lua.GetTop();

            if (!lua.IsString(1))//首个不是字符串类型,则把每个元素的字符串形式连接起来
            {
                string re = "";
                for (int i = 1; i <= n; ++i)
                {
                    object obj = LuaRoot.GetAnyValue(lua, i);
                    re += obj.ToString();
                    IDisposable luaValue = obj as IDisposable;
                    if (luaValue != null) luaValue.Dispose();
                }
                lua.PushString(re);
                return 1;
            }

            object[] paras = new object[n - 1];
            for (int i = 2; i <= n; ++i)
            {
                object obj = LuaRoot.GetAnyValue(lua, i);
                ILuaValue luaValue = obj as ILuaValue;
                if (luaValue != null)
                {
                    paras[i - 2] = luaValue.GetStringValue(lua);
                    luaValue.Dispose();
                }
                else
                    paras[i - 2] = obj;
            }

            lua.PushString(string.Format(lua.L_CheckString(1), paras));
        }catch(Exception ex)
        {
            lua.L_Error(ex.ToString());
        }

        return 1;
    }
}

