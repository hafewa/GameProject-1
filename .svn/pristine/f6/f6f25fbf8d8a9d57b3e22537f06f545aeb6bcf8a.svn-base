using UnityEngine;
using System.Collections;
public enum EUIP_Type
{
    EUIP_None,
    EUIP_Target,
}
public class UISysScaleFixed : MonoBehaviour {
    //1如果界面的缩放模式是constrained,那么只要粒子的大小和界面是相同的，即使界面拉伸也没有问题，难度是确定最开始界面的粒子大小
    //2如果界面的缩放模式是flexible,那么在界面缩放的时候，粒子的位置会有偏移
	// Use this for initialization
    public float m_scale = 1.0f;
    public Vector3 m_offset = Vector3.zero;     //与对齐的界面元素的偏移
    public Transform m_trans = null;            //对齐的界面元素
    public Transform m_camera = null;           //界面摄像机
    public EUIP_Type m_type = EUIP_Type.EUIP_Target;
    Vector3 oldCamPos = Vector3.zero;
    Vector3 oldTranPos = Vector3.zero;
    Vector3 oldOff = Vector3.zero;
    float oldScale = 1.0f;
    float m_modScale = 1.0f;
	void Start () {
        if (UICamera.currentCamera != null)
        {
            m_camera = UICamera.currentCamera.transform;
        }
        if (m_trans == null)
            m_trans = transform.parent;
        m_modScale = 1 / m_scale;
        UpdatePos();
	}
	
	// Update is called once per frame
	void Update () {
        if (m_camera == null && UICamera.currentCamera != null)
        {
            m_camera = UICamera.currentCamera.transform;
        }
        if (m_trans == null || m_camera == null || m_scale == 0)
        {
            return;
        }

        if(oldScale != m_scale ||oldOff != m_offset || oldTranPos != m_trans.position || oldCamPos != m_camera.position)
        {
            oldScale = m_scale;
            oldOff = m_offset;
            oldTranPos = m_trans.position;
            oldCamPos = m_camera.position;
            UpdatePos();
        }
        
	}
    void UpdatePos()
    {
        if (m_type == EUIP_Type.EUIP_None)
        {
           
            float dis = Vector3.Distance(m_camera.position, transform.position);
            Vector3 nor = transform.position - m_camera.position;
            nor = nor.normalized;
            transform.position = m_camera.position + nor * dis * m_modScale;
        }
        else
        {
            Vector3 vParent = m_trans.position + m_offset;
            float dis = Vector3.Distance(m_camera.position, vParent);
            Vector3 nor = vParent - m_camera.position;
            nor = nor.normalized;
            transform.position = m_camera.position + nor * dis * m_modScale;
        }
    }
    public void Init(Transform trans,Vector3 offset,Camera cam)
    {
        if (trans != null)
            m_trans = trans;
        m_offset = offset; ;
        if(cam  != null)
        {
            m_camera = cam.transform;
        }
    }

}
