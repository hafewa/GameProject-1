#if !UNITY_EDITOR && (UNITY_IPHONE || UNITY_ANDROID || UNITY_WP8 || UNITY_BLACKBERRY || UNITY_WINRT)
#define MOBILE
#endif

using UnityEngine;
using System.Collections;

public class QKUIClickColor : MonoBehaviour {

    public Texture2D m_tex;
    public UITexture m_DriftCloud;//流动云层
    public Vector2 m_MapSize = new Vector2(5632, 3584);
    public Camera uicam;
    public static string layer = "Quad";//碰撞避开UI层
    static QKUIClickColor inst = null;
    int m_ProvinceID = 1;//已开启的最后一个省
	// Use this for initialization
	void Start () {
        inst = this;
        //不能这么使用是因为QKPass、里也有UICamera，会弄混
        //uicam = = UICamera.mainCamera;
        uicam = GameObject.Find("/UIRoot/Camera_UI").GetComponent<Camera>();
        if (m_DriftCloud == null)
        {
            Transform t = transform.Find("Texture");
            if (t != null)
            {
                m_DriftCloud = t.gameObject.GetComponent<UITexture>();
            }

        }
        if (m_DriftCloud != null)
            m_DriftCloud.onRender += SetShaderInfo;
    }
    int lastupdate = 0;
	void Update() {
        if (lastupdate != Time.frameCount)
        {
            lastupdate = Time.frameCount;
        }
        else
        {
            return;
        }
#if MOBILE
			if (Input.touchCount <= 0)
				return;
			Vector3 clickPos = Vector3.zero;
            Touch touch = Input.GetTouch (0);
            if(touch.phase != TouchPhase.Ended)//注意这个需要测试，当手指离开时触发这个事件
                return;
			clickPos = Input.GetTouch (0).position;
#else
        if (!Input.GetMouseButtonUp(0))
				return;
			Vector3 clickPos = Input.mousePosition;
#endif
		if(uicam == null)
        {
            uicam = GameObject.Find("/UIRoot/Camera_UI").GetComponent<Camera>();
        }
		RaycastHit hit;
        if (!Physics.Raycast(uicam.ScreenPointToRay(clickPos), out hit, 100000, 1 << LayerMask.NameToLayer(layer)))
			return;
       
        if (hit.collider.gameObject.name.IndexOf("cloud") == -1)
            return;
        ////计算当前点击的位置和map的相对位置，之后计算在贴图上的uv坐标
        Vector3 pos = hit.collider.transform.localPosition;
        int width = hit.collider.gameObject.GetComponent<UIWidget>().width;
        int height = hit.collider.gameObject.GetComponent<UIWidget>().height;
        // Debug.LogError("===m_tex==width===" +pos.ToString()+"==="+ width+"==="+height);
        Vector3 hitpos = pos + new Vector3(width * hit.textureCoord.x - width / 2, height * hit.textureCoord.y - height / 2, 0);
        //uv的坐标和界面的坐标y轴是相反的
        hitpos.y = m_MapSize.y + hitpos.y;
        //Debug.LogError("===m_tex==hitpos==="+ hit.textureCoord.ToString()+"===="+ hitpos.ToString());
        //计算出uv坐标，获取贴图的颜色
        Vector2 pixelUV3 = new Vector2(hitpos.x / m_MapSize.x, hitpos.y / m_MapSize.y);
        pixelUV3.x *= m_tex.width;
        pixelUV3.y *= m_tex.height;
        Color r3 = m_tex.GetPixel((int)pixelUV3.x, (int)pixelUV3.y);
        //Debug.LogError("===m_tex==r3===" + r3.ToString());
        int ID = QKUIQuad.GetColorID(r3);
        if(ID > 0)
        {
            //Debug.LogError("==ID > 0=" + ID);
            //知道ID后就可以播放就开始调lua的函数播放云朵散开的动画，而且可以告诉关卡这个关卡解锁了
            QKUIQuad quad = QKUIQuad.Get(ID);
            if(quad != null)
            {
                //Debug.LogError("==quad != null" + ID);
                //抛出战斗结束事件
                QuadEvent.PostQuadClick(quad);
            }
        }
       
	}
    public static QKUIClickColor Single
    {
        get{
                return inst;
          }
    }
    //获取当前位置的省ID
    public int GetProVinceID(float x,float y)
    {
        int ID = 0;
        if(m_tex != null)
        {
            float vx = x / m_MapSize.x * m_tex.width;
            float vy = y / m_MapSize.y * m_tex.height;
            Color r3 = m_tex.GetPixel((int)vx, (int)vy);
            ID = QKUIQuad.GetColorID(r3);
            //Debug.LogError("===m_tex==r3==="+x+" "+y+" "+ID+" " + r3.ToString());
        }
        else
        {
            MonoEX.Debug.Logout(MonoEX.LOG_TYPE.LT_ERROR, "GetProVinceID tex is null");
        }
       
        return ID;
    }
    //设置当前已经开启的省
    public void SetProVinceID(int ProvinceID)
    {
        m_ProvinceID = ProvinceID;
        if (m_tex != null && m_DriftCloud != null && m_DriftCloud.mainTexture != null)
        {
            ModifyAllTex.Single.InitAll(m_tex, (Texture2D)m_DriftCloud.mainTexture, ProvinceID, 8, 0, 1);
            ModifyAllTex.Single.StartCalcAll();
        }
        
    }
    public void SetShaderInfo(Material mat)
    {
        if (mat != null)
        {
            mat.SetInt("_QID", m_ProvinceID);
        }
    }
}
