using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;

class LuaAvatarActInfoLibs
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();


    public const string LIB_NAME = "AvatarActInfo";

    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        { 
            new NameFuncPair("GetActMB",M_GetActMB),
            new NameFuncPair("GetID",M_GetID),
            new NameFuncPair("GetActID",M_GetActID),
            new NameFuncPair("GetLeftRight",M_GetLeftRight),
            new NameFuncPair("GetUpDown",M_GetUpDown),
            new NameFuncPair("GetScale",M_GetScale),
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        { 
        };
        m_ClassRegHelper.RegStatics(lua, static_define);



        return 1;
    }



    public static void _wrap(ILuaState lua, AvatarActInfo obj)
    {
        NameValuePair[] propertys = new NameValuePair[]
        {
            new NameValuePair(LuaOpenLibs.OBJ_HANDELNAME,obj),
        };

        m_ClassRegHelper.InstanceLuaClass(lua, propertys);
    }

    public static AvatarActInfo Lua2Obj(ILuaState lua, int index)
    {
        LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<AvatarActInfo>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }

    static int M_GetActMB(ILuaState lua)
    {
        //in self
        //out string
        AvatarActInfo self = Lua2Obj(lua, 1);
        lua.PushString(self.ActMB);
        return 1;
    }



    static int M_GetID(ILuaState lua)
    {
        //in self
        //out int
        AvatarActInfo self = Lua2Obj(lua, 1);
        lua.PushInteger(self.ID);
        return 1;
    }


    static int M_GetActID(ILuaState lua)
    {
        //in self
        //out int
        AvatarActInfo self = Lua2Obj(lua, 1);
        lua.PushInteger(self.ActID);
        return 1;
    }


    static int M_GetLeftRight(ILuaState lua)
    {
        //in self
        //out number
        AvatarActInfo self = Lua2Obj(lua, 1);
        lua.PushNumber(self.LeftRight);
        return 1;
    }

    static int M_GetUpDown(ILuaState lua)
    {
        //in self
        //out number
        AvatarActInfo self = Lua2Obj(lua, 1);
        lua.PushNumber(self.UpDown);
        return 1;
    }

    static int M_GetScale(ILuaState lua)
    {
        //in self
        //out number
        AvatarActInfo self = Lua2Obj(lua, 1);
        lua.PushNumber(self.Scale);
        return 1;
    } 
}

class LuaSData_AvatarActLibs
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();


    public const string LIB_NAME = "SData_AvatarAct";

    public static int OpenLib(ILuaState lua)
    {

        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            
            
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
            new NameFuncPair("GetRow",S_GetRow),    
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        return 1;
    }


    /// <summary>
    /// 获取一行数据
    /// </summary>
    /// <param name="lua"></param>
    /// <returns></returns>
    static int S_GetRow(ILuaState lua)
    {
        //in id
        //out AvatarActInfo
        int id = lua.L_CheckInteger(1);
        AvatarActInfo info = SData_AvatarAct.Single.Get(id);
        LuaAvatarActInfoLibs._wrap(lua, info);
        return 1;
    }
     

     
}