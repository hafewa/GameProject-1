using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using MonoEX;

class LuaByteArrayLib
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();

    public const string LIB_NAME = "ByteArray";

    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
             new NameFuncPair("SeekReadPoint",M_SeekReadPoint),
            new NameFuncPair("SeekWritePoint",M_SeekWritePoint),
            new NameFuncPair("ToBytes",M_ToBytes),
            new NameFuncPair("Length",M_Length),
            new NameFuncPair("ReadBytes",M_ReadBytes),
            new NameFuncPair("ReadString",M_ReadString),
            new NameFuncPair("ReadUShort",M_ReadUShort),
            new NameFuncPair("ReadShort",M_ReadShort),
            new NameFuncPair("ReadUInt",M_ReadUInt),
            new NameFuncPair("ReadInt",M_ReadInt),
            new NameFuncPair("ReadByte",M_ReadByte),
            new NameFuncPair("WriteBytes",M_WriteBytes),
            new NameFuncPair("WriteString",M_WriteString),
            new NameFuncPair("WriteUShort",M_WriteUShort),
            new NameFuncPair("WriteShort",M_WriteShort),
            new NameFuncPair("WriteUInt",M_WriteUInt),
            new NameFuncPair("WriteInt",M_WriteInt),
            new NameFuncPair("WriteByte",M_WriteByte),
        };


        NameFuncPair[] operator_define = new NameFuncPair[]
        {
            new NameFuncPair("__tostring",OP___tostring),
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {  
           new NameFuncPair("new",S_new),
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        NameValuePair[] SeekMode_Item = new NameValuePair[]
        {
            new NameValuePair("Head",ByteArray.SeekMode.Head),
            new NameValuePair("Curr",ByteArray.SeekMode.Curr),
            new NameValuePair("Tail",ByteArray.SeekMode.Tail),
        };
        m_ClassRegHelper.RegEnum(  lua,"SeekMode",SeekMode_Item);

        return 1;
    }


    //每次获取对象时，重新产生包装类
    public static void _wrap(ILuaState lua, ByteArray evtObj)
    {
        NameValuePair[] propertys = new NameValuePair[]
        {
            new NameValuePair(LuaOpenLibs.OBJ_HANDELNAME,evtObj),
        };

        m_ClassRegHelper.InstanceLuaClass(lua, propertys);
    }

    public static ByteArray Lua2Obj(ILuaState lua, int index)
    {
        if (lua.IsNil(index)) return null;

        LuaMemberHelper.CheckClass(lua, index);
        return LuaMemberHelper.GetObject<ByteArray>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }


    static int S_new(ILuaState lua)
    {
        //in 
        //out ByteArray 
        _wrap(lua, new ByteArray());
        return 1;
    }

    static int M_WriteByte(ILuaState lua)
    {
        //in self,v
        ByteArray self = Lua2Obj(lua, 1);
       uint v = lua.L_CheckUnsigned(2);
       self.WriteByte((byte)v);
       return 0;
    }

    static int M_WriteInt(ILuaState lua)
    {
        //in self,v
        ByteArray self = Lua2Obj(lua, 1);
        int v = lua.L_CheckInteger(2);
        self.WriteInt(v);
        return 0;
    }

    static int M_WriteUInt(ILuaState lua)
    {
        //in self,v
        ByteArray self = Lua2Obj(lua, 1);
        uint v = lua.L_CheckUnsigned(2);
        self.WriteUInt(v);
        return 0;
    }


    static int M_WriteShort(ILuaState lua)
    {
        //in self,v
        ByteArray self = Lua2Obj(lua, 1);
        int v = lua.L_CheckInteger(2);
        self.WriteShort((short)v);
        return 0;
    }

    static int M_WriteUShort(ILuaState lua)
    {
        //in self,v
        ByteArray self = Lua2Obj(lua, 1);
        uint v = lua.L_CheckUnsigned(2);
        self.WriteUShort((ushort)v);
        return 0;
    }

    static int M_WriteString(ILuaState lua)
    {
        //in self,v
        ByteArray self = Lua2Obj(lua, 1);
        string v = lua.L_CheckString(2);
        self.WriteString(v);
        return 0;
    }

    static int M_WriteBytes(ILuaState lua)
    {
        //in self,ByteArray
        ByteArray self = Lua2Obj(lua, 1);
        ByteArray v = Lua2Obj(lua, 2);
        self.WriteBytes(v.ToBytes());
        return 0;
    }

    static int M_ReadByte(ILuaState lua)
    {
        //in self
        //out isSuccess,v
        ByteArray self = Lua2Obj(lua, 1);
        byte v;
        lua.PushBoolean(self.ReadByte(out v));
        lua.PushUnsigned(v);
        return 2;
    }

    static int M_ReadInt(ILuaState lua)
    {
        //in self
        //out isSuccess,v
        ByteArray self = Lua2Obj(lua, 1);
        int v;
        lua.PushBoolean(self.ReadInt(out v));
        lua.PushInteger(v);
        return 2;
    }

    static int M_ReadUInt(ILuaState lua)
    {
        //in self
        //out isSuccess,v
        ByteArray self = Lua2Obj(lua, 1);
        uint v;
        lua.PushBoolean(self.ReadUInt(out v));
        lua.PushUnsigned(v);
        return 2;
    }


    static int M_ReadShort(ILuaState lua)
    {
        //in self
        //out isSuccess,v
        ByteArray self = Lua2Obj(lua, 1);
        short v;
        lua.PushBoolean(self.ReadShort(out v));
        lua.PushInteger(v);
        return 2;
    }

    static int M_ReadUShort(ILuaState lua)
    {
        //in self
        //out isSuccess,v
        ByteArray self = Lua2Obj(lua, 1);
        ushort v;
        lua.PushBoolean(self.ReadUShort(out v));
        lua.PushUnsigned(v);
        return 2;
    }

    static int M_ReadString(ILuaState lua)
    {
        //in self
        //out isSuccess,v
        ByteArray self = Lua2Obj(lua, 1);
        string v;
        lua.PushBoolean(self.ReadString(out v));
        lua.PushString(v);
        return 2;
    }

    static int M_ReadBytes(ILuaState lua)
    {
        //in self
        //out isSuccess,ByteArray
        ByteArray self = Lua2Obj(lua, 1);
        byte[] v;
        lua.PushBoolean(self.ReadBytes(out v));

        ByteArray re = new ByteArray();
        re.WriteBytes(v);
        _wrap(lua, re);
        return 2;
    }

    static int M_Length(ILuaState lua)
    {
        //in self
        //out len
        ByteArray self = Lua2Obj(lua, 1);
        lua.PushInteger(self.Length);
        return 1;
    }

    static int M_ToBytes(ILuaState lua)
    {
        //in self
        //out ByteArray
        ByteArray self = Lua2Obj(lua, 1);
        byte[] v = self.ToBytes();
        ByteArray re = new ByteArray();
        re.WriteBytes(v);
        _wrap(lua, re);
        return 1;
    }

    static int M_SeekWritePoint(ILuaState lua)
    {
        //in self,SeekMode,offset
        //out
        ByteArray self = Lua2Obj(lua, 1);
        ByteArray.SeekMode seekMode = (ByteArray.SeekMode)lua.L_CheckInteger(2);
        int offset = lua.L_CheckInteger(3);
        self.SeekWritePoint(seekMode,offset);
        return 0;
    }

    static int M_SeekReadPoint(ILuaState lua)
    {
        //in self,SeekMode,offset
        //out
        ByteArray self = Lua2Obj(lua, 1);
        ByteArray.SeekMode seekMode = (ByteArray.SeekMode)lua.L_CheckInteger(2);
        int offset = lua.L_CheckInteger(3);
        self.SeekReadPoint(seekMode, offset);
        return 0;
    }

    private static int OP___tostring(ILuaState lua)
    {
        ByteArray self = Lua2Obj(lua, 1);
        lua.PushString(self.ToString());
        return 1;
    } 

} 