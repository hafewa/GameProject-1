using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;
class LuaCMUIZhenFaViewLib
{
    class ZhenFaViewInfo : ICoreComponentInfo
    {
        public Type type { get { return typeof(UIZhenFaView); } }
        public string name { get { return LuaCMUIZhenFaViewLib.LIB_NAME; } }
        public void newLuaObj(ILuaState lua, Component cmp)
        {
            LuaCMUIZhenFaViewLib._wrap(lua, cmp as UIZhenFaView);
        }
    }

    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
    // static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "CMUIZhenFaView";


    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("ResetZhenFa",M_ResetZhenFa),
            new NameFuncPair("SetSize",M_SetSize),
            new NameFuncPair("GetObj",M_GetObj),
            new NameFuncPair("ResetZhenFaByView",M_ResetZhenFaByView),
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
           
            
        };
        //注册静态属性
        NameValuePair[] static_property = new NameValuePair[]
        {
            new NameValuePair("Name",LIB_NAME),
        };
        m_ClassRegHelper.RegStatics(lua, static_define, static_property);

        LuaGameObjectLib.RegComponent(new ZhenFaViewInfo());

        return 1;
    }

    public static void _wrap(ILuaState lua, UIZhenFaView comp)
    {
        LuaOpenLibs._wrapComponent(lua, comp, LIB_NAME, m_ClassRegHelper);
    }
    public static UIZhenFaView Lua2Obj(ILuaState lua, int index)
    {

        LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<UIZhenFaView>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }

    static int M_ResetZhenFaByView(ILuaState lua)
    {
        UIZhenFaView self = Lua2Obj(lua, 1);
        self.ResetZhenFa();
        return 0;
    }
    static int M_ResetZhenFa(ILuaState lua)
    {
        UIZhenFaView self = Lua2Obj(lua, 1);
        short ZhenFaID = (short)lua.L_CheckInteger(2);
        self.ResetZhenFa(ZhenFaID);
        return 0;
    }

    static int M_SetSize(ILuaState lua)
    {
        UIZhenFaView self = Lua2Obj(lua, 1);
        int Magnification = lua.L_CheckInteger(2);
        int xOffset = lua.L_CheckInteger(3);
        int yOffset = lua.L_CheckInteger(4);
        self.SetSize(Magnification, xOffset, yOffset);
        //LuaZhenFaViewLib._wrap(lua, self);
        return 0;
    }

    static int M_GetObj(ILuaState lua)
    {
        UIZhenFaView self = Lua2Obj(lua, 1);
        string ObjName = lua.L_CheckString(2);
        GameObject temp = self.GetObj(ObjName);
        LuaGameObjectLib._wrap(lua, temp);
        //LuaZhenFaViewLib._wrap(lua, self);
        return 1;
    }
}
 
