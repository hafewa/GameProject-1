using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.IO;

public class QKModifyPartTex : MonoBehaviour
{

    // Use this for initialization
    public Texture2D m_tex;
    public Texture2D m_tempTex;
    public int m_startX;
    public int m_startY;
    int m_width;
    int m_height;
    public TTType m_Type = TTType.TT_NEI;
    public bool isUpdata = false;
    public int m_off = 1;
    public int m_pointNum = 0;//周围有pointNum个不一样的点，就认为是边界
    public int m_lineSize = 5;
    public int m_curId = 10;

    ModifyPartTex m_modifyPartTex;
    void Start()
    {
        UITexture uiTex = gameObject.GetComponent<UITexture>();
        m_tempTex = (Texture2D)uiTex.mainTexture;
        m_modifyPartTex = new ModifyPartTex();
        m_modifyPartTex.InitPart(m_tex, uiTex, m_curId, m_lineSize, m_Type, m_pointNum, m_off);

    }

    // Update is called once per frame
    void Update()
    {

        if (isUpdata)
        {
            isUpdata = false;
            //StartCoroutine("CalcEdge");
            if (m_modifyPartTex != null)
            {
                m_modifyPartTex.SetInfo(m_curId, m_lineSize, m_Type, m_pointNum, m_off);
                m_modifyPartTex.StartCalcPart();
            }
        }
    }
}
public class ModifyPartTex : ModifyTex
{
    static ModifyPartTex s_inst = null;
    public static ModifyPartTex Single
    {
        get
        {
            if (s_inst == null)
            {
                s_inst = new ModifyPartTex();
            }
            return s_inst;
        }
    }
}
public class ModifyAllTex : ModifyTex
{
    static ModifyAllTex s_inst = null;
    public static ModifyAllTex Single
    {
        get
        {
            if (s_inst == null)
            {
                s_inst = new ModifyAllTex();
            }
            return s_inst;
        }
    }
}
