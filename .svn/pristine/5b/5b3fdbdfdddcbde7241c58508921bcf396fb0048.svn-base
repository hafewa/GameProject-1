//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WndManageWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WndManage), typeof(System.Object));
		L.RegFunction("DestroyHideWnds", DestroyHideWnds);
		L.RegFunction("DestroyWnd", DestroyWnd);
		L.RegFunction("RegWnd", RegWnd);
		L.RegFunction("RegWnd1", RegWnd1);
		L.RegFunction("GetDependPackets", GetDependPackets);
		L.RegFunction("ShowWnd", ShowWnd);
		L.RegFunction("HideWnd", HideWnd);
		L.RegFunction("PreLoadDepend", PreLoadDepend);
		L.RegFunction("_GetWnd", _GetWnd);
		L.RegFunction("_OnWndHide", _OnWndHide);
		L.RegFunction("LoadMainBaseActors", LoadMainBaseActors);
		L.RegFunction("LogicInit_Go", LogicInit_Go);
		L.RegFunction("LogicInit_GetInitProgress", LogicInit_GetInitProgress);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnWndDestroy", get_OnWndDestroy, set_OnWndDestroy);
		L.RegVar("OnWndOpen", get_OnWndOpen, set_OnWndOpen);
		L.RegVar("UIRootObj", get_UIRootObj, null);
		L.RegVar("UIPanelObj", get_UIPanelObj, null);
		L.RegVar("Single", get_Single, null);
		L.RegFunction("Evt_WndDestroy", WndManage_Evt_WndDestroy);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyHideWnds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WndManage obj = (WndManage)ToLua.CheckObject(L, 1, typeof(WndManage));
			obj.DestroyHideWnds();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyWnd(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(WndManage), typeof(Wnd)))
			{
				WndManage obj = (WndManage)ToLua.ToObject(L, 1);
				Wnd arg0 = (Wnd)ToLua.ToObject(L, 2);
				obj.DestroyWnd(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(WndManage), typeof(string), typeof(float), typeof(System.Action<Wnd>)))
			{
				WndManage obj = (WndManage)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				System.Action<Wnd> arg2 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<Wnd>)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<Wnd>), func) as System.Action<Wnd>;
				}

				obj.DestroyWnd(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WndManage.DestroyWnd");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegWnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			WndManage obj = (WndManage)ToLua.CheckObject(L, 1, typeof(WndManage));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			WndFadeMode arg4 = (WndFadeMode)ToLua.CheckObject(L, 6, typeof(WndFadeMode));
			WndAnimationMode arg5 = (WndAnimationMode)ToLua.CheckObject(L, 7, typeof(WndAnimationMode));
			obj.RegWnd(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegWnd1(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			WndManage obj = (WndManage)ToLua.CheckObject(L, 1, typeof(WndManage));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
			obj.RegWnd1(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDependPackets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WndManage obj = (WndManage)ToLua.CheckObject(L, 1, typeof(WndManage));
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			System.Collections.Generic.HashSet<string> o = obj.GetDependPackets(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowWnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			WndManage obj = (WndManage)ToLua.CheckObject(L, 1, typeof(WndManage));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			System.Action<Wnd> arg3 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<Wnd>)ToLua.CheckObject(L, 5, typeof(System.Action<Wnd>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<Wnd>), func) as System.Action<Wnd>;
			}

			obj.ShowWnd(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideWnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			WndManage obj = (WndManage)ToLua.CheckObject(L, 1, typeof(WndManage));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			System.Action<Wnd> arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<Wnd>)ToLua.CheckObject(L, 4, typeof(System.Action<Wnd>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<Wnd>), func) as System.Action<Wnd>;
			}

			obj.HideWnd(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PreLoadDepend(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WndManage obj = (WndManage)ToLua.CheckObject(L, 1, typeof(WndManage));
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<Wnd> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<Wnd>)ToLua.CheckObject(L, 3, typeof(System.Action<Wnd>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<Wnd>), func) as System.Action<Wnd>;
			}

			obj.PreLoadDepend(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _GetWnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WndManage obj = (WndManage)ToLua.CheckObject(L, 1, typeof(WndManage));
			string arg0 = ToLua.CheckString(L, 2);
			Wnd o = obj._GetWnd(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _OnWndHide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WndManage obj = (WndManage)ToLua.CheckObject(L, 1, typeof(WndManage));
			string arg0 = ToLua.CheckString(L, 2);
			obj._OnWndHide(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMainBaseActors(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = WndManage.LoadMainBaseActors();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogicInit_Go(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WndManage obj = (WndManage)ToLua.CheckObject(L, 1, typeof(WndManage));
			obj.LogicInit_Go();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogicInit_GetInitProgress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WndManage obj = (WndManage)ToLua.CheckObject(L, 1, typeof(WndManage));
			float o = obj.LogicInit_GetInitProgress();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnWndDestroy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WndManage obj = (WndManage)o;
			WndManage.Evt_WndDestroy ret = obj.OnWndDestroy;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnWndDestroy on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnWndOpen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WndManage obj = (WndManage)o;
			QKEvent ret = obj.OnWndOpen;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnWndOpen on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIRootObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WndManage obj = (WndManage)o;
			UnityEngine.GameObject ret = obj.UIRootObj;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UIRootObj on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIPanelObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WndManage obj = (WndManage)o;
			UnityEngine.GameObject ret = obj.UIPanelObj;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UIPanelObj on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Single(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, WndManage.Single);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnWndDestroy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WndManage obj = (WndManage)o;
			WndManage.Evt_WndDestroy arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (WndManage.Evt_WndDestroy)ToLua.CheckObject(L, 2, typeof(WndManage.Evt_WndDestroy));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(WndManage.Evt_WndDestroy), func) as WndManage.Evt_WndDestroy;
			}

			obj.OnWndDestroy = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnWndDestroy on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnWndOpen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WndManage obj = (WndManage)o;
			QKEvent arg0 = (QKEvent)ToLua.CheckObject(L, 2, typeof(QKEvent));
			obj.OnWndOpen = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnWndOpen on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WndManage_Evt_WndDestroy(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(WndManage.Evt_WndDestroy), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(WndManage.Evt_WndDestroy), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

