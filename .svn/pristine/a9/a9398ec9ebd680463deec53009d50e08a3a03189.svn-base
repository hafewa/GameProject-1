using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;


class LuaCMUITweenerLib
{
    class CMUITweenerInfo : ICoreComponentInfo
    {
        public Type type { get { return typeof(UITweener); } }
        public string name { get { return LuaCMUITweenerLib.LIB_NAME; } }
        public void newLuaObj(ILuaState lua, Component cmp)
        {
            LuaCMUITweenerLib._wrap(lua, cmp as UITweener);
        }
    }

    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
   // static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "CMUITweener";
     

    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        { 
            new NameFuncPair("PlayForward",M_PlayForward),
            new NameFuncPair("PlayReverse",M_PlayReverse),
            new NameFuncPair("ResetToBeginning",M_ResetToBeginning),
            new NameFuncPair("GetTweenGroup",M_GetTweenGroup),
            new NameFuncPair("PosFromToY",M_PosFromToY),//这个接口只是给position类型用的
            
        };
       
        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
           
            
        };
        //注册静态属性
        NameValuePair[] static_property = new NameValuePair[]
        {
            new NameValuePair("Name",LIB_NAME),
        };
        m_ClassRegHelper.RegStatics(lua, static_define, static_property);

        LuaGameObjectLib.RegComponent(new CMUITweenerInfo());

        return 1;
    }

    public static void _wrap(ILuaState lua, UITweener comp)
    {
        LuaOpenLibs._wrapComponent(lua, comp, LIB_NAME, m_ClassRegHelper);
    }

    public static UITweener Lua2Obj(ILuaState lua, int index)
    {
       LuaMemberHelper.CheckClass(lua, index);

       return LuaMemberHelper.GetObject<UITweener>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }

    static int M_GetTweenGroup(ILuaState lua)
    {
        //in self
        //out int
        var self = Lua2Obj(lua, 1);
        lua.PushInteger(self.tweenGroup);
        return 1;
    }

    static int M_ResetToBeginning(ILuaState lua)
    {
        //in self
        //out void
        var self = Lua2Obj(lua, 1);
       


        if (self.tweenGroup > 0)
        {
            var group = self.tweenGroup;

            foreach (var curr in self.GetComponents<UITweener>())
            {
                if (group == curr.tweenGroup)
                    curr.ResetToBeginning();
            }
        }
        else
            self.ResetToBeginning();

        return 0;
    }

    static int M_PlayForward(ILuaState lua)
    {
        //in self
        //out void
        var self = Lua2Obj(lua, 1);
   

        if (self.tweenGroup > 0)
        {
            var group = self.tweenGroup;

            foreach (var curr in self.GetComponents<UITweener>())
            {
                if (group == curr.tweenGroup)
                    curr.PlayForward();
            }
        }
        else
            self.PlayForward();


        return 0;
    }

    static int M_PlayReverse(ILuaState lua)
    {
        //in self
        //out void
        var self = Lua2Obj(lua, 1);
        if(self.tweenGroup>0)
        {
            var group = self.tweenGroup;

            foreach(var curr in self.GetComponents<UITweener>())
            {
                if(group == curr.tweenGroup)
                    curr.PlayReverse();
            }
        }else
         self.PlayReverse();
        return 0;
    }
    static int M_PosFromToY(ILuaState lua)
    {
        //in self
        //out void
        var self = Lua2Obj(lua, 1);
        int yf = lua.L_CheckInteger(2);
        int yt= lua.L_CheckInteger(3);
        if (self.tweenGroup > 0)
        {
            var group = self.tweenGroup;

            foreach (var curr in self.GetComponents<UITweener>())
            {
                if (group == curr.tweenGroup)
                {
                    TweenPosition tweener = curr as TweenPosition;
                    if (tweener != null)
                    {
                        tweener.from = new Vector3(tweener.from.x, yf, tweener.from.z);
                        tweener.to = new Vector3(tweener.from.x, yt, tweener.from.z);
                        tweener.PlayForward();
                    }
           
                }
            }
        }
        else
        {
            TweenPosition tweener = self as TweenPosition;
            if(tweener != null)
            {
                tweener.from = new Vector3(tweener.from.x, yf, tweener.from.z);
                tweener.to = new Vector3(tweener.from.x, yt, tweener.from.z);
                tweener.PlayForward();
            }
           
        }
        return 0;
    }
}

