using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;


public class LuaColorLib
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
    static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "Color";
    public static int OpenLib(ILuaState lua)
    {
        
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
            new NameFuncPair("__add",OP___add),//重载加法
            new NameFuncPair("__mul",OP___mul),//重载乘法
            new NameFuncPair("__div",OP___div),//重载除法
            new NameFuncPair("__sub",OP___sub),//重载减法
            new NameFuncPair("__unm",OP___unm),//重载负号
            new NameFuncPair("__tostring",OP___tostring),
        };

        m_ClassRegHelper.RegMembers(lua, member_define,operator_define);
       

        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
            new NameFuncPair("new",S_new),
        };
        m_ClassRegHelper.RegStatics(lua, static_define);
 
        //注册一些常量
        lua.PushString("black");
        _wrap(lua, Color.black);
        lua.RawSet(-3);

        lua.PushString("blue");
        _wrap(lua, Color.blue);
        lua.RawSet(-3);
         
        lua.PushString("cyan");
        _wrap(lua, Color.cyan);
        lua.RawSet(-3);

        lua.PushString("gray");
        _wrap(lua, Color.gray);
        lua.RawSet(-3);

        lua.PushString("green");
        _wrap(lua, Color.green);
        lua.RawSet(-3);

        lua.PushString("grey");
        _wrap(lua, Color.grey);
        lua.RawSet(-3);

        lua.PushString("red");
        _wrap(lua, Color.red);
        lua.RawSet(-3);

        lua.PushString("white");
        _wrap(lua, Color.white);
        lua.RawSet(-3);

        lua.PushString("yellow");
        _wrap(lua, Color.yellow);
        lua.RawSet(-3);
        

        return 1;
    }



    private static int OP___add(ILuaState lua)
    {
       LuaMemberHelper.CheckClass(lua, 1);
       LuaMemberHelper.CheckClass(lua, 2);
         
        float r1 = m_MemberHelper.GetFloat(lua, 1, "r");
        float g1 = m_MemberHelper.GetFloat(lua, 1, "g");
        float b1 = m_MemberHelper.GetFloat(lua, 1, "b");
        float a1 = m_MemberHelper.GetFloat(lua, 1, "a");

        float r2 = m_MemberHelper.GetFloat(lua, 2, "r");
        float g2 = m_MemberHelper.GetFloat(lua, 2, "g");
        float b2 = m_MemberHelper.GetFloat(lua, 2, "b");
        float a2 = m_MemberHelper.GetFloat(lua, 2, "a");


        _wrap(
            lua,
            r1+r2,
            g1+g2,
            b1+b2,
            a1+a2
            );

        return 1;
    }

    private static int OP___sub(ILuaState lua)
    {
       LuaMemberHelper.CheckClass(lua, 1);
       LuaMemberHelper.CheckClass(lua, 2);

        float r1 = m_MemberHelper.GetFloat(lua, 1, "r");
        float g1 = m_MemberHelper.GetFloat(lua, 1, "g");
        float b1 = m_MemberHelper.GetFloat(lua, 1, "b");
        float a1 = m_MemberHelper.GetFloat(lua, 1, "a");

        float r2 = m_MemberHelper.GetFloat(lua, 2, "r");
        float g2 = m_MemberHelper.GetFloat(lua, 2, "g");
        float b2 = m_MemberHelper.GetFloat(lua, 2, "b");
        float a2 = m_MemberHelper.GetFloat(lua, 2, "a");

        _wrap(
            lua,
            r1 - r2,
            g1 - g2,
            b1 - b2,
            a1 - a2
            );

        return 1;
    }

     private static int OP___mul(ILuaState lua)
    {
       LuaMemberHelper.CheckClass(lua, 1);
       LuaMemberHelper.CheckClass(lua, 2);

        float r1 = m_MemberHelper.GetFloat(lua, 1, "r");
        float g1 = m_MemberHelper.GetFloat(lua, 1, "g");
        float b1 = m_MemberHelper.GetFloat(lua, 1, "b");
        float a1 = m_MemberHelper.GetFloat(lua, 1, "a");

        float r2 = m_MemberHelper.GetFloat(lua, 2, "r");
        float g2 = m_MemberHelper.GetFloat(lua, 2, "g");
        float b2 = m_MemberHelper.GetFloat(lua, 2, "b");
        float a2 = m_MemberHelper.GetFloat(lua, 2, "a");

        _wrap(
            lua,
            r1 * r2,
            g1 * g2,
            b1 * b2,
            a1 * a2
            );

        return 1;
    }

     private static int OP___div(ILuaState lua)
    {
       LuaMemberHelper.CheckClass(lua, 1);
       LuaMemberHelper.CheckClass(lua, 2);

        float r1 = m_MemberHelper.GetFloat(lua, 1, "r");
        float g1 = m_MemberHelper.GetFloat(lua, 1, "g");
        float b1 = m_MemberHelper.GetFloat(lua, 1, "b");
        float a1 = m_MemberHelper.GetFloat(lua, 1, "a");

        float r2 = m_MemberHelper.GetFloat(lua, 2, "r");
        float g2 = m_MemberHelper.GetFloat(lua, 2, "g");
        float b2 = m_MemberHelper.GetFloat(lua, 2, "b");
        float a2 = m_MemberHelper.GetFloat(lua, 2, "a");

        _wrap(
            lua,
            r1 / r2,
            g1 / g2,
            b1 / b2,
            a1 / a2
            );

        return 1;
    }

     private static int OP___unm(ILuaState lua)
     {
        LuaMemberHelper.CheckClass(lua, 1);

         float r1 = m_MemberHelper.GetFloat(lua, 1, "r");
         float g1 = m_MemberHelper.GetFloat(lua, 1, "g");
         float b1 = m_MemberHelper.GetFloat(lua, 1, "b");
         float a1 = m_MemberHelper.GetFloat(lua, 1, "a");

         _wrap(lua, -r1, -g1, -b1, -a1);

         return 1;
     }

    private static int OP___tostring(ILuaState lua)
     {
        //in self
        //out string

        LuaMemberHelper.CheckClass(lua, 1);

         float r1 = m_MemberHelper.GetFloat(lua, 1, "r");
         float g1 = m_MemberHelper.GetFloat(lua, 1, "g");
         float b1 = m_MemberHelper.GetFloat(lua, 1, "b");
         float a1 = m_MemberHelper.GetFloat(lua, 1, "a");

         lua.PushString(string.Format("{0},{1},{2},{3}", r1, g1, b1,a1));

         return 1;
     }

     public static void Lua2Obj(ILuaState lua,int index,out Color re)
     {
        LuaMemberHelper.CheckClass(lua, index);

         re = new Color(
            m_MemberHelper.GetFloat(lua, index, "r"),
            m_MemberHelper.GetFloat(lua, index, "g"),
            m_MemberHelper.GetFloat(lua, index, "b"),
            m_MemberHelper.GetFloat(lua, index, "a")
          );
     }

    

    private static int S_new(ILuaState lua)
    { 
        int n = lua.GetTop();
   
        float r = n>=1?(float)lua.L_CheckNumber(1):0.0f;
        float g = n>=2?(float)lua.L_CheckNumber(2):0.0f;
        float b = n >= 3 ? (float)lua.L_CheckNumber(3) : 0.0f;
        float a = n >= 4 ? (float)lua.L_CheckNumber(4) : 0.0f;

        _wrap(lua, r, g, b, a);

        return 1;
    }

    public static void _wrap(ILuaState lua, Color color)
    {
        _wrap(lua, color.r, color.g, color.b, color.a);
    }

    public static void _wrap(ILuaState lua, float r, float g, float b, float a)
    {
        NameValuePair[] propertys = new NameValuePair[]
        {
            new NameValuePair("r",r),
            new NameValuePair("g",g),
            new NameValuePair("b",b),
            new NameValuePair("a",a),
        };

        m_ClassRegHelper.InstanceLuaClass(lua, propertys);
    }
}
 
