using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;
using MonoEX;

class LuaLoaderLib
{

      static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
   // static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "Loader";

    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new     NameFuncPair("Send",M_Send) ,
            new     NameFuncPair("HasError",M_HasError) ,
            new     NameFuncPair("GetResult",M_GetResult) ,
            new     NameFuncPair("SetValue",M_SetValue) ,
            new     NameFuncPair("GetValue",M_GetValue) ,
        };
         

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
              
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        return 1;
    }


    public static void _wrap(ILuaState lua, Loader newObj)
    {
        LuaOpenLibs._wrap(m_ClassRegHelper, lua, newObj);
    }


    public static Loader Lua2Obj(ILuaState lua, int index)
    {
        return LuaOpenLibs.Lua2Obj<Loader>(lua, index);
    }
   
  

    public static int M_Send(ILuaState lua)
    {
        //in self
        //out nil
        Loader self = Lua2Obj(lua, 1);
        self.Send();
        return 0;
    }

    public static int M_HasError(ILuaState lua)
    {
        //in self
        //out bool
        Loader self = Lua2Obj(lua, 1);
        lua.PushBoolean(self.HasError());
        return 1;
    }

    public static int M_GetResult(ILuaState lua)
    {
        //in self
        //out ByteArray
        Loader self = Lua2Obj(lua, 1); 

        if (self.Result == null)
            lua.PushNil();
        else
        {
            MonoEX.ByteArray re = new MonoEX.ByteArray(self.Result); 
            LuaByteArrayLib._wrap(lua, re); 
        }
        
        return 1;
    }

    public static int M_GetValue(ILuaState lua)
    {
        //in self,key
        //out string
        Loader self = Lua2Obj(lua, 1);
        string key = lua.L_CheckString(2);

        string re = self.GetValue(key);
        if (re == null)
            lua.PushNil();
        else
            lua.PushString(re);
        return 1;
    }

    public static int M_SetValue(ILuaState lua)
    {
        //in self,key,value
        //out nil
        Loader self = Lua2Obj(lua, 1);
        string key = lua.L_CheckString(2);
        string value = lua.L_CheckString(3);
        self.SetValue(key, value);
        return 0;
    }
}
