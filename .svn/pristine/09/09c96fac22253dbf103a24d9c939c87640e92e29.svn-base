using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using DG.Tweening;

public class LuaSequenceLib
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();

    public const string LIB_NAME = "Sequence";

    public static int OpenLib(ILuaState lua)
    {

        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("Prepend",M_Prepend),   
            new NameFuncPair("PrependInterval",M_PrependInterval),   
            new NameFuncPair("Insert",M_Insert),   
            new NameFuncPair("Join",M_Join),   
            new NameFuncPair("Append",M_Append),   
            new NameFuncPair("AppendInterval",M_AppendInterval),   
            new NameFuncPair("Kill",M_Kill),   
            new NameFuncPair("OnKill",M_OnKill),   
            new NameFuncPair("OnComplete",M_OnComplete),
            new NameFuncPair("PrependCallback",M_PrependCallback),
            new NameFuncPair("InsertCallback",M_InsertCallback),
            new NameFuncPair("AppendCallback",M_AppendCallback),
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        { 
             new NameFuncPair("new",S_new),
        };
        m_ClassRegHelper.RegStatics(lua, static_define);
         
        return 1;
    }

    public static void _wrap(ILuaState lua, Sequence obj)
    {

        NameValuePair[] propertys = new NameValuePair[]
        {
            new NameValuePair(LuaOpenLibs.OBJ_HANDELNAME,obj), 
        };

        m_ClassRegHelper.InstanceLuaClass(lua, propertys);
    }

    public static Sequence Lua2Obj(ILuaState lua, int index)
    {
        LuaMemberHelper.CheckClass(lua, index);
        return LuaMemberHelper.GetObject<Sequence>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }

    /// <summary>
    /// 在序列开始添加tween
    /// </summary>
    static int M_Prepend(ILuaState lua)
    {
        //in self,Tween
        //out self
        Sequence self = Lua2Obj(lua, 1);
        Tween t = LuaTweenLib.Lua2Obj(lua, 2);
        self.Prepend(t);
        LuaSequenceLib._wrap(lua, self);
        return 1;
    }

    /// <summary>
    /// 在序列开始添加间隔
    /// </summary>
    static int M_PrependInterval(ILuaState lua)
    {
        //in self,interval
        //out self
        Sequence self = Lua2Obj(lua, 1);
        float interval = (float)lua.L_CheckNumber(2);
        self.PrependInterval(interval);
        LuaSequenceLib._wrap(lua, self);
        return 1;
    }


    /// <summary>
    /// 在指定时间点插入tween
    /// </summary>
    static int M_Insert(ILuaState lua)
    {
        //in self,atPosition,Tween
        //out self
        Sequence self = Lua2Obj(lua, 1);
        float atPosition = (float)lua.L_CheckNumber(2);
        Tween t = LuaTweenLib.Lua2Obj(lua, 3);
        self.Insert(atPosition,t);
        LuaSequenceLib._wrap(lua, self);
        return 1;
    }

    static int M_Join(ILuaState lua)
    {
        //in self,Tween
        //out self
        Sequence self = Lua2Obj(lua, 1);
        Tween t = LuaTweenLib.Lua2Obj(lua, 2);
        self.Join(t);
        LuaSequenceLib._wrap(lua, self);
        return 1;
    }

    /// <summary>
    /// 在序列末尾添加tween
    /// </summary> 
    static int M_Append(ILuaState lua)
    {
        //in self,Tween
        //out self
        Sequence self = Lua2Obj(lua, 1);
        Tween t = LuaTweenLib.Lua2Obj(lua, 2);
        self.Append(t);
        LuaSequenceLib._wrap(lua, self);
        return 1;
    }

    /// <summary>
    /// 在序列开始添加间隔
    /// </summary>
    static int M_AppendInterval(ILuaState lua)
    {
        //in self,interval
        //out self
        Sequence self = Lua2Obj(lua, 1);
        float interval = (float)lua.L_CheckNumber(2);
        self.AppendInterval(interval);
        LuaSequenceLib._wrap(lua, self);
        return 1;
    }

    public static int S_new(ILuaState lua)
    {
        LuaSequenceLib._wrap(lua,LuaDoTweenLib.NewTweenSet( DOTween.Sequence()));
        return 1;
    }

    
    static int M_OnKill(ILuaState lua)
    {
        return LuaTweenLib.M_OnKill(lua);
    }

    static int M_OnComplete(ILuaState lua)
    {
        return LuaTweenLib.M_OnComplete(lua);
    }


    public static int M_Kill(ILuaState lua)
    {
        return LuaTweenLib.M_Kill(lua);
    }

    //在序列开始添加回调
    public static int M_PrependCallback(ILuaState lua)
    {
        //in self,recallClass,recallFunc
        //out self
        Sequence self = Lua2Obj(lua, 1);

        TweenEvts evts = TweenEvts.GetEvts(self);
        if (evts == null) { LuaSequenceLib._wrap(lua, self); return 1; }

        var evt = LuaRoot.LDelegate2Event<LuaEventCallback>(lua, 2, 3);
        if (evt == null) { LuaSequenceLib._wrap(lua, self); return 1; }

        evts.AddOtherEvt(evt);
        self.PrependCallback(() => { using (evt)  evt.Call(null); });
        LuaSequenceLib._wrap(lua, self);
        return 1;
    }
   

    //在指定时间点插入回调
    public static int M_InsertCallback(ILuaState lua)
    {
        //in self,atPosition,recallClass,recallFunc
        //out self
        Sequence self = Lua2Obj(lua, 1);

        TweenEvts evts = TweenEvts.GetEvts(self);
        if (evts == null) { LuaSequenceLib._wrap(lua, self); return 1; }

        float atPosition = (float)lua.L_CheckNumber(2);

        var evt = LuaRoot.LDelegate2Event<LuaEventCallback>(lua, 3, 4);
        if (evt == null) { LuaSequenceLib._wrap(lua, self); return 1; }

        evts.AddOtherEvt(evt);
        self.InsertCallback(atPosition, () => { using (evt)  evt.Call(null); });
        LuaSequenceLib._wrap(lua, self);
        return 1;
    }

    //在序列末尾添加回调
    public static int M_AppendCallback(ILuaState lua)
    {
        //in self,recallClass,recallFunc
        //out self
        Sequence self = Lua2Obj(lua, 1);

        TweenEvts evts = TweenEvts.GetEvts(self);
        if (evts == null) { LuaSequenceLib._wrap(lua, self); return 1; }

        var evt = LuaRoot.LDelegate2Event<LuaEventCallback>(lua, 2, 3);
        if (evt == null) { LuaSequenceLib._wrap(lua, self); return 1; }

        evts.AddOtherEvt(evt);
        self.AppendCallback(() => { using (evt)  evt.Call(null); });
        LuaSequenceLib._wrap(lua, self);
        return 1;
    }


}
 