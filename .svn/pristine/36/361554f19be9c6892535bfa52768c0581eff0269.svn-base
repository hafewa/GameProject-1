using UnityEngine;
using System.Collections;

[AddComponentMenu("QK/Event/Event Listener")]
public class QKUIEventListener : MonoBehaviour
{
    public delegate void VoidDelegate(GameObject go);
    public delegate void BoolDelegate(GameObject go, bool state);
    public delegate void FloatDelegate(GameObject go, float delta);
    public delegate void VectorDelegate(GameObject go, Vector2 delta);
    public delegate void ObjectDelegate(GameObject go, GameObject obj);
    public delegate void KeyCodeDelegate(GameObject go, KeyCode key);
    public delegate void StringDelegate(GameObject go, string v);

    public object parameter;

    public StringDelegate onSelectionChange;
    public VoidDelegate onSubmit;
    public VoidDelegate onClick;
    public VoidDelegate onPixelClick;
    public VoidDelegate onDoubleClick;
    public BoolDelegate onHover;
    public BoolDelegate onPress;
    public BoolDelegate onPixelPress;
    public BoolDelegate onSelect;
    public FloatDelegate onScroll;
    public VoidDelegate onDragStart;
    public VectorDelegate onDrag;
    public VoidDelegate onDragOver;
    public VoidDelegate onDragOut;
    public VoidDelegate onDragEnd;
    public ObjectDelegate onDrop;
    public KeyCodeDelegate onKey;
    public BoolDelegate onTooltip;
    public VoidDelegate onLinkClick;
    public VoidDelegate onLongPress;

    void OnSelectionChange(string selectedItem) { if (onSelectionChange != null) onSelectionChange(gameObject, selectedItem); }     

    void OnLinkClick(GameObject linkobj) { if (onLinkClick != null) onLinkClick(linkobj); }

    void OnSubmit() { if (onSubmit != null) onSubmit(gameObject); }
    void OnClick() { if (onClick != null) onClick(gameObject); }

    void OnPixelClick() { if (onPixelClick != null) onPixelClick(gameObject); }

    void OnDoubleClick() { if (onDoubleClick != null) onDoubleClick(gameObject); }
    void OnHover(bool isOver) { if (onHover != null) onHover(gameObject, isOver); }
    void OnPress(bool isPressed) {
        if (onPress != null) onPress(gameObject, isPressed);
        /*
        m_IsPressed = isPressed;
        if (m_IsPressed && onLongPress!=null&&!m_PressedCoroutineDoing)
        {
            m_PressedCoroutineDoing = true;
            StartCoroutine(coLongPressListen());
        }*/
    }

    /*
    //长按监听协程
    IEnumerator coLongPressListen()
    {
        var time = Time.time;
        while (m_IsPressed)
        {
            if (Time.time-time>LongPressTime)
            {
                m_PressedCoroutineDoing = false;
                if (onLongPress != null) onLongPress(gameObject);
                yield break;
            }
            yield return null;
        }
        m_PressedCoroutineDoing = false;
    }*/

    const float LongPressTime = 1f;//按住多少时间算长按
    //bool m_PressedCoroutineDoing = false;
    //bool m_IsPressed = false;

    void OnLongPress(){ if (onLongPress != null) onLongPress(gameObject); }

    void OnPixelPress(bool isPressed) { if (onPixelPress != null) onPixelPress(gameObject, isPressed); }
    

    void OnSelect(bool selected) { if (onSelect != null) onSelect(gameObject, selected); }
    void OnScroll(float delta) { if (onScroll != null) onScroll(gameObject, delta); }
    void OnDragStart() { if (onDragStart != null) onDragStart(gameObject); }
    void OnDrag(Vector2 delta) { if (onDrag != null) onDrag(gameObject, delta); }
    void OnDragOver() { if (onDragOver != null) onDragOver(gameObject); }
    void OnDragOut() { if (onDragOut != null) onDragOut(gameObject); }
    void OnDragEnd() { if (onDragEnd != null) onDragEnd(gameObject); }
    void OnDrop(GameObject go) { if (onDrop != null) onDrop(gameObject, go); }
    void OnKey(KeyCode key) { if (onKey != null) onKey(gameObject, key); }
    void OnTooltip(bool show) { if (onTooltip != null) onTooltip(gameObject, show); }

    /// <summary>
    /// Get or add an event listener to the specified game object.
    /// </summary>

    static public QKUIEventListener Get(GameObject go)
    {
        QKUIEventListener listener = go.GetComponent<QKUIEventListener>();
        if (listener == null) listener = go.AddComponent<QKUIEventListener>();
        return listener;
    }
}
