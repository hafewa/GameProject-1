using System;
using System.Collections.Generic;
using LuaInterface;

public class SData_ArmyCardUnion_C : MonoEX.Singleton<SData_ArmyCardUnion_C>
{
    public void setData(LuaTable table1, LuaTable table2)
    {
        var head = new string[table1.Length];
        SDataUtils.dealTable(table1, (Object o1, Object o2) =>
        {
            head[(int)(double)o1 - 1] = (string)o2;
        });
        SDataUtils.dealTable(table2, (Object o1, Object o2) =>
        {
            ArmyCardUnion_CInfo dif = new ArmyCardUnion_CInfo();
            SDataUtils.dealTable((LuaTable)o2, (Object o11, Object o22) =>
            {
                switch (head[(int)(double)o11 - 1])
				{
					case "UniqueID": dif.UniqueID = (int)(double)o22; break;
					case "ArmyCardID": dif.ArmyCardID = (int)(double)o22; break;
					case "ArmyUnionLevel": dif.ArmyUnionLevel = (short)(double)o22; break;
					case "UnionAttributeAdd1": dif.UnionAttributeAdd1 = (int)(double)o22; break;
					case "AddPoint1": dif.AddPoint1 = (float)(double)o22; break;
					case "UnionAttributeAdd2": dif.UnionAttributeAdd2 = (int)(double)o22; break;
					case "AddPoint2": dif.AddPoint2 = (float)(double)o22; break;
					case "UnionAttributeAdd3": dif.UnionAttributeAdd3 = (int)(double)o22; break;
					case "AddPoint3": dif.AddPoint3 = (float)(double)o22; break;
					case "UnionAttribute1": dif.UnionAttribute1 = (int)(double)o22; break;
					case "Point1": dif.Point1 = (float)(double)o22; break;
					case "RequireCardID1": dif.RequireCardID1 = (int)(double)o22; break;
					case "RequireCardStar1": dif.RequireCardStar1 = (short)(double)o22; break;
					case "RequireCardLevel1": dif.RequireCardLevel1 = (short)(double)o22; break;
					case "RequireCardQuality1": dif.RequireCardQuality1 = (short)(double)o22; break;
					case "UnionAttribute2": dif.UnionAttribute2 = (int)(double)o22; break;
					case "Point2": dif.Point2 = (float)(double)o22; break;
					case "RequireCardID2": dif.RequireCardID2 = (int)(double)o22; break;
					case "RequireCardStar2": dif.RequireCardStar2 = (short)(double)o22; break;
					case "RequireCardLevel2": dif.RequireCardLevel2 = (short)(double)o22; break;
					case "RequireCardQuality2": dif.RequireCardQuality2 = (short)(double)o22; break;
					case "UnionAttribute3": dif.UnionAttribute3 = (int)(double)o22; break;
					case "Point3": dif.Point3 = (float)(double)o22; break;
					case "RequireCardID3": dif.RequireCardID3 = (int)(double)o22; break;
					case "RequireCardStar3": dif.RequireCardStar3 = (short)(double)o22; break;
					case "RequireCardLevel3": dif.RequireCardLevel3 = (short)(double)o22; break;
					case "RequireCardQuality3": dif.RequireCardQuality3 = (short)(double)o22; break;
					case "UnionAttribute4": dif.UnionAttribute4 = (int)(double)o22; break;
					case "Point4": dif.Point4 = (float)(double)o22; break;
					case "RequireCardID4": dif.RequireCardID4 = (int)(double)o22; break;
					case "RequireCardStar4": dif.RequireCardStar4 = (short)(double)o22; break;
					case "RequireCardLevel4": dif.RequireCardLevel4 = (short)(double)o22; break;
					case "RequireCardQuality4": dif.RequireCardQuality4 = (short)(double)o22; break;
                }
            });
            if (Data.ContainsKey(dif.UniqueID))
                MonoEX.Debug.Logout(MonoEX.LOG_TYPE.LT_ERROR, "重复的ID：" + dif.UniqueID.ToString());
            Data.Add(dif.UniqueID, dif);
        });
    }

    public ArmyCardUnion_CInfo GetDataOfID(int Id)
    {
        if (!Data.ContainsKey(Id)) throw new Exception(String.Format("ArmyCardUnion_CInfo::GetDataOfID() not found data  Id:{0}", Id));
        return Data[Id];
    }

    internal Dictionary<int, ArmyCardUnion_CInfo> Data = new Dictionary<int, ArmyCardUnion_CInfo>();
}


public struct ArmyCardUnion_CInfo
{
	public int UniqueID;
	public int ArmyCardID;
	public short ArmyUnionLevel;
	public int UnionAttributeAdd1;
	public float AddPoint1;
	public int UnionAttributeAdd2;
	public float AddPoint2;
	public int UnionAttributeAdd3;
	public float AddPoint3;
	public int UnionAttribute1;
	public float Point1;
	public int RequireCardID1;
	public short RequireCardStar1;
	public short RequireCardLevel1;
	public short RequireCardQuality1;
	public int UnionAttribute2;
	public float Point2;
	public int RequireCardID2;
	public short RequireCardStar2;
	public short RequireCardLevel2;
	public short RequireCardQuality2;
	public int UnionAttribute3;
	public float Point3;
	public int RequireCardID3;
	public short RequireCardStar3;
	public short RequireCardLevel3;
	public short RequireCardQuality3;
	public int UnionAttribute4;
	public float Point4;
	public int RequireCardID4;
	public short RequireCardStar4;
	public short RequireCardLevel4;
	public short RequireCardQuality4;
}
