using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;

class LuaZhenfaInfoLibs
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();


    public const string LIB_NAME = "ZhenfaInfo";

    public static int OpenLib(ILuaState lua)
    {

        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("ZhenfaBuzhi",M_ZhenfaBuzhi),  
            //new NameFuncPair("ArmyNo",M_ArmyNo),  
            new NameFuncPair("IsFangyuzhen",M_IsFangyuzhen),  
            new NameFuncPair("Jianjie",M_Jianjie),  
            new NameFuncPair("ZhenName",M_ZhenName),  
            new NameFuncPair("StartLv",M_StartLv),  
            new NameFuncPair("ID",M_ID),
            new NameFuncPair("Icon",M_Icon),

            
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        { 
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        return 1;
    }



    public static void _wrap(ILuaState lua,  ZhenfaInfo  obj)
    {
        NameValuePair[] propertys = new NameValuePair[]
        {
            new NameValuePair(LuaOpenLibs.OBJ_HANDELNAME,obj),
        };

        m_ClassRegHelper.InstanceLuaClass(lua, propertys);
    }

    public static ZhenfaInfo Lua2Obj(ILuaState lua, int index)
    {
        LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<ZhenfaInfo>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }

    static int M_ID(ILuaState lua)
    {
        //in self
        //out int
        var self = Lua2Obj(lua, 1);
        lua.PushInteger(self.ID);
        return 1;
    }

    static int M_Icon(ILuaState lua)
    {
        //in self
        //out string
        var self = Lua2Obj(lua, 1);
        lua.PushString(self.Icon);
        return 1;
    }

    

    static int M_StartLv(ILuaState lua)
    {
        //in self
        //out int
        var self = Lua2Obj(lua, 1);
        lua.PushInteger(self.StartLv);
        return 1;
    }


    static int M_ZhenName(ILuaState lua)
    {
        //in self
        //out String
        var self = Lua2Obj(lua, 1);
        lua.PushString(self.ZhenName);
        return 1;
    }

    static int M_Jianjie(ILuaState lua)
    {
        //in self
        //out String
        var self = Lua2Obj(lua, 1);
        lua.PushString(self.Jianjie);
        return 1;
    }


    static int M_IsFangyuzhen(ILuaState lua)
    {
        //in self
        //out bool
        var self = Lua2Obj(lua, 1);
        lua.PushBoolean(self.IsFangyuzhen);
        return 1;
    }
    /*
    static int M_ArmyNo(ILuaState lua)
    {
        //in self,index
        //out int
        var self = Lua2Obj(lua, 1);
        var index = lua.L_CheckInteger(2);
        lua.L_ArgCheck(index > 0 && index <= ZhenfaInfo.LCount, 1, "索引号越界");
        lua.PushInteger(self.ArmyNo[index - 1]);
        return 1;
    }

    */
    static int M_ZhenfaBuzhi(ILuaState lua)
    {
        //in self 
        //out string
        var self = Lua2Obj(lua, 1);
        //var index = lua.L_CheckInteger(2);
        //lua.L_ArgCheck(index > 0 && index <= ZhenfaInfo.LCount, 1, "索引号越界");
        lua.PushString(self.ZhenfaBuzhi);
        return 1;
    } 
}
 
class LuaSData_ZhenfaLibs
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();


    public const string LIB_NAME = "SData_Zhenfa";

    public static int OpenLib(ILuaState lua)
    {

        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            
            
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
            new NameFuncPair("Get",S_Get),     
            new NameFuncPair("Foreach",S_Foreach),     
            
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        return 1;
    }
     


    static int S_Get(ILuaState lua)
    {
        //in id
        //out ZhenfaInfo
        short id = (short)lua.L_CheckInteger(1);

        ZhenfaInfo info = SData_Zhenfa.Single.Get(id);
        LuaZhenfaInfoLibs._wrap(lua, info);
        return 1;
    }

    static int S_Foreach(ILuaState lua)
    {
        //in function(ID,ZhenfaInfo)
        //out void  
        lua.L_ArgCheck(lua.IsFunction(1), 1, "must be a function");

        try
        {
            foreach (var kv in SData_Zhenfa.Single.Data)
            {
                // push `traceback' function  
                var b = lua.GetTop() + 1;
                lua.PushCSharpFunction(LuaRoot.Traceback);

                //压入回掉函数
                lua.PushValue(1);

                //压入参数
                lua.PushInteger(kv.Key);

                LuaZhenfaInfoLibs._wrap(lua, kv.Value);

                //调用函数
                var status = lua.PCall(2, 0, b);
                if (status != ThreadStatus.LUA_OK)
                {
                    lua.Remove(b);
                    ULDebug.LogError(lua.ToString(-1));
                }

                // remove `traceback' function  
                lua.Remove(b);

            }
        }
        catch (Exception ex)
        {
            lua.L_Error(ex.ToString());
        }
        finally
        {
            // LuaRoot._Lua.L_Unref(LuaDef.LUA_REGISTRYINDEX, funcRef);
        }


        return 0;

    }
}
