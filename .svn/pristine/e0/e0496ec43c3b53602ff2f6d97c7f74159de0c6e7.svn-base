using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua; 

public struct NameValuePair
{ 
    public string name;
    public object v;
    public NameValuePair(string n,object v)
    { 
        this.v = v;
        name = n;
    }
}

public class LuaClassRegHelper
{
    public void RegMembers(ILuaState lua, NameFuncPair[] member_define,NameFuncPair[] operator_define)
    {
        //创建metatable
        {
            lua.L_NewLib(member_define); //menber table begin

            lua.PushString("bs_mt");
            
            lua.CreateTable(0, 1); // table to be metatable

            //原表中增加__index表
            lua.PushString("__index");
            lua.PushValue(-4);
            lua.RawSet(-3);

            //操作符
            foreach (NameFuncPair currop in operator_define)
            {
                lua.PushString(currop.Name);
                lua.PushCSharpFunction(currop.Func);
                lua.RawSet(-3);
            }

            lua.RawSet(-3);//menber table begin end
        }

        lua.GetField(-1, "bs_mt");
        m_metatableRef = lua.L_Ref(LuaDef.LUA_REGISTRYINDEX);

        lua.Pop(1);//pop member_define
    }

    ///实例化lua类
    public void InstanceLuaClass(ILuaState lua, NameValuePair[] propertys)
    {        
        int count =propertys.Length;
        lua.CreateTable(0,0 );
        foreach (NameValuePair curr in propertys)
        {
            //压入属性名
            lua.PushString(curr.name);

            //压入值 
            LuaRoot.PushObject(lua, curr.v);

            //建立keyValue
            lua.RawSet(-3);
        } 

        BindMenbers(lua);
    }

    void BindMenbers(ILuaState lua)
    {
        lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, m_metatableRef);
        lua.SetMetaTable(-2);
    }

    //注册静态接口 使C#函数可以被Lua调用
    public void RegStatics(ILuaState lua, NameFuncPair[] static_define)
    {
        lua.L_NewLib(static_define);
    }

    //注册静态接口加静态属性
    public void RegStatics(ILuaState lua, NameFuncPair[] static_define, NameValuePair[] static_property)
    {
        lua.L_NewLib(static_define);
        foreach (NameValuePair curr in static_property)
        {
            lua.PushString(curr.name);
            LuaRoot.PushObject(lua, curr.v);
            lua.RawSet(-3);
        }
    }


    //追加静态接口
    public void AppendStatics(ILuaState lua,string libName,  NameFuncPair[] define)
    { 
        lua.GetGlobal(libName); 
        lua.L_SetFuncs(define,0);
        lua.Pop(1);
    }

   

    //注册枚举
    public void RegEnum(ILuaState lua,string enumName,NameValuePair[] enumItem)
    {
        lua.GetGlobal("_G");
        lua.PushString(enumName);//压入枚举名

        //创建枚举表
        {
            lua.CreateTable(0, 0);
            foreach (NameValuePair curr in enumItem)
            {
                lua.PushString(curr.name);
                LuaRoot.PushObject(lua, curr.v);
                lua.RawSet(-3);
            }
        }

        lua.RawSet(-3);
        lua.Pop(1);
    }

    //

    
    //原表引用
    int m_metatableRef = 0;
}

public class LuaMemberHelper
{
    public static void CheckClass(ILuaState lua,int pIndex)
    {
        lua.L_CheckType(pIndex, LuaType.LUA_TTABLE);
    }

    public float GetFloat(ILuaState lua,int pIndex,string name)
    {
        lua.GetField(pIndex, name);
        float re = (float)lua.ToNumber(-1);
        lua.Pop(1);

        return re;
    }

    public List<string> GetStringList(ILuaState lua, int pIndex)
    { 
        List<string> outList = new List<string>();
        lua.PushNil(); // first key
        while (lua.Next(pIndex))
        {
            
            if (lua.Type(-1) == LuaType.LUA_TSTRING)
            {
                string v = lua.ToString(-1);
                outList.Add(v); 
            }
           

            lua.Pop(1); // remove value
        }  
        return outList;
    }

    public string GetString(ILuaState lua, int pIndex, string name)
    {
        lua.GetField(pIndex, name);
        string re = lua.ToString(-1);
        lua.Pop(1);

        return re;
    }

    

    public int GetRef(ILuaState lua, int pIndex, string name)
    {
        lua.GetField(pIndex, name);
        return lua.L_Ref(LuaDef.LUA_REGISTRYINDEX);
    }

    public void SetObject<T>(ILuaState lua, int pIndex, string name, T v)
    {
        lua.PushValue(pIndex);//压入操作的表
        lua.PushLightUserData(v);//压入值
        lua.SetField(-2, name);//值存入表中
        lua.Pop(1);//弹出操作的表
    }

    public static T GetObject<T>(ILuaState lua, int pIndex, string name)
        where T : class
    {
        lua.GetField(pIndex, name);
        T re = lua.ToUserData(-1) as T;
        lua.Pop(1);

        return re;
    }


    public T GetStruct<T>(ILuaState lua, int pIndex, string name)
        where T : struct
    {
        lua.GetField(pIndex, name);
        T re = (T)lua.ToUserData(-1);
        lua.Pop(1);

        return re;
    }
}