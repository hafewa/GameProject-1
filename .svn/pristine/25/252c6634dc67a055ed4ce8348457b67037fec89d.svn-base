using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;
using MonoEX;

//托管lua的QKNode事件
class QKNodeClientEvent : MonoBehaviour
{
    void OnEnable()
    {
        CMQKNodeClient cl = GetComponent<CMQKNodeClient>();

        //绑定各种QKNodeClient事件 
        cl.ClientHandel.AddEvent_SoftDisconnected(QKNode_SoftDisconnected);
        cl.ClientHandel.AddEvent_Disconnected(QKNode_Disconnected);
        cl.ClientHandel.AddEvent_Conn(QKNode_Conn);
        cl.ClientHandel.AddEvent_SoftConn(QKNode_SoftConn);
        cl.ClientHandel.AddEvent_RecvBin(QKNode_RecvBin);
        cl.ClientHandel.AddEvent_Destroy(QKNode_Destroy);
    }

    void OnDisable()
    {
        CMQKNodeClient cl = GetComponent<CMQKNodeClient>();
        if (cl == null) return;

        cl.ClientHandel.RemoveEvent_SoftDisconnected(QKNode_SoftDisconnected);
        cl.ClientHandel.RemoveEvent_Disconnected(QKNode_Disconnected);
        cl.ClientHandel.RemoveEvent_Conn(QKNode_Conn);
        cl.ClientHandel.RemoveEvent_SoftConn(QKNode_SoftConn);
        cl.ClientHandel.RemoveEvent_RecvBin(QKNode_RecvBin);
        cl.ClientHandel.RemoveEvent_Destroy(QKNode_Destroy);
    }

    void OnDestroy()
    {
        OnSoftDisconnected.Dispose();
        OnDisconnected.Dispose();
        OnConn.Dispose();
        OnSoftConn.Dispose(); 
        OnRecv.Dispose();
        //OnRecvJson.Dispose();
    }

    void QKNode_Destroy()
    {
        GameObject.Destroy(this);
    } 

    void QKNode_SoftDisconnected()
    {
        OnSoftDisconnected.Call(null);
    }

    void QKNode_Disconnected()
    {
        OnDisconnected.Call(null);
    } 

    void QKNode_Conn()
    {
        OnConn.Call(null);
    }

    void QKNode_SoftConn()
    {
        OnSoftConn.Call(null);
    }
     
    void QKNode_RecvBin(byte[] nm, uint lid)
    {
        //生成二进制处理对象
        MonoEX.ByteArray bytes = new MonoEX.ByteArray(nm );

        LuaByteArrayLib._wrap(LuaRoot._Lua, bytes);//压入二进制处理对象
        int refByteArray = LuaRoot._Lua.L_Ref(LuaDef.LUA_REGISTRYINDEX);//获取对象引用
        using (LuaValue_Any param = new LuaValue_Any(refByteArray))
        {
            OnRecv.Call(param);
        }
    }

    public QKEvent OnSoftDisconnected = new QKEvent();
    public QKEvent OnDisconnected = new QKEvent();
    public QKEvent OnConn = new QKEvent();
    public QKEvent OnSoftConn = new QKEvent();
    public QKEvent OnRecv = new QKEvent();
    //public LuaEvent OnRecvJson = new LuaEvent();
}





public class LuaCMQKNodeClientLib
{ 
    class CMQKNodeClientInfo : ICoreComponentInfo
    {
        public Type type { get { return typeof(CMQKNodeClient); } }
        public string name { get { return LuaCMQKNodeClientLib.LIB_NAME; } }
        public void newLuaObj(ILuaState lua, Component cmp)
        {
            LuaCMQKNodeClientLib._wrap(lua, cmp as CMQKNodeClient);
        }
    }
     
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
  
    public const string LIB_NAME = "CMQKNodeClient";

    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("Conn",M_Conn),
            new NameFuncPair("Send",M_Send),
            new NameFuncPair("ResultTimeout",M_ResultTimeout),
            new NameFuncPair("Close",M_Close),
            new NameFuncPair("SoftClose",M_SoftClose),
            new NameFuncPair("CreateLoader",M_CreateLoader),
            new NameFuncPair("OnRecv",M_OnRecv),
            //new NameFuncPair("OnRecvJson",M_OnRecvJson),
            new NameFuncPair("OnSoftConn",M_OnSoftConn),
            new NameFuncPair("OnConn",M_OnConn),
            new NameFuncPair("OnDisconnected",M_OnDisconnected),
            new NameFuncPair("OnSoftDisconnected",M_OnSoftDisconnected),
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
           
        };

        //注册静态属性
        NameValuePair[] static_property = new NameValuePair[]
        {
            new NameValuePair("Name",LIB_NAME),
        };

        m_ClassRegHelper.RegStatics(lua, static_define,static_property);

        //注册静态成员
        /*
        {
            lua.PushString("OnEnableCtrl");
            LuaEventLib._wrap(lua, OnEnableCtrl);
            lua.RawSet(-3);

            lua.PushString("OnSoftDisconnected");
            LuaEventLib._wrap(lua, OnSoftDisconnected);
            lua.RawSet(-3);

            lua.PushString("OnDisconnected");
            LuaEventLib._wrap(lua, OnDisconnected);
            lua.RawSet(-3);

            lua.PushString("OnConn");
            LuaEventLib._wrap(lua, OnConn);
            lua.RawSet(-3);

            lua.PushString("OnSoftConn");
            LuaEventLib._wrap(lua, OnSoftConn);
            lua.RawSet(-3);

            lua.PushString("OnRecvJson");
            LuaEventLib._wrap(lua, OnRecvJson);
            lua.RawSet(-3);

            lua.PushString("OnRecvBin");
            LuaEventLib._wrap(lua, OnRecvBin);
            lua.RawSet(-3);
        }*/


        LuaGameObjectLib.RegComponent(new CMQKNodeClientInfo());

        return 1;
    }

    public static void _wrap(ILuaState lua, CMQKNodeClient comp)
    {
        LuaOpenLibs._wrapComponent(lua, comp, LIB_NAME, m_ClassRegHelper);
    }

    public static CMQKNodeClient Lua2Obj(ILuaState lua, int index)
    {
        LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<CMQKNodeClient>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }


    static int M_Conn(ILuaState lua)
    {
        //in self,ip,port,autoReConn
        //out void
        CMQKNodeClient self = Lua2Obj(lua, 1);

        string ip = lua.L_CheckString(2);

        int port = lua.L_CheckInteger(3);
         
        bool autoReConn = (lua.GetTop()>=4)?lua.ToBoolean(4):true;

        self.ClientHandel.Conn(ip, port, autoReConn);

        return 0;
    }

    static int M_Send(ILuaState lua)
    {
        //in self,ByteArray,flag
        //out void
        CMQKNodeClient self = Lua2Obj(lua, 1);
        MonoEX.ByteArray bytes = LuaByteArrayLib.Lua2Obj(lua,2); 
        int flag = lua.L_CheckInteger(3);
        lua.L_ArgCheck(flag < 255 && flag > -1, 3, "flag out of range");
        self.ClientHandel.Send(bytes.ToBytes(), (byte)flag, QKNodeClient.INVALID_LID);
        return 0;
    }

    public static int M_CreateLoader(ILuaState lua)
    {
        //in self,ByteArray,flag 
        //out Loader
        CMQKNodeClient self = Lua2Obj(lua, 1);
        MonoEX.ByteArray bytes = LuaByteArrayLib.Lua2Obj(lua, 2);  
        byte flag = (byte)lua.L_CheckInteger(3); 

        byte[] btarray = bytes.ToBytes();
        LuaLoaderLib._wrap(lua, self.ClientHandel.CreateLoader(btarray, 0, btarray.Length, flag));
        return 1;
    }

    static int M_ResultTimeout(ILuaState lua)
    {
        //in self
        CMQKNodeClient self = Lua2Obj(lua, 1);
        self.ClientHandel.ResultTimeout();
        return 0;
    }

    static int M_Close(ILuaState lua)
    {
        //in self 
        CMQKNodeClient self = Lua2Obj(lua, 1);
        self.ClientHandel.Close();
        return 0;
    }

    static int M_SoftClose(ILuaState lua)
    {
        //in self 
        CMQKNodeClient self = Lua2Obj(lua, 1);
        self.ClientHandel.SoftClose();
        return 0;
    }


    static int M_OnSoftDisconnected(ILuaState lua)
    {
        //in self 
        //out LuaEvent
        CMQKNodeClient self = Lua2Obj(lua, 1);
        QKNodeClientEvent evt = self.gameObject.GetComponent<QKNodeClientEvent>();
        if (evt == null) evt = self.gameObject.AddComponent<QKNodeClientEvent>();
        LuaEventLib._wrap(lua, evt.OnSoftDisconnected);
        return 1;
    }


    static int M_OnDisconnected(ILuaState lua)
    {
        //in self 
        //out LuaEvent
        CMQKNodeClient self = Lua2Obj(lua, 1);
        QKNodeClientEvent evt = self.gameObject.GetComponent<QKNodeClientEvent>();
        if (evt == null) evt = self.gameObject.AddComponent<QKNodeClientEvent>();
        LuaEventLib._wrap(lua, evt.OnDisconnected);
        return 1;
    }

    static int M_OnConn(ILuaState lua)
    {
        //in self 
        //out LuaEvent
        CMQKNodeClient self = Lua2Obj(lua, 1);
        QKNodeClientEvent evt = self.gameObject.GetComponent<QKNodeClientEvent>();
        if (evt == null) evt = self.gameObject.AddComponent<QKNodeClientEvent>();
        LuaEventLib._wrap(lua, evt.OnConn);
        return 1;
    }

    static int M_OnSoftConn(ILuaState lua)
    {
        //in self 
        //out LuaEvent
        CMQKNodeClient self = Lua2Obj(lua, 1);
        QKNodeClientEvent evt = self.gameObject.GetComponent<QKNodeClientEvent>();
        if (evt == null) evt = self.gameObject.AddComponent<QKNodeClientEvent>();
        LuaEventLib._wrap(lua, evt.OnSoftConn);
        return 1;
    }

    static int M_OnRecv(ILuaState lua)
    {
        //in self 
        //out LuaEvent
        CMQKNodeClient self = Lua2Obj(lua, 1);
        QKNodeClientEvent evt = self.gameObject.GetComponent<QKNodeClientEvent>();
        if (evt == null) evt = self.gameObject.AddComponent<QKNodeClientEvent>();
        LuaEventLib._wrap(lua, evt.OnRecv);
        return 1;
    }

    /*
    static int M_OnRecvJson(ILuaState lua)
    {
        //in self 
        //out LuaEvent
        QKNodeClient self = Lua2Obj(lua, 1);
        QKNodeClientEvent evt = self.gameObject.GetComponent<QKNodeClientEvent>();
        if (evt == null) evt = self.gameObject.AddComponent<QKNodeClientEvent>();
        LuaEventLib._wrap(lua, evt.OnRecvJson);
        return 1;
    }*/
}
 