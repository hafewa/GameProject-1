using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;
 
class LuaAudioClipLib
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
   // static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "AudioClip";

    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("GetLength",M_GetLength), 
        };


        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        { 
            new NameFuncPair("new",S_new),
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        return 1;
    }


    public static void _wrap(ILuaState lua, AudioClip newObj)
    {
        LuaOpenLibs._wrap(m_ClassRegHelper, lua, newObj);
    }


    public static AudioClip Lua2Obj(ILuaState lua, int index)
    {
        return LuaOpenLibs.Lua2Obj<AudioClip>( lua, index);
    }

    public static int S_new(ILuaState lua)
    {
        //in packName,audioClipName
        //out AudioClip
        string packName =  lua.L_CheckString(1);
        string audioClipName = lua.L_CheckString(2);

        PacketRouting pkRouting = PacketManage.Single.GetPacket(packName);
        if (pkRouting == null)
        {
            lua.PushNil();
            return 1;
        }

        AudioClip obj = pkRouting.Load(audioClipName) as AudioClip;
        _wrap(lua, obj);
        return 1;
    }

    public static int M_GetLength(ILuaState lua)
    {
        //in self
        //out float
        AudioClip self = Lua2Obj(lua, 1);
        lua.PushNumber(self.length);
        return 1;
    } 
}
 
