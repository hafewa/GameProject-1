using CHttp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;


public class LuaCHttpRequestLib
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
    public const string LIB_NAME = "CHttpRequest";

    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        { 
            new NameFuncPair("HasFinished",M_HasFinished),
            new NameFuncPair("IsFirstFinished",M_IsFirstFinished),
            new NameFuncPair("HasError",M_HasError),
            new NameFuncPair("GetResult",M_GetResult),
        };


        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
              
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        return 1;
    }


    public static void _wrap(ILuaState lua, CHttpRequest newObj)
    {
        NameValuePair[] propertys = new NameValuePair[]
        {
            new NameValuePair(LuaOpenLibs.OBJ_HANDELNAME,newObj),
        };

        m_ClassRegHelper.InstanceLuaClass(lua, propertys);
    }
    public static CHttpRequest Lua2Obj(ILuaState lua, int index)
    {
        LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<CHttpRequest>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }

    public static int M_HasFinished(ILuaState lua)
    {
        CHttpRequest self = Lua2Obj(lua, 1);
        lua.PushBoolean(self.Finished);
        return 1;
    }

    public static int M_IsFirstFinished(ILuaState lua)
    {
        CHttpRequest self = Lua2Obj(lua, 1);
        lua.PushBoolean(self.FirstFinished);
        return 1;
    }

    public static int M_HasError(ILuaState lua)
    {
        CHttpRequest self = Lua2Obj(lua, 1);
        lua.PushBoolean(CHttpErrorCode.Success != self.Response.ErrorCode);
        return 1;
    }

    public static int M_GetResult(ILuaState lua)
    {
        CHttpRequest self = Lua2Obj(lua, 1);
        if (string.IsNullOrEmpty(self.Response.Content))
        {
            lua.PushNil();
        }
        else
        {
            QK_JsonValue_Map temp = new QK_JsonValue_Map();
            if (temp.Parse(self.Response.Content))
            {
                LuaQKJsonLib._wrap(lua, temp);
            }
            else
            {
                lua.PushNil();
            }
        }
        return 1;
    }
}
