using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;

public interface ICoreComponentInfo
{
    Type type { get; }
    string name { get; }
    void newLuaObj(ILuaState lua, Component cmp);
}

public class LuaGameObjectLib
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
    static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "GameObject";

    const string CM_HANDEL_NAME = "_cmhandel";
    public static int OpenLib(ILuaState lua)
    {


        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("AddComponent",M_AddComponent),
            new NameFuncPair("GetComponents",M_GetComponents),
            new NameFuncPair("GetComponent",M_GetComponent),
            new NameFuncPair("RemoveComponent",M_RemoveComponent),
            new NameFuncPair("GetLocalScale",M_GetLocalScale),
            new NameFuncPair("SetLocalScale",M_SetLocalScale),

            new NameFuncPair("EnableCollider",M_EnableCollider),
            

            new NameFuncPair("GetPosition",M_GetPosition),
            new NameFuncPair("SetPosition",M_SetPosition),

            new NameFuncPair("GetLocalPosition",M_GetLocalPosition),
            new NameFuncPair("SetLocalPosition",M_SetLocalPosition),
            new NameFuncPair("Destroy",M_Destroy),
            new NameFuncPair("DontDestroyOnLoad",M_DontDestroyOnLoad),
            new NameFuncPair("LookAtPos",M_LookAtPos),
            new NameFuncPair("LookAtObj",M_LookAtObj),            
            new NameFuncPair("GetName",M_GetName),
            new NameFuncPair("SetName",M_SetName),
            new NameFuncPair("GetParent",M_GetParent),
            new NameFuncPair("SetParent",M_SetParent),
            new NameFuncPair("SetActive",M_SetActive),
            new NameFuncPair("FindChild",M_FindChild),
            new NameFuncPair("GetChild",M_GetChild),
            new NameFuncPair("ChildCount",M_ChildCount), 
            new NameFuncPair("FlyTo",M_FlyTo), 
            

            //new NameFuncPair("StartFly",M_StartFly), 
            
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);



        NameFuncPair[] static_define = new NameFuncPair[]
        {
            new NameFuncPair("new",F_new),
            new NameFuncPair("InstantiateFromPacket",F_InstantiateFromPacket),
            new NameFuncPair("InstantiateFromPreobj",S_InstantiateFromPreobj),
            new NameFuncPair("Find",F_Find),
            new NameFuncPair("Equal",S_Equal), 
        };
        m_ClassRegHelper.RegStatics(lua, static_define); 

        return 1;
    }

    public static int F_new(ILuaState lua)
    {
        //参数
        //String 游戏物体名

        //返回
        //GameObject

        int n = lua.GetTop();
        string objName =  n >= 1 ?lua.L_CheckString(1):"LuaObj";

        GameObject newObj = new GameObject();
        newObj.name = objName;

        _wrap(lua, newObj);

        return 1;
    }

    public static void _wrap(ILuaState lua, GameObject newObj)
    {
        LuaOpenLibs._wrap(m_ClassRegHelper, lua, newObj);
    }


    public static GameObject Lua2Obj(ILuaState lua, int index)
    {
        return LuaOpenLibs.Lua2Obj<GameObject>( lua, index);
    }
   
    public static int S_InstantiateFromPreobj(ILuaState lua)
    {
        //参数
        //preObj //预置
        //parent //父

        //返回
        //GameObject
        try
        {
            int n = lua.GetTop();
            UnityEngine.Object preObj;
            if(lua.IsTable(1))
               preObj = LuaGameObjectLib.Lua2Obj(lua, 1);
            else
               preObj = (UnityEngine.Object)lua.ToUserData(1);
            GameObject parent = n > 1 ? Lua2Obj(lua, 2) : null;


            GameObject gameObject = GameObjectExtension.InstantiateFromPreobj(preObj, parent);

            _wrap(lua, gameObject);
        }catch(Exception ex)
        {
            ULDebug.LogError(ex.ToString());
            lua.L_Error("GameObject.InstantiateFromPreobj 异常");
        }
        return 1;
    }

     
    static int M_EnableCollider(ILuaState lua)
    {
        //in self,enable
        //out nil
        GameObject self = Lua2Obj(lua, 1);
        bool enable = lua.ToBoolean(2);

        self.EnableCollider(  enable);
        return 0;
    }

    static int M_SetActive(ILuaState lua)
    {
        //in self,isActive
        //out nil
        GameObject self = Lua2Obj(lua, 1);
        bool isActive = lua.ToBoolean(2);

        self.SetActive(isActive);

        return 0;
    }

    static int M_SetParent(ILuaState lua)
    {
        //in self[,otherGameObject]
        //out nil
        int n = lua.GetTop();

        GameObject self = Lua2Obj(lua, 1);
        
        GameObject other = null;
        if(n>=2) other= Lua2Obj(lua, 2);

        self.transform.parent = other==null?null:other.transform;
       
        return 0;
    }


    static int M_GetParent(ILuaState lua)
    {
        //in self
        //out GameObject 
        GameObject self = Lua2Obj(lua, 1);

        _wrap(lua, self.transform.parent == null ? null : self.transform.parent.gameObject);

        return 1;
    }

    /// <summary>
    /// 比较两个游戏物体是否是同个
    /// </summary>
    /// <returns></returns>
    public static int S_Equal(ILuaState lua)
    {
        //in GameObject1 GameObject2
        //out bool
        GameObject a = LuaGameObjectLib.Lua2Obj(lua, 1);
        GameObject b = LuaGameObjectLib.Lua2Obj(lua, 2);
        lua.PushBoolean( a == b);
        return 1;
    }

    /// <summary>
    /// 实例化游戏对象
    /// </summary>
    /// <param name="packName">包名</param>
    /// <param name="preObjName">预置对象名</param>
    public static int F_InstantiateFromPacket(ILuaState lua)
    {
        ///参数
        //string packName
        //string preObjName
        //GameObject parent

        //返回
        //GameObject
        int n = lua.GetTop();

        string packName = lua.L_CheckString(1);
        string preObjName = lua.L_CheckString(2);
        GameObject parent = n>2? Lua2Obj(lua, 3):null;


        _wrap(lua, GameObjectExtension.InstantiateFromPacket(packName, preObjName, parent));

        return 1;
    }

    public static int M_GetComponent(ILuaState lua)
    {
        //in self,cmname[,autoCreate]
        //out cm or nil
        int n = lua.GetTop();
        GameObject gameObj = Lua2Obj(lua, 1);
        string cmname = lua.L_CheckString(2);
        bool autoCreate = false;
        if (n >= 3) autoCreate = lua.ToBoolean(3);

        bool needPushNil = false;
        if (m_CoreComponents.ContainsKey(cmname))
        {
            ICoreComponentInfo cmpInfo = m_CoreComponents[cmname];
            Component[] cms = gameObj.GetComponents(cmpInfo.type);
            if (cms == null || cms.Length < 1)
            {
                needPushNil = true;
                
            }
            else
                cmpInfo.newLuaObj(lua, cms[0]);
        }
        else
        {
            CMLua_Light[] cms = gameObj.GetComponents<CMLua_Light>();
            if (cms == null || cms.Length < 1)
                needPushNil = true;
            else
                lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, cms[0].m_Funcs.ClassRef);
        }

        if (needPushNil)
        {
            if (autoCreate)
            {
                lua.PushValue(1);//压入参数1 self
                lua.PushValue(2);//压入参数2 组件名
                lua.SetTop(2);//清栈，只保存2个元素
                return M_AddComponent(lua);//调用lua接口添加组件
            }
            else
                lua.PushNil();
        }
        
        return 1;
    }

    //获取组件
    public static int M_GetComponents(ILuaState lua)
    {
        //in self,cmname
        //out {cm,...} or nil
        GameObject gameObj = Lua2Obj(lua, 1);
        string cmname = lua.L_CheckString(2);

        if (m_CoreComponents.ContainsKey(cmname))
        {
            ICoreComponentInfo cmpInfo = m_CoreComponents[cmname];
            Component[] cms = gameObj.GetComponents(cmpInfo.type);
            if (cms == null || cms.Length < 1)
                lua.PushNil(); 
            else
            {
                
                lua.CreateTable(0, 0);
                int index = 1;
                foreach (Component curr in cms)
                {
                    cmpInfo.newLuaObj(lua, curr); 
                    lua.RawSetI(-2, index++);
                } 
            }
        
        }else{
            lua.CreateTable(0, 0);

            CMLua_Light[] cms = gameObj.GetComponents<CMLua_Light>();
            if (cms == null || cms.Length < 1)
                lua.PushNil(); 
            else
            {
                foreach (CMLua_Light curr in cms)
                {
                    int index = 1;
                    if (curr.m_Funcs.cmName == cmname)
                    {
                        lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, curr.m_Funcs.ClassRef);
                        lua.RawSetI(-2,index++);
                    }
                }
            }
        }
        return 1;
    }



    //添加组件 
    public static int M_AddComponent(ILuaState lua)
    {
        //参数
        //GameObject obj //游戏物体
        //String cmName //脚本文件名

        //返回
        //LuaClass
        
        GameObject gameObj = Lua2Obj(lua, 1);
         

        string cmName = lua.L_CheckString(2);
         

        if (m_CoreComponents.ContainsKey(cmName))//内核组件
        {  
            ICoreComponentInfo cmpInfo = m_CoreComponents[cmName];
             
            Component cmp = gameObj.AddComponent(cmpInfo.type); 
            cmpInfo.newLuaObj(lua, cmp); 
            
            return 1;
        }
         
        //lua组件
        CMLuaFuns funs = LuaRoot.CreateCMFuncs(lua, cmName);
        if (funs == null)
        {
            Debug.LogError("非法的lua组件 " + cmName);
            throw new Exception("非法的lua组件 " + cmName);
        }

        CMLua_Light cmObj;
        if (funs.UpdateRef > 0)
            cmObj = gameObj.AddComponent<CMLua>();
        else
            cmObj = gameObj.AddComponent<CMLua_Light>();

        cmObj.m_Funcs = funs;
        cmObj.CallLuaOnEnable();

        lua.RawGetI(LuaDef.LUA_REGISTRYINDEX, funs.ClassRef);

        //将内核组件标志放入lua类中
        lua.PushString(CM_HANDEL_NAME);
        lua.PushLightUserData(cmObj);
        lua.RawSet(-3);

        //追加GameObject成员
        lua.PushString(LuaOpenLibs.CMOBJ_LUA_GAMEOBJ);
        lua.PushValue(1);
        lua.RawSet(-3);

        //追加type
        lua.PushString(LuaOpenLibs.CMOBJ_NAME);
        lua.PushString(cmName);
        lua.RawSet(-3);
         

        //追加SetEnable接口
        lua.PushString("SetEnable");
        lua.PushCSharpFunction(M_SetEnable);
        lua.RawSet(-3);

        lua.PushString("GetEnable");
        lua.PushCSharpFunction(M_GetEnable);
        lua.RawSet(-3); 

        return 1;
    }

    static int M_SetEnable(ILuaState lua)
    {
        LuaMemberHelper.CheckClass(lua, 1);
        CMLua_Light self = LuaMemberHelper.GetObject<CMLua_Light>(lua, 1, CM_HANDEL_NAME);
        lua.L_ArgCheck(self != null, 1, "illegal self!");

        bool enabled = lua.ToBoolean(2);

        self.enabled = enabled;
        return 0;
    }

    static int M_GetEnable(ILuaState lua)
    {
        LuaMemberHelper.CheckClass(lua, 1);
        CMLua_Light self = LuaMemberHelper.GetObject<CMLua_Light>(lua, 1, CM_HANDEL_NAME);
        lua.L_ArgCheck(self != null, 1, "illegal self!");

        lua.PushBoolean(self.enabled);
        return 1;
    }
    
   
    public static int M_FlyTo(ILuaState lua)
    { 
        //in self,toPos,strength[,callBackClass,callBackFunc]
        var self = Lua2Obj(lua, 1);
        Vector3 toPos; LuaVector3Lib.Lua2Obj(lua,2,out toPos);
        float strength = (float)lua.L_CheckNumber(3);
        
        var DoneEvent = (lua.GetTop()>3)?LuaRoot.LDelegate2Event<LuaEventCallback>(lua, 4, 5):null;

        var cmfly = UIFly.Go(self, toPos, strength);
        cmfly.StartFly(() => {
            if (DoneEvent!=null)
                using(DoneEvent)  DoneEvent.Call(null); 
        }
        );
        return 0;
    } 

    //移除组件
    public static int M_RemoveComponent(ILuaState lua)
    {
        //参数
        //GameObject obj //游戏物体
        //LuaClass  //lua组件

        //返回
        //无
       LuaMemberHelper.CheckClass(lua, 2);
        GameObject gameObj = Lua2Obj(lua,1);
        CMLua_Light cmLight = LuaMemberHelper.GetObject<CMLua_Light>(lua, 2, CM_HANDEL_NAME);

        if (cmLight == null)
        {
            //内核组件 
            Component cm = LuaMemberHelper.GetObject<Component>(lua, 2, LuaOpenLibs.OBJ_HANDELNAME);
            if(cm!=null)  GameObject.Destroy(cm); 
            
        } else
        {
            CMLua_Light[] cms = gameObj.GetComponents<CMLua_Light>();
            foreach (CMLua_Light curr in cms)
            {
                if (curr == cmLight)
                {
                    GameObject.Destroy(curr);
                    break;
                }
            }
        }

        return 0;
    }


    public static int M_GetLocalPosition(ILuaState lua)
    { 
        GameObject self = Lua2Obj(lua, 1);
        LuaVector3Lib._wrap(lua, self.transform.localPosition);

        //Debug.Log(string.Format("self.transform.localPosition name:{0} v:{1}", self.name, self.transform.localPosition.ToString()));
        return 1;
    }


    public static int M_SetLocalPosition(ILuaState lua)
    {
        GameObject self = Lua2Obj(lua, 1);

        Vector3 pos; LuaVector3Lib.Lua2Obj(lua, 2, out pos);

        self.transform.localPosition = pos;

         
        return 0;
    }
 
    public static int M_ChildCount(ILuaState lua)
    {
        //in self
        //out int

        var self = Lua2Obj(lua, 1);
        lua.PushInteger(self.transform.childCount);
        return 1;
    }

    public static int M_GetChild(ILuaState lua)
    {
        //in self,idx
        //out GameObject
        var self = Lua2Obj(lua, 1);
        var idx = lua.L_CheckInteger(2);

        lua.L_ArgCheck(idx > 0 && idx <= self.transform.childCount, 2, "索引越界");

        LuaGameObjectLib._wrap(lua, self.transform.GetChild(idx-1).gameObject);
        return 1;
    }


    public static int M_GetPosition(ILuaState lua)
    {
       LuaMemberHelper.CheckClass(lua, 1);
        GameObject ownerObj = Lua2Obj(lua, 1);

        LuaVector3Lib._wrap(lua, ownerObj.transform.position);

        return 1;
    }


    public static int M_SetPosition(ILuaState lua)
    {
        GameObject ownerObj = Lua2Obj(lua, 1);

        Vector3 pos; LuaVector3Lib.Lua2Obj(lua, 2, out pos);

        ownerObj.transform.position = pos;
        //NGUITools.MarkParentAsChanged(ownerObj);
        return 0;
    }

    public static int M_DontDestroyOnLoad(ILuaState lua)
    {
         
        GameObject ownerObj = Lua2Obj(lua,1);
        GameObject.DontDestroyOnLoad(ownerObj);
        return 0;
    }

    public static int M_Destroy(ILuaState lua)
    { 
        GameObject ownerObj = Lua2Obj(lua,1);
         

        //销毁游戏物体
        GameObject.Destroy(ownerObj);
        return 0;
    }

    public static int M_FindChild(ILuaState lua)
    {
        //in self,objPath
        //out GameObject
        GameObject self = Lua2Obj(lua, 1);
        string objName = lua.L_CheckString(2);
        string[] name_path = objName.Split('/');
        Transform tf = GameObjectExtension.FindChild(self.transform, name_path);

        GameObject reGameObject = (tf == null) ? null : tf.gameObject;
        _wrap(lua, reGameObject);
        return 1;
    }



    public static int F_Find(ILuaState lua)
    {
        //in objPath
        //out GameObject
        string objPath = lua.L_CheckString(1);
        GameObject obj = GameObject.Find(objPath);
        _wrap(lua, obj);
        return 1;
    }

    public static int M_SetLocalScale(ILuaState lua)
    { 
       LuaMemberHelper.CheckClass(lua, 2);
        GameObject ownerObj = Lua2Obj(lua, 1);

        Vector3 scale = new Vector3(
            m_MemberHelper.GetFloat(lua, 2, "x"),
            m_MemberHelper.GetFloat(lua, 2, "y"),
            m_MemberHelper.GetFloat(lua, 2, "z")
            );

        ownerObj.transform.localScale = scale;

        return 0;
    }

    /*
    public static int M_GetAbsPosition(ILuaState lua)
    { 
        GameObject ownerObj = Lua2Obj(lua, 1);
        Transform bkParent = ownerObj.transform.parent;
        ownerObj.transform.SetParent(UIFlyManage.Single.gameObject.transform, true); 
        Vector3 re = ownerObj.transform.localPosition;
        ULDebug.Log( re.ToString());
        LuaVector3Lib._wrap(lua, re);// ownerObj.transform.localPosition

        //ownerObj.transform.parent = bkParent;
        ownerObj.transform.SetParent(bkParent, true);
        return 1;
    }*/

    public static int M_GetLocalScale(ILuaState lua)
    { 
        GameObject ownerObj = Lua2Obj(lua,1);

        LuaVector3Lib._wrap(lua,
            ownerObj.transform.localScale
         );

        return 1;
    }

   
    public static int M_LookAtObj(ILuaState lua)
    {
        //in self,otherGameObject[,upDir]
        //out void
        int n = lua.GetTop(); 
        GameObject ownerObj = Lua2Obj(lua,1); 
        GameObject otherObj = Lua2Obj(lua,2); 

        if(n<=2)
        {
            ownerObj.transform.LookAt(otherObj.transform);
        }else
        {
            Vector3 updir; LuaVector3Lib.Lua2Obj(lua,3,out updir);
            ownerObj.transform.LookAt(otherObj.transform, updir);
        }
        return 0;
    }

    public static int M_GetName(ILuaState lua)
    {
        //in self
        //out string
        GameObject self = Lua2Obj(lua, 1);
        lua.PushString(self.name);
        return 1;
    }

    public static int M_SetName(ILuaState lua)
    {
        //in self,name
        //out nil
        GameObject self = Lua2Obj(lua, 1);
        string name = lua.L_CheckString(2);

        self.name = name;
        return 0;
    }

    public static int M_LookAtPos(ILuaState lua)
    {
        //in self,targetPos[,upDir]
        //out void
        int n = lua.GetTop();
       LuaMemberHelper.CheckClass(lua, 1);
       LuaMemberHelper.CheckClass(lua, 2);

        GameObject ownerObj = LuaMemberHelper.GetObject<GameObject>(lua, 1, LuaOpenLibs.OBJ_HANDELNAME);
        Vector3 targetPos; LuaVector3Lib.Lua2Obj(lua, 2, out targetPos);

        if (n <= 2)
        {
            ownerObj.transform.LookAt(targetPos);
        }
        else
        {
            Vector3 updir; LuaVector3Lib.Lua2Obj(lua, 3, out updir);
            ownerObj.transform.LookAt(targetPos, updir);
        }
        return 0;
    }

    //注册内核组件
    public static void RegComponent(ICoreComponentInfo compInfo)
    {
        m_CoreComponents.Add(compInfo.name, compInfo);
    }

    static Dictionary<string, ICoreComponentInfo> m_CoreComponents = new Dictionary<string, ICoreComponentInfo>();

    
}