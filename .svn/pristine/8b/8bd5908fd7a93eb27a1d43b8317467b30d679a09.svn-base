using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class UIScrollPoint : MonoBehaviour {
    public float Time = 3.0f;
    public int ScrollDirection = 0;             //
    public GameObject TriggerObject = null;     //子物体对齐组件
    public GameObject GeryPoint = null;         //小豆的未选中状态
    public GameObject ColorPoint = null;        //小豆的选中状态
    public GameObject LeftTrigger = null;       //向左按钮
    public GameObject RightTrigger = null;      //向右按钮
    private Transform Curr = null;
    private List<GameObject> ScrollPoints = new List<GameObject>();
    void Start()
    {
        InvokeRepeating("OnTimerCallBack", 2, Time);
        UICenterOnChild CoC = TriggerObject.GetComponent<UICenterOnChild>();
        CoC.onCenter += OnCenterCallback;
        //Turn to left
        UIEventListener.Get(LeftTrigger).onClick = LeftClick;
        UIEventListener.Get(RightTrigger).onClick = RightClick;
        //Turn to Right
        RememberChild();
    }
    void OnTimerCallBack()
    {
        ClickTo(true);
    }
    void OnCenterCallback(GameObject centeredObject)
    {
        Curr = centeredObject.GetComponent<Transform>();
        ResetPoint(GetCurrentIndex());
    }

    void LeftClick(GameObject obj)
    {
        ClickTo(true);
    }

    void RightClick(GameObject obj)
    {
        ClickTo(false);
    }
    void ClickTo(bool _IsLeft)
    {
        int nNext = GetNextIndex(_IsLeft);
        SetIndex(nNext);
    }
    public int GetCurrentIndex()   //获取当前页面索引
    {
        int nLength = TriggerObject.transform.childCount;
        for (int nIndex = 0; nIndex < nLength; nIndex++)
        {
            if (TriggerObject.transform.GetChild(nIndex).Equals(Curr))
                return nIndex;
        }
        return 0;
    }
    public int GetNextIndex(bool _IsLeft)  //获取下一页面索引
    {
        int nLength = TriggerObject.transform.childCount;
        int nNext = 0;
        int nIndex = GetCurrentIndex();
        if (_IsLeft)
            nNext = (nIndex + 1) % nLength;
        else
            nNext = (nIndex + nLength - 1) % nLength;

        return nNext;
    }

    public void ResetPoint(int nIndex)  //刷新小豆位置
    {
        ColorPoint.transform.localPosition = ScrollPoints[nIndex].transform.localPosition;
    }
    public void SetIndex(int _index)
    {
        UICenterOnChild CoC = TriggerObject.GetComponent<UICenterOnChild>();
        //Debug.LogError("===index:" + _index + "===" + TriggerObject.transform.GetChild(_index).localPosition.ToString());
        CoC.CenterOn(TriggerObject.transform.GetChild(_index));
    }

    public int RememberChild()
    {
        ScrollPoints.Clear();
        for (int nIndex = 0; nIndex < TriggerObject.transform.childCount; nIndex++)
        {
            GameObject tempImage = GameObject.Instantiate<GameObject>(GeryPoint);
            tempImage.SetActive(true);
            tempImage.transform.parent = GeryPoint.transform.parent;
            tempImage.transform.localScale = Vector3.one;
            ScrollPoints.Add(tempImage);
        }
        GeryPoint.SetActive(false);
        UIGrid grid = GeryPoint.GetComponentInParent<UIGrid>();
        grid.Reposition();
        return ScrollPoints.Count;
    }
}
