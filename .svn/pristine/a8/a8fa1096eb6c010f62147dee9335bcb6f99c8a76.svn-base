using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;
class LuaCMUIZoomScaleLib
{
    class ZoomScaleInfo : ICoreComponentInfo
    {
        public Type type { get { return typeof(UIZoomScale); } }
        public string name { get { return LuaCMUIZoomScaleLib.LIB_NAME; } }
        public void newLuaObj(ILuaState lua, Component cmp)
        {
            LuaCMUIZoomScaleLib._wrap(lua, cmp as UIZoomScale);
        }
    }

    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
    // static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "CMUIZoomScale";


    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("BindEvent",M_BindEvent),
            new NameFuncPair("OnShift",M_OnShift),
            new NameFuncPair("GetZoomState",M_GetZoomState),
            new NameFuncPair("Adjust",M_Adjust),
            new NameFuncPair("SetInfo",M_SetInfo),
            new NameFuncPair("SetSizeInfo",M_SetSizeInfo),
            new NameFuncPair("Move",M_Move),
            new NameFuncPair("SetControl",M_SetEnable),
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {

        };
        //注册静态属性
        NameValuePair[] static_property = new NameValuePair[]
        {
            new NameValuePair("Name",LIB_NAME),
        };
        m_ClassRegHelper.RegStatics(lua, static_define, static_property);

        LuaGameObjectLib.RegComponent(new ZoomScaleInfo());

        return 1;
    }

    public static void _wrap(ILuaState lua, UIZoomScale comp)
    {
        LuaOpenLibs._wrapComponent(lua, comp, LIB_NAME, m_ClassRegHelper);
    }

    public static UIZoomScale Lua2Obj(ILuaState lua, int index)
    {

        LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<UIZoomScale>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }


    static int M_BindEvent(ILuaState lua)
    {
        UIZoomScale self = Lua2Obj(lua, 1);
        if (self.onLuaShift == null) self.onLuaShift = new QKEvent();
        LuaEventLib._wrap(lua, self.onLuaShift);           
        return 1;
    }

    static int M_OnShift(ILuaState lua)
    {
        UIZoomScale self = Lua2Obj(lua, 1);
        self.onShift();
        return 0;
    }

    static int M_GetZoomState(ILuaState lua)
    {
        UIZoomScale self = Lua2Obj(lua, 1);
        bool isLarge = self.GetZoomState();
        lua.PushBoolean(isLarge);
        return 1;
    }

    static int M_Adjust(ILuaState lua)
    {
        UIZoomScale self = Lua2Obj(lua, 1);
        int Flag = lua.L_CheckInteger(2);
        self.Adjust(Flag != 0);
        return 0;
    }

    static int M_SetInfo(ILuaState lua)
    {
        UIZoomScale self = Lua2Obj(lua, 1);
        float fMax = lua.L_CheckInteger(2);
        float fMid = lua.L_CheckInteger(3);
        float fMin = lua.L_CheckInteger(4);
        float fDef1 = lua.L_CheckInteger(5);
        float fDef2 = lua.L_CheckInteger(6);
        float fSpeed = lua.L_CheckInteger(7);
        self.SetInfo(fMax, fMid, fMin, fDef1, fDef2, fSpeed);
        return 0;
    }

    static int M_SetSizeInfo(ILuaState lua)
    {
        UIZoomScale self = Lua2Obj(lua, 1);
        int xMax = lua.L_CheckInteger(2);
        int xMin = lua.L_CheckInteger(3);
        int yMax = lua.L_CheckInteger(4);
        int yMin = lua.L_CheckInteger(5);
        self.SetSizeInfo(xMax, yMax, xMin, yMin);
        return 0;
    }

    static int M_Move(ILuaState lua)
    {
        UIZoomScale self = Lua2Obj(lua, 1);
        int MoveValue = lua.L_CheckInteger(2);
        self.Move(MoveValue);
        return 0;
    }
    static int M_SetEnable(ILuaState lua)
    {
        UIZoomScale self = Lua2Obj(lua, 1);
        int isEnable = lua.L_CheckInteger(2);
        self.SetEnable(isEnable != 0);
        return 0;
    }
}
 
