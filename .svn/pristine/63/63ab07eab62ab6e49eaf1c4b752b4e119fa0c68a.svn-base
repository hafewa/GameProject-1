using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;

class LuaCMUIWidgetLib
{
    class CMUIWidgetInfo : ICoreComponentInfo
    {
        public Type type { get { return typeof(UIWidget); } }
        public string name { get { return LuaCMUIWidgetLib.LIB_NAME; } }
        public void newLuaObj(ILuaState lua, Component cmp)
        {
            LuaCMUIWidgetLib._wrap(lua, cmp as UIWidget);
        }
    }

    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
    //static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "CMUIWidget";


    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {  
            new NameFuncPair("SetAlpha",M_SetAlpha),
            new NameFuncPair("GetAlpha",M_GetAlpha),
            new NameFuncPair("GetSize",M_GetSize),
            new NameFuncPair("SetSize",M_SetSize),
            new NameFuncPair("GetDepth",M_GetDepth),
            new NameFuncPair("SetDepth",M_SetDepth),
            new NameFuncPair("ResizeCollider", M_ResizeCollider),
            new NameFuncPair("MakePixelPerfect", M_MakePixelPerfect),

            new NameFuncPair("GetColor", M_GetColor),
            new NameFuncPair("SetColor", M_SetColor),
        };
        
        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
           
            
        };
        //注册静态属性
        NameValuePair[] static_property = new NameValuePair[]
        {
            new NameValuePair("Name",LIB_NAME),
        };
        m_ClassRegHelper.RegStatics(lua, static_define, static_property);

        LuaGameObjectLib.RegComponent(new CMUIWidgetInfo());

        return 1;
    }

    public static void _wrap(ILuaState lua, UIWidget comp)
    {
        LuaOpenLibs._wrapComponent(lua, comp, LIB_NAME, m_ClassRegHelper);
    }

    public static UIWidget Lua2Obj(ILuaState lua, int index)
    {
       LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<UIWidget>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }


    static int M_GetColor(ILuaState lua)
    {
        //in self
        //out color
        var self = Lua2Obj(lua, 1);
        LuaColorLib._wrap(lua, self.color);
        return 1;
    }


    static int M_SetColor(ILuaState lua)
    {
        //in self,color
        var self = Lua2Obj(lua, 1);

        Color c; LuaColorLib.Lua2Obj(lua, 2, out c);
        self.color = c;
        return 0;
    }



    static int M_SetAlpha(ILuaState lua)
    {
        //in self,alhpa
        //out nil
        UIWidget self = Lua2Obj(lua, 1);
        float alpha = (float)lua.L_CheckNumber(2);
        self.alpha = alpha;
        return 0;
    }
    static int M_GetAlpha(ILuaState lua)
    {
        //in self
        //out alhpa
        UIWidget self = Lua2Obj(lua, 1);
        lua.PushNumber(self.alpha); 
        return 1;
    }

    static int M_GetSize(ILuaState lua)
    { 
        //in self
        //out Vector2
        UIWidget self = Lua2Obj(lua, 1);
        LuaVector2Lib._wrap(lua, self.width, self.height);
        
        return 1;
    }

    static int M_SetSize(ILuaState lua)
    {
        //in self,Vector2
        //out nil
        UIWidget self = Lua2Obj(lua, 1);
        Vector2 size; LuaVector2Lib.Lua2Obj(lua, 2,out size); 
        self.SetDimensions((int)size.x, (int)size.y);
        return 0;
    }

     static int M_SetDepth(ILuaState lua)
    {
         //in self,depth
         //out nil
        UIWidget self = Lua2Obj(lua, 1);
        self.depth = lua.L_CheckInteger(2);
        return 0;
    }
     static int M_GetDepth(ILuaState lua)
     {
         //in self
         //out depth
         UIWidget self = Lua2Obj(lua, 1);
         lua.PushInteger(self.depth);
         return 1;
     }

     // LJX-Add :
     static int M_ResizeCollider (ILuaState lua)
     {
         //in self
         //out nil
         UIWidget self = Lua2Obj (lua, 1);
         self.ResizeCollider();
         return 0;
     }



    /// <summary>
    /// 对齐尺寸到内容
    /// </summary>
    /// <param name="lua"></param>
    /// <returns></returns>
    static int M_MakePixelPerfect (ILuaState lua)
     {
         //in self
         //out nil
         UIWidget self = Lua2Obj (lua, 1);
         self.MakePixelPerfect();
         return 0;
     }

     
} 
