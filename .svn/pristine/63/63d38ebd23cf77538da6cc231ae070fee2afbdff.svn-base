using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;
using MonoEX;

class LuaHttpLoaderLib
{ 
      static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper(); 
    public const string LIB_NAME = "HttpLoader";

    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        { 
            new     NameFuncPair("HasError",M_HasError) ,
            new     NameFuncPair("GetResult",M_GetResult) ,
            new     NameFuncPair("IsDone",M_IsDone) ,
            
        };
         

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
              
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        return 1;
    }


    public static void _wrap(ILuaState lua, HttpLoader newObj)
    {
        LuaOpenLibs._wrap(m_ClassRegHelper, lua, newObj);
    }


    public static HttpLoader Lua2Obj(ILuaState lua, int index)
    {
        return LuaOpenLibs.Lua2Obj<HttpLoader>(lua, index);
    }
   
   
    public static int M_HasError(ILuaState lua)
    {
        //in self
        //out bool
        HttpLoader self = Lua2Obj(lua, 1);
        lua.PushBoolean(self.HasError);
        return 1;
    }

    public static int M_GetResult(ILuaState lua)
    {
        //in self
        //out QKJsonDoc
        HttpLoader self = Lua2Obj(lua, 1); 

        if (self.Result == null)
            lua.PushNil();
        else
            LuaQKJsonLib._wrap(lua, self.Result);  
        
        return 1;
    }


    public static int M_IsDone(ILuaState lua)
    {
        HttpLoader self = Lua2Obj(lua, 1);
        lua.PushBoolean(self.Finished);
        return 1;
    }
}
