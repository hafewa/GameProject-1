using CHttp;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class HttpLoader
{
    public HttpLoader()
    {

    }

    public void OnRequestFinished(CHttpRequest request)
    {
        mHasError = CHttpErrorCode.Success != request.Response.ErrorCode;
        if (!mHasError)
        {
            mResult = new QK_JsonValue_Map();
            if (!mResult.Parse(request.Response.Content))
            {
                mHasError = true;
            }
        }

        mFinished = true;
    }

    public bool Finished
    {
        get
        {
            return mFinished;
        }
    }

    public bool HasError
    {
        get { return mHasError; }
    }

    public QK_JsonValue_Map Result
    {
        get { return mResult; }
    }

    QK_JsonValue_Map mResult = null;
    bool mHasError = false;
    bool mFinished = false;
}
public class YQ2GameConn
{
    public static YQ2GameConn Single
    {
        get
        {
            if (null == mSingle)
            {
                mSingle = new YQ2GameConn();
            }
            return mSingle;
        }
    }

    public void Connect(string url, string uid)
    {
        mGameSession = new CHttpSession(url,uid);
    }

    public void UpdateToken(string token)
    {
        mGameSession.SetToken(token);
    }

    public HttpLoader CreateLoader(QK_JsonValue_Map nm,int flag)
    {
        HttpLoader tempResult = new HttpLoader();
        CHttpRequest tempRequest = mGameSession.CreateRequest(nm, flag, false);
        tempRequest.AddListener(OnRequestFinished);
        tempRequest.AddListener(tempResult.OnRequestFinished);
        Send(tempRequest);

        return tempResult;
    }


    #region 发送请求的方法重载

    public void SendRequest(QK_JsonValue_Map nm, int flag, COnHttpFinished onFinished)
    {
        SendRequest(nm, flag, onFinished, false);
    }

    public void SendRequest(QK_JsonValue_Map nm, int flag, IEventCallback callBack)
    {
        SendRequest(nm, flag, callBack, false);
    }

    public void SendRequest(QK_JsonValue_Map nm, int flag, COnHttpFinished onFinished, bool delaySupport)
    {
        CHttpRequest tempRequest = mGameSession.CreateRequest(nm, flag, delaySupport);
        tempRequest.AddListener(OnRequestFinished);
        tempRequest.AddListener(onFinished);
        Send(tempRequest);
    }

    public void SendRequest(QK_JsonValue_Map nm, int flag, IEventCallback callBack, bool delaySupport)
    {
        CHttpRequest tempRequest = mGameSession.CreateRequest(nm, flag, delaySupport);
        tempRequest.AddListener(OnRequestFinished);
        tempRequest.AddListener(callBack);
        Send(tempRequest);
    }

    #endregion 

    void Send(CHttpRequest request)
    {
        mGameSession.Send(request);
        if (null != GameQKSDKListener.Single.OnRequestSending)
        {
            GameQKSDKListener.Single.OnRequestSending.Call(null);
        }
    }

    void OnRequestFinished(CHttpRequest request)
    {
        if (null != GameQKSDKListener.Single.OnRequestFinished && request.FirstFinished)
        {
            GameQKSDKListener.Single.OnRequestFinished.Call(null);
        }

        if (CHttpErrorCode.Success == request.Response.ErrorCode)
        {
            if (!string.IsNullOrEmpty(request.Response.ExtContent))
            {
                DispatchNotify(request.Response.ExtContent);
            }
        }

        if (CHttpErrorCode.Expired == request.Response.ErrorCode)
        {
            if (null != GameQKSDKListener.Single.OnLoginExpired)
            {
                GameQKSDKListener.Single.OnLoginExpired.Call(null);
            }
        }
        if (CHttpErrorCode.ErrorFromat == request.Response.ErrorCode
            || CHttpErrorCode.ContextLost == request.Response.ErrorCode
            || CHttpErrorCode.NetError == request.Response.ErrorCode
            || CHttpErrorCode.Unkonw == request.Response.ErrorCode)
        {
            if (null != GameQKSDKListener.Single.OnConnectBroken)
            {
                GameQKSDKListener.Single.OnConnectBroken.Call(null);
            }
        }
    }

    void DispatchNotify(string str)
    {
        QK_JsonValue_Array jsonArray = new QK_JsonValue_Array();
        if (jsonArray.Parse(str))
        {
            IEnumerator tempEnumerator = jsonArray.GetEnumerator();
            while (tempEnumerator.MoveNext())
            {
                KeyValuePair<string, QK_JsonValue> temp = (KeyValuePair<string, QK_JsonValue>)tempEnumerator.Current;
                OnNotify(temp.Value as QK_JsonValue_Map);
            }
        }
    }

    void OnNotify(QK_JsonValue_Map jsonMap)
    {
        string n = jsonMap.StrValue("n");
        if (string.IsNullOrEmpty(n)) return;
        switch(n)
        {
            case "_Sync":
                {
                    OOSync.OOSyncClient.Single.DoDispatcher(jsonMap);//对象属性自动同步
                }
                break;

        }
    }

    YQ2GameConn()
    {

    }

    CHttpSession mGameSession;
    static YQ2GameConn mSingle = null;
}
