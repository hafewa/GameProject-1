using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class wndInfo
{
    public string name;
    public List<string> dependPackets = null;
    public WndFadeMode fade;
    public WndAnimationMode animaMode;
    public int sort;//显示层级
    public bool isVisible = false;//当前是否处于显示状态
    public int cacheTime;
}

public class wndShowHideInfo
{
    public string name;
    //public bool needVisible = false;//逻辑当前是希望它显示还是隐藏
    public WShowType needVisible = WShowType.hide;//逻辑当前是希望它显示还是隐藏,还是预加载
    public Action<Wnd> reCall;//回调句柄
    public float duration;//延迟
}
/*
class SafeShowing:IDisposable 
{
    public SafeShowing(string wndName)
    {
        m_wndName = wndName;
        WndManage.Single.__showing.Add(wndName);
          
    }

    public void Dispose()
    { 
        WndManage.Single.__showing.Remove(m_wndName); 
    }

    string m_wndName;
}*/
public enum WShowType
{
    hide,
    show,
    preLoad,
}
/// <summary>
/// 窗体的管理类 当前实现了窗体注册、卸载、获取依赖等功能点
/// </summary>
public class WndManage
{

    static WndManage _Single = null;
    // public HashSet<string> __showing = new HashSet<string>();//正在显示过程中的窗体
    Dictionary<string, DateTime> m_wndLastHideTime = new Dictionary<string, DateTime>();

    public delegate void Evt_WndDestroy(Wnd wndObj);
    public Evt_WndDestroy OnWndDestroy = null;
    public QKEvent OnWndOpen = new QKEvent();
    public static WndManage Single
    {
        get
        {
            if (_Single == null) _Single = new WndManage();
            return _Single;
        }
    }

    public readonly GameObject UIRootObj = null;
    public readonly GameObject UIPanelObj = null;


    //强制清除已经被隐藏的窗体，以立即回收内存
    public void DestroyHideWnds()
    {
        foreach (KeyValuePair<string, DateTime> curr in m_wndLastHideTime)
        {
            string wndname = curr.Key;
            Wnd wnd = m_wndInstances[wndname];
            DestroyWnd(wnd);
        }
        m_wndLastHideTime.Clear();
    }

    private WndManage()
    {
        UIRootObj = UnityEngine.GameObject.Find("/UIRoot");
        UIPanelObj = UIRootObj;




        // QKEvent Event_CheckRedundantUI = new QKEvent();
        //  Event_CheckRedundantUI.AddCallback(new SharpEventCallback(CheckRedundantUI_CallBack));

        //定时检查并卸载时间过长未使用的ui
        new MonoEX.Timer(15.0f).Play().OnComplete(CheckRedundantUI_CallBack);
    }

    void CheckRedundantUI_CallBack()
    {
        DateTime now = DateTime.Now;
        //检查冗余窗体
        Dictionary<string, DateTime> newList = new Dictionary<string, DateTime>();
        foreach (KeyValuePair<string, DateTime> curr in m_wndLastHideTime)
        {
            string wndname = curr.Key;
            Wnd wnd = m_wndInstances[wndname];
            wndInfo wInfo = m_wndInfos[wndname];
            if (
                (now - curr.Value).TotalSeconds > wInfo.cacheTime//超时
                )
                DestroyWnd(wnd);
            else
                newList.Add(curr.Key, curr.Value);
        }
        m_wndLastHideTime = newList;

        //继续定时
        {
            new MonoEX.Timer(15.0f).Play().OnComplete(CheckRedundantUI_CallBack);
        }
    }


    void DestroyWnd(Wnd wnd)
    {
        if (OnWndDestroy != null)
        {
            try
            {
                OnWndDestroy(wnd);
            }
            catch (Exception ex)
            {
                Debug.LogError(ex);
            }
        }

        wnd.Dispose();//卸载窗体对象
        m_wndInstances.Remove(wnd.Name);//从管理器移除引用

        //引用计数减少
        {
            wndInfo wInfo = m_wndInfos[wnd.Name];
            foreach (string packet in wInfo.dependPackets)
                ResourceRefManage.Single.SubRef(packet);
        }
    }



    /// <summary>
    /// 
    /// </summary>
    /// <param name="wndName"></param>
    /// <param name="dependPackets"></param>
    /// <param name="sort">显示排序</param>
    /// <param name="cacheTime">缓存时间，从隐藏开始算，单位秒，如果值小于1表示常注</param>
    /// <param name="fade"></param>
    public void RegWnd(string wndName, string dependPackets, int sort, int cacheTime, WndFadeMode fade, WndAnimationMode animaMode)
    {
        if (m_wndInfos.ContainsKey(wndName))
            m_wndInfos.Remove(wndName);

        List<string> packlist = new List<string>();
        string[] packs = dependPackets.Split(';');

        packlist.Add("packets");
        foreach (string curr in packs) packlist.Add(curr);
        m_wndInfos.Add(
            wndName,
            new wndInfo() { name = wndName, dependPackets = packlist, fade = fade, animaMode = animaMode, sort = sort, cacheTime = cacheTime }
        );
    }

    public void RegWnd1(string wndName, string dependPackets, int sort, int cacheTime, int fade, int animaMode)
    {
        RegWnd(wndName, dependPackets, sort, cacheTime, (WndFadeMode)fade, (WndAnimationMode)animaMode);
    }


    /// <summary>
    /// 获取窗体依赖包
    /// </summary>
    /// <param name="wndName"></param>
    /// <returns></returns>
    public HashSet<string> GetDependPackets(List<string> wndNames)
    {
        HashSet<string> re = new HashSet<string>();
        foreach (string wndName in wndNames)
        {
            if (!m_wndInfos.ContainsKey(wndName)) continue;

            wndInfo wInfo = m_wndInfos[wndName];
            foreach (string packet in wInfo.dependPackets)
            {
                if (!re.Contains(packet)) re.Add(packet);
            }
        }
        return re;
    }

    IEnumerator LoadDepend(string wndName)
    {
        if (!m_wndInfos.ContainsKey(wndName)) throw new Exception();

        wndInfo wInfo = m_wndInfos[wndName];
        //加载界面所需资源包
        PacketLoader packloader = new PacketLoader();
        packloader.Start(PackType.Res, wInfo.dependPackets, null);

        //等待包装载完成
        while (packloader.Wait().MoveNext()) { yield return null; }

        //引用计数增加
        foreach (string packet in wInfo.dependPackets)
        {
            ResourceRefManage.Single.AddRef(packet);
        }

    }

    public void ShowWnd(string wndName, float duration, Action<Wnd> reCall)
    {
        var wInfo = new wndShowHideInfo();
        wInfo.name = wndName;
        wInfo.needVisible = WShowType.show;
        wInfo.reCall = reCall;
        wInfo.duration = duration;

        DoCmd(wInfo);
    }

    public void HideWnd(string wndName, float duration, Action<Wnd> reCall)
    {
        var wInfo = new wndShowHideInfo();
        wInfo.name = wndName;
        wInfo.needVisible = WShowType.hide;
        wInfo.reCall = reCall;
        wInfo.duration = duration;

        DoCmd(wInfo);
    }
    public void PreLoadDepend(string wndName, Action<Wnd> reCall)
    {
        var wInfo = new wndShowHideInfo();
        wInfo.name = wndName;
        wInfo.needVisible = WShowType.preLoad;
        wInfo.reCall = reCall;

        DoCmd(wInfo);
    }
    void DoCmd(wndShowHideInfo wInfo)
    {
        m_Cmds.Add(wInfo);
        if (!m_coIsRuning)
        {
            m_coIsRuning = true;
            MonoEX.CoroutineManage.Single.StartCoroutine(coDoCmd());
        }
    }

    IEnumerator coDoCmd()
    {
        while (m_Cmds.Count > 0)
        {
            var aInfo = m_Cmds[0];
            m_Cmds.RemoveAt(0);

            var wndName = aInfo.name;

            if (!m_wndInfos.ContainsKey(aInfo.name))
            {
                Debug.LogError("窗体注册信息不存在 " + wndName);
                continue;
            }


            if (aInfo.needVisible != WShowType.hide)
            {

                //从最近隐藏记录中清除
                if (m_wndLastHideTime.ContainsKey(wndName))
                    m_wndLastHideTime.Remove(wndName);

                //窗体不存在，则创建
                if (!m_wndInstances.ContainsKey(wndName))
                {
                    IEnumerator it = LoadDepend(wndName);

                    while (it.MoveNext()) yield return null;

                    wndInfo wInfo = m_wndInfos[wndName];

                    //创建一个uipanel
                    GameObject uipanel = new GameObject(wInfo.name + "_panel");
                    uipanel.transform.parent = UIPanelObj.transform;
                    uipanel.transform.localScale = new Vector3(1, 1, 1);
                    uipanel.transform.localRotation = new Quaternion(0, 0, 0, 1);
                    uipanel.transform.localPosition = new Vector3(0, 0, 0);

                    uipanel.layer = LayerMask.NameToLayer("UI");//设置层

                    UIPanel cmpanel = uipanel.AddComponent<UIPanel>();
                    cmpanel.depth = wInfo.sort;//设置显示覆盖顺序 
                    GameObject wnd_Obj = GameObjectExtension.InstantiateFromPacket(wInfo.dependPackets[1], wInfo.name + ".prefab", uipanel);
                    if (wnd_Obj == null)
                    {
                        //删除刚创建的uipanel
                        GameObject.Destroy(uipanel);
                        Debug.LogError(String.Format("实例化窗体错误， packet:{0} wndName:{1}", wInfo.dependPackets[1], wInfo.name));
                        throw new Exception();
                    }


                    //设置新创建的panel锚点
                    {
                        UIRect rectCM = uipanel.GetComponent<UIRect>();
                        rectCM.SetAnchor(UIPanelObj, 0, 0, 0, 0);
                        rectCM.updateAnchors = UIRect.AnchorUpdate.OnStart;
                    }

                    //设置预置锚点
                    const int safev = 1;
                    {
                        UIRect rectCM = wnd_Obj.GetComponent<UIRect>();
                        rectCM.SetAnchor(uipanel, -safev, -safev, safev, safev);
                        rectCM.updateAnchors = UIRect.AnchorUpdate.OnStart;
                    }

                    //创建挡板

                    GameObject uibaffle;
                    {
                        uibaffle = new GameObject(wInfo.name + "_baffle");
                        uibaffle.layer = LayerMask.NameToLayer("UI");//设置层 
                        uibaffle.transform.parent = uipanel.transform;
                        uibaffle.transform.localScale = Vector3.one;
                        uibaffle.transform.localRotation = Quaternion.identity;
                        uibaffle.transform.localPosition = Vector3.zero;



                        //增加碰撞盒
                        var cl = uibaffle.AddComponent<BoxCollider>();

                        //增加UIWidget组件
                        var cmBaffleWidget = uibaffle.AddComponent<UIWidget>();
                        cmBaffleWidget.autoResizeBoxCollider = true;
                        cmBaffleWidget.updateAnchors = UIRect.AnchorUpdate.OnStart;
                        cmBaffleWidget.SetAnchor(uipanel, -safev, -safev, safev, safev);//设置锚点  
                        cmBaffleWidget.depth = 99999;

                    }


                    wnd_Obj.name = wndName;
                    wnd_Obj.SetActive(true);
                    uipanel.SetActive(false);
                    uibaffle.SetActive(false);

                    m_wndInstances.Add(wndName, new Wnd(uipanel, uibaffle, wInfo));
                }

                //显示
                Wnd wnd = m_wndInstances[wndName];
                if (aInfo.needVisible == WShowType.preLoad)
                {
                    yield return null;
                    wnd.showCount++;
                    if (aInfo.reCall != null) aInfo.reCall(wnd);
                }
                else if (aInfo.needVisible == WShowType.show)
                {
                    wnd._Show(aInfo.duration);
                    //等待窗体组件准备就绪
                    yield return null;
                    if (aInfo.reCall != null) aInfo.reCall(wnd);
                    if (OnWndOpen != null)
                        OnWndOpen.Call(wndName);
                }
            }
            else
            {
                if (m_wndInstances.ContainsKey(wndName))
                {
                    Wnd wnd = m_wndInstances[wndName];
                    wnd.Hide(aInfo.duration);
                    if (aInfo.reCall != null) aInfo.reCall(wnd);
                }

            }
            yield return null;
        }

        m_coIsRuning = false;
    }

    bool m_coIsRuning = false;
    List<wndShowHideInfo> m_Cmds = new List<wndShowHideInfo>();


    /*
    public delegate void onShowComplate(Wnd wnd);
    public IEnumerator ShowWnd(string wndName, float duration, onShowComplate evt_showComplate)
    {
        if (
            !m_wndInfos.ContainsKey(wndName) //不存在窗体注册信息
            
            )
        {
            Debug.LogError("窗体注册信息不存在 "+wndName);
            yield break;
        }

        if (
            __showing.Contains(wndName)//当前正在显示过程中
            )
        {
            yield break;
        }

        //从最近隐藏记录中清楚
        if (m_wndLastHideTime.ContainsKey(wndName))
            m_wndLastHideTime.Remove(wndName);


        using (new SafeShowing(wndName))
        {
            //窗体不存在，则创建
            if (!m_wndInstances.ContainsKey(wndName))
            {
                IEnumerator it = LoadDepend(wndName);
          
                while (it.MoveNext()) yield return null;
           
                wndInfo wInfo = m_wndInfos[wndName];

                //创建一个uipanel
                GameObject uipanel = new GameObject(wInfo.name + "_panel");
                uipanel.transform.parent = UIPanelObj.transform;
                uipanel.transform.localScale = new Vector3(1, 1, 1);
                uipanel.transform.localRotation = new Quaternion(0, 0, 0, 1);
                uipanel.transform.localPosition = new Vector3(0, 0, 0);

                uipanel.layer = LayerMask.NameToLayer("UI");//设置层

                UIPanel cmpanel = uipanel.AddComponent<UIPanel>();
                cmpanel.depth = wInfo.sort;//设置显示覆盖顺序 
                GameObject wnd_Obj = GameObjectExtension.InstantiateFromPacket(wInfo.dependPackets[1], wInfo.name + ".prefab", uipanel);
                if (wnd_Obj == null)
                {
                    //删除刚创建的uipanel
                    GameObject.Destroy(uipanel);
                    Debug.LogError(String.Format("实例化窗体错误， packet:{0} wndName:{1}", wInfo.dependPackets[1], wInfo.name));
                    throw new Exception();
                }

                wnd_Obj.name = wndName;
                wnd_Obj.SetActive(true);
                uipanel.SetActive(false);

                //设置新创建的panel锚点
                {
                    UIRect rectCM = uipanel.GetComponent<UIRect>();
                    rectCM.SetAnchor(UIPanelObj, 0, 0, 0, 0);
                    rectCM.updateAnchors = UIRect.AnchorUpdate.OnEnable;
                }

                //设置预置锚点
                {
                    const int safev = 1;
                    UIRect rectCM = wnd_Obj.GetComponent<UIRect>();
                    rectCM.SetAnchor(uipanel, -safev, -safev, safev, safev);
                }

                m_wndInstances.Add(wndName, new Wnd(uipanel, wInfo));
            }

            //显示
            Wnd wnd = m_wndInstances[wndName];
            wnd._Show(duration);

            //等待窗体组件准备就绪
            //for (int i = 0; i < 10;i++ )
                yield return null;

            if (evt_showComplate != null)  evt_showComplate(wnd); 
            if (OnWndOpen != null)
                OnWndOpen.Call(wndName);
        }
    }*/

    public Wnd _GetWnd(string wndName)
    {
        if (!m_wndInstances.ContainsKey(wndName)) return null;

        return m_wndInstances[wndName];
    }

    public void _OnWndHide(string wndName)
    {
        if (m_wndInfos[wndName].cacheTime > 0)//这是一个需要定时回收资源的界面
        {
            //记录最近隐藏时间
            if (m_wndLastHideTime.ContainsKey(wndName))
                m_wndLastHideTime[wndName] = DateTime.Now;
            else
                m_wndLastHideTime.Add(wndName, DateTime.Now);
        }
    }

    public static int LoadMainBaseActors()
    {
        //in FightParameter[,talkRecallClass,talkRecallFunc]
        //if (FightLoading) return 0;

        //var n = lua.GetTop();
        FightParameter param = new FightParameter();

        param.QixiSquare = null;
        param.sceneID = 1;
        param.tuiguan_zhang = 1;
        param.tuiguan_jie = 1;
        param.fightType = FightType.Tuiguan;

        param.Squares = new List<ArmySquareInfo>();
        //for(int i = 0; i < 10; i++)
        //{

        var army = new ArmySquareInfo();
        army.cd = -1f;
        army.fid = 1;
        army.flag = ArmyFlag.Attacker;
        army.heroLevel = 1;
        army.hp = -1;
        army.hxj = 1;
        army.soldiersCount = 1;
        army.staticHeroID = 5001;
        army.sxj = 1;
        army.zs = false;
        army.Equips = new Equip[0];
        army.sklv = new short[9];
        army.sklv[0] = 1;
        army.sklv[1] = 1;
        army.sklv[2] = 1;
        army.sklv[3] = 1;
        army.sklv[4] = 1;
        army.sklv[5] = 1;
        army.sklv[6] = 0;
        army.sklv[7] = 0;
        army.sklv[8] = 0;
        param.Squares.Add(army);


        var army1 = new ArmySquareInfo();
        army1.cd = -1f;
        army1.fid = 2;
        army1.flag = ArmyFlag.Attacker;
        army1.heroLevel = 1;
        army1.hp = -1;
        army1.hxj = 1;
        army1.soldiersCount = 1;
        army1.staticHeroID = 5002;
        army1.sxj = 1;
        army1.zs = false;
        army1.Equips = new Equip[0];
        army1.sklv = new short[9];
        army1.sklv[0] = 1;
        army1.sklv[1] = 1;
        army1.sklv[2] = 1;
        army1.sklv[3] = 1;
        army1.sklv[4] = 1;
        army1.sklv[5] = 1;
        army1.sklv[6] = 0;
        army1.sklv[7] = 0;
        army1.sklv[8] = 0;
        param.Squares.Add(army1);


        //}

        //var reCall = (n == 3) ? LuaRoot.LDelegate2Event<LuaEventCallback>(lua, 2, 3) : null;

        //FightLoading = true;

        //if (UnloadSceneTimer!=null) UnloadSceneTimer.enabled = false;//禁用卸载场景定时器

        CoroutineManage.Single.StartCoroutine(LoadMainSceneActor(param));
        return 0;
    }
    private static IEnumerator LoadMainSceneActor(FightParameter param)
    {
        //显示战斗装载界面
        wnd_prefight.Single.Show(Wnd.DefaultDuration);

        //停顿一段时间，等界面显示完全
        {
            float t = Wnd.DefaultDuration;
            while (t > 0)
            {
                yield return null;
                t -= Time.deltaTime;
            }
        }

        //等待推关界面隐藏
        var tuiguanWnd = WndManage.Single._GetWnd("ui_tuiguan");
        if (tuiguanWnd != null)
            while (tuiguanWnd.IsVisible)
            {
                yield return null;
            }

        var buzhengWnd = WndManage.Single._GetWnd("ui_buzheng");
        if (buzhengWnd != null)
            while (buzhengWnd.IsVisible)
            {
                yield return null;
            }


        //立即回收被隐藏的窗口
        WndManage.Single.DestroyHideWnds();

        //清理战场
        DP_Battlefield.Single.Reset();

        //卸掉场景
        DP_Battlefield.Single.SwapScene(0, null, null);

        //设置战斗参数
        AI_Single.Single.Battlefield.SetFightParameter(param);

        //立即垃圾回收
        //GC.Collect();
        Resources.UnloadUnusedAssets();

        //装载资源包
        List<string> dyPacks = AI_Single.Single.Battlefield.GeneratePackList();

        //显示战斗界面(初始化所有控件，并没有真正显示出来)
        wnd_fight.Single.Show(1); //Wnd.DefaultDuration
        wnd_scene.Single.Show(1);

        while (
            !wnd_fight.Single.IsInitd || //等待鹰眼图初始化完毕
            !wnd_scene.Single.IsInitd //等待场景中的界面初始化完成
            ) yield return null;


        //装载场景
        bool loadDone = false;
        DP_Battlefield.Single.SwapScene(param.sceneID, dyPacks, () => loadDone = true);
        while (!loadDone) yield return null; //等待场景装载完成


        //重新装载3D物体预置
        DP_FightPrefabManage.ReLoad3DObjects();


        //启动战斗
        AI_Single.Single.Battlefield.StartFight();


        //停止背景音
        BackgroundMusicManage.Single.Stop(0.3f);

        //等待人全部进场 
        {
            float t = 1.0f;
            while (t > 0)
            {
                yield return null;
                t -= Time.deltaTime;
            }
        }

        //隐藏loading
        wnd_prefight.Single.Hide(Wnd.DefaultDuration);

        //BackgroundMusic = param.Music;


        YQ2CameraCtrl.Single.istuiguan = true;
    }


    public void LogicInit_Go()
    {
        CoroutineManage.Single.StartCoroutine(LogicInit.InitLogic());
    }
    public float LogicInit_GetInitProgress()
    {
        return LogicInit.LogicInitProgress;
    }



    Dictionary<string, Wnd> m_wndInstances = new Dictionary<string, Wnd>();
    Dictionary<string, wndInfo> m_wndInfos = new Dictionary<string, wndInfo>();
}

