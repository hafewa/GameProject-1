-- region *.lua
-- Date
-- 此文件由[BabeLua]插件自动生成
local class = require("common/middleclass")
local inventory2 = class("inventory2", ui_session)

local item = require "uiscripts/item"
local ItemDatebase = require "uiscripts/ItemDatebase"-- 物品数据

local count = 24-- 背包格子数量
local InventoryUI-- 背包UI
local Temp -- 被拖拽的临时UI
local list_inventory = { }-- 定义背包物品线性表
local list_Slot = { }-- 定义背包物品线性表
local showInventory = false-- 是否显示背包
local draggingItem-- 物品是否被拖拽
local dragedItem-- 被拖拽的物品
local dragedID-- 被拖拽物品的ID号
local showTooltip-- 是否显示物品提示框
local Tooltip-- 物品提示框


function inventory2.show_me()
    local sd = ui_session_data(ui_session_type.ABOVE_POPUP, ui_session_id.UI_inventory2)
    m_ui_manager:show_session(inventory2(sd))
end

-- 判断对应ID物品是否在背包里
function inventory2:InventoryContains(id)
    local result = false;
    local i
    for
        i = 1, #list_inventory, 1
    do
        if list_inventory[i].itemID ~= nil then
            if list_inventory[i].itemID == id then
                result = true
                break;
            end
        end
    end
    return result;
end
-- 添加物品
function inventory2:AddItem(id)
    local i
    for
        i = 1, #list_inventory, 1
    do
        -- 该id物品在背包内
        if self:InventoryContains(id)
        then
            -- 背包有空格时添加
            if (list_inventory[i].itemID == id)
            then
                if (list_inventory[i].itemNum < list_inventory[i].itemMaxNum)
                then
                    list_inventory[i].itemNum = list_inventory[i].itemNum + 1;
                    break;
                end
            end
        else
            -- 如果该id物品不在背包内
            if (list_inventory[i].itemName == nil)
            then
                list_inventory[i] = ItemDatebase[id]
                break;
            end
        end
        --        }
        --       --如果没有找到未满的物品就新建一个
        --        if (i == list_inventory.Count)
        --        {
        --            for (i = 0; i < list_inventory.Count; i++)
        --            {
        --                if (list_inventory[i].itemName == null)
        --                {
        --                    list_inventory[i] = datebase.items[id].Clone();
        --                    break;
        --                }
        --            }
    end
end


function inventory2.Update()
    ----是否被拖拽
    if draggingItem
    then
        Temp.transform.position = UICamera.currentCamera:ScreenToWorldPoint(UnityEngine.Input.mousePosition);
        Temp:GetComponent("UITexture").mainTexture = dragedItem.itemIcon;
    end


    for
        i = 1, count, 1
    do
        local Item = list_inventory[i];
        local Slot = list_Slot[i]
        -- 更新背包物品图标
        Slot.transform:FindChild("Icon"):GetComponent("UITexture").mainTexture = Item.itemIcon;

        -- 更新背包物品数量
        if Item.itemNum > 1
        then
            Slot.transform:FindChild("num"):GetComponent("UILabel").text = tostring(Item.itemNum)
        else
            Slot.transform:FindChild("num"):GetComponent("UILabel").text = ""
        end
    end

end

-- 初始化背包
function inventory2:InitInventory()
    local i
    for
        i = 1, count, 1
    do
        -- local Slot = GameResFactory.Instance():GetGoFromPrefab("Slot")
        local Slot = GameObject.Instantiate(Resources.Load("Slot"))
        Slot.transform.parent = GameObject.Find("inventory2/Win/item").transform
        Slot.transform.localScale = Vector3.New(1, 1, 1)
        Slot.name = i;
        list_Slot[i] = Slot
        self.lua_behaviour:AddClick(Slot, function(go)
            local Item = list_inventory[i];
            if Item.itemName ~= nil
            then
                if draggingItem == false
                then
                    -- 记录被拖拽物的ID，方便返回物品
                    dragedID = i
                    -- 打开拖拽开关
                    draggingItem = true;
                    -- 交换物品
                    dragedItem = Item;
                    -- 设置物品为空
                    list_inventory[i] = item:new()
                else
                    -- 交换物品
                    list_inventory[i], dragedItem = dragedItem, list_inventory[i]
                end

            elseif draggingItem
            then
                -- 交换物品
                list_inventory[i], dragedItem = dragedItem, list_inventory[i]
                Temp:GetComponent("UITexture").mainTexture = dragedItem.itemIcon;
                draggingItem = false;
            end
        end )
        if list_inventory[i].itemName ~= nil
        then
            Slot.transform:FindChild("Icon"):GetComponent("UITexture").mainTexture = list_inventory[i].itemIcon;
        end
        if i == count then
            Slot.transform.parent:GetComponent("UIGrid").repositionNow = true
        end
    end
    -- 隐藏背包
    -- 	InventoryUI .SetActive(showInventory);


    self.lua_behaviour:AddClick(GameObject.Find("inventory2/Win/backBtn"), function(go)
        self:hide_session(nil, true)
    end )

end

function inventory2:initialize(session_data)
    ui_session.initialize(self, session_data)
    self.session_id = ui_session_id.UI_inventory2
end

function inventory2:on_post_load()
    Temp = GameObject.Instantiate(Resources.Load("UIPrefab/Temp"))
    Temp.transform.parent = self.transform:FindChild("Win")
    Temp.transform.localScale = Vector3.New(1, 1, 1)
    Temp.name = "Temp";

    -- 添count个物品
    local i
    for
        i = 1, count, 1
    do
        list_inventory[i] = item:new()
    end
    -- 	--获取物品信息
    -- 	datebase = GameObject .FindGameObjectWithTag ("item_datebase").GetComponent <ItemDatebase>();

    self:AddItem(1)
    self:AddItem(2)
    self:AddItem(2)
    self:AddItem(3)
    self:AddItem(4)
    self:AddItem(5)
    self:AddItem(6)
    self:AddItem(7)

    -- 	--初始化背包
    self:InitInventory()

    draggingItem = false;
    dragedItem = item:new();



    --                  uibaffle = new GameObject(wInfo.name + "_baffle");
    --                       uibaffle.layer = LayerMask.NameToLayer("UI");//设置层
    --                       uibaffle.transform.parent = uipanel.transform;
    --                        uibaffle.transform.localScale = Vector3.one;
    --                        uibaffle.transform.localRotation = Quaternion.identity;
    --                        uibaffle.transform.localPosition = Vector3.zero;



    --                        //增加碰撞盒
    --                        var cl = uibaffle.AddComponent<BoxCollider>();

    --                        //增加UIWidget组件
    --                        var cmBaffleWidget = uibaffle.AddComponent<UIWidget>();
    --                        cmBaffleWidget.autoResizeBoxCollider = true;
    --                        cmBaffleWidget.updateAnchors = UIRect.AnchorUpdate.OnStart;
    --                        cmBaffleWidget.SetAnchor(uipanel, -safev, -safev, safev, safev);//设置锚点
    --                        cmBaffleWidget.depth = 99999;


    local uibaffle = GameObject("123")
    uibaffle.transform.parent = self.transform:FindChild("Win");
    uibaffle.transform.localScale = Vector3.one;
    uibaffle.transform.localRotation = Quaternion.identity;
    uibaffle.transform.localPosition = Vector3.zero;
    --    GameResFactory.Instance():AddComponent(uibaffle, "BoxCollider")
    uibaffle:AddComponent(UnityEngine.Types.GetType("UnityEngine.BoxCollider", "UnityEngine"))

    local safev = 1
    --    local cmBaffleWidget = GameResFactory.Instance():AddComponent(uibaffle, "UIWidget")
    local cmBaffleWidget = uibaffle:AddComponent(LuaHelper.GetType("UIWidget"))
    -- 设置锚点

    cmBaffleWidget.autoResizeBoxCollider = true;
    cmBaffleWidget.updateAnchors = UIRect.AnchorUpdate.OnStart;
    cmBaffleWidget:SetAnchor(GameObject.Find("UILayer"), - safev, - safev, safev, safev);
    cmBaffleWidget.depth = -1;

end

function inventory2:reset_window(args)

end

function inventory2:on_pre_destroy()
    print("inventory2:on_pre_destroy" .. self.gameObject.name)
end

-- 显示动画
function inventory2:enter_anim()
    local ts = TweenScale.Begin(self.gameObject, 0.1, Vector3.one)
    ts:SetOnFinished(GameResFactory.Instance():getEDC( function()
    end ))
end
-- 退出动画
function inventory2:quit_anim(done_handler)
    local ts = TweenScale.Begin(self.gameObject, 0.1, Vector3(0.5, 0.5, 0.5))
    ts:SetOnFinished(GameResFactory.Instance():getEDC(done_handler))
end

return inventory2