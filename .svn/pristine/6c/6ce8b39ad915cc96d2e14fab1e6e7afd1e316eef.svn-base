//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MFAModelRenderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MFAModelRender), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetClip", SetClip);
		L.RegFunction("SetLostTime", SetLostTime);
		L.RegFunction("SetDir", SetDir);
		L.RegFunction("SetAlpha", SetAlpha);
		L.RegFunction("SetMat", SetMat);
		L.RegFunction("SetShaderParam", SetShaderParam);
		L.RegFunction("SetTexture", SetTexture);
		L.RegFunction("SetLodMesh", SetLodMesh);
		L.RegFunction("GetLodMesh", GetLodMesh);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("MeshPackName", get_MeshPackName, set_MeshPackName);
		L.RegVar("TexturePackName", get_TexturePackName, set_TexturePackName);
		L.RegVar("IsLoop", get_IsLoop, set_IsLoop);
		L.RegVar("m_qkcamera", get_m_qkcamera, set_m_qkcamera);
		L.RegVar("flagColor", get_flagColor, set_flagColor);
		L.RegVar("ignoreTimeScale", get_ignoreTimeScale, set_ignoreTimeScale);
		L.RegVar("speedScale", get_speedScale, set_speedScale);
		L.RegVar("EnableLodTexture", get_EnableLodTexture, set_EnableLodTexture);
		L.RegVar("ObjId", get_ObjId, set_ObjId);
		L.RegVar("LodCount", get_LodCount, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFAModelRender obj = (MFAModelRender)ToLua.CheckObject(L, 1, typeof(MFAModelRender));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetClip(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLostTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFAModelRender obj = (MFAModelRender)ToLua.CheckObject(L, 1, typeof(MFAModelRender));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetLostTime(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFAModelRender obj = (MFAModelRender)ToLua.CheckObject(L, 1, typeof(MFAModelRender));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetDir(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFAModelRender obj = (MFAModelRender)ToLua.CheckObject(L, 1, typeof(MFAModelRender));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetAlpha(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFAModelRender obj = (MFAModelRender)ToLua.CheckObject(L, 1, typeof(MFAModelRender));
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Material));
			obj.SetMat(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShaderParam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MFAModelRender obj = (MFAModelRender)ToLua.CheckObject(L, 1, typeof(MFAModelRender));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetShaderParam(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MFAModelRender obj = (MFAModelRender)ToLua.CheckObject(L, 1, typeof(MFAModelRender));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetTexture(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLodMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MFAModelRender obj = (MFAModelRender)ToLua.CheckObject(L, 1, typeof(MFAModelRender));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetLodMesh(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLodMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MFAModelRender obj = (MFAModelRender)ToLua.CheckObject(L, 1, typeof(MFAModelRender));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.GetLodMesh(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MeshPackName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			string ret = obj.MeshPackName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MeshPackName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TexturePackName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			string ret = obj.TexturePackName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TexturePackName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsLoop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			bool ret = obj.IsLoop;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsLoop on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_qkcamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			UnityEngine.Camera ret = obj.m_qkcamera;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_qkcamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_flagColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			UnityEngine.Color ret = obj.flagColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index flagColor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ignoreTimeScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			bool ret = obj.ignoreTimeScale;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ignoreTimeScale on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_speedScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			float ret = obj.speedScale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index speedScale on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EnableLodTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			bool ret = obj.EnableLodTexture;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnableLodTexture on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ObjId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			ObjectID ret = obj.ObjId;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ObjId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LodCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			int ret = obj.LodCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LodCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MeshPackName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.MeshPackName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MeshPackName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TexturePackName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.TexturePackName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TexturePackName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsLoop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsLoop = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsLoop on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_qkcamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Camera));
			obj.m_qkcamera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_qkcamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_flagColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.flagColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index flagColor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ignoreTimeScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ignoreTimeScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ignoreTimeScale on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_speedScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.speedScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index speedScale on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EnableLodTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.EnableLodTexture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnableLodTexture on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ObjId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MFAModelRender obj = (MFAModelRender)o;
			ObjectID arg0 = (ObjectID)ToLua.CheckObject(L, 2, typeof(ObjectID));
			obj.ObjId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ObjId on a nil value" : e.Message);
		}
	}
}

