using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;


class LuaDateTimeLib
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
    static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "DateTime";
    public const string OBJ_HANDEL = "_obj";
    //public const string OBJ_TYPE = "_type";
    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("ToFileTime",M_ToFileTime),
           
            new NameFuncPair("Millisecond",M_Millisecond),
            new NameFuncPair("HourMinuteSecond",M_HourMinuteSecond),
            new NameFuncPair("YearMonthDay",M_YearMonthDay),
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
            new NameFuncPair("__add",OP___add),//重载加法
            new NameFuncPair("__sub",OP___sub),//重载减法
            new NameFuncPair("__tostring",OP___tostring),
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
            new NameFuncPair("Now",F_Now),
            new NameFuncPair("new",F_new),
            new NameFuncPair("FromFileTime",S_FromFileTime),
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        return 1;
    }

    public static int OP___sub(ILuaState lua)
    {
        DateTime a = Lua2Obj(lua, 1);
        DateTime b = Lua2Obj(lua, 2);
        LuaTimeSpanLib._wrap(lua, a - b);
        return 1;
    }

    public static int OP___add(ILuaState lua)
    {
        DateTime a = Lua2Obj(lua, 1);
        TimeSpan span = LuaTimeSpanLib.Lua2Obj(lua, 2);
        _wrap(lua, a + span);
        return 1;
    }

    public static int OP___tostring(ILuaState lua)
    {
        //in self
        //out string
        DateTime self = Lua2Obj(lua, 1);

        lua.PushString(
            string.Format(
                "{0}-{1}-{2} {3}:{4}:{5} {6}",
                self.Year,
                self.Month,
                self.Day,
                self.Hour,
                self.Minute,
                self.Second,
                self.Millisecond
            )
         );
        return 1;
    }

    public static void _wrap(ILuaState lua, DateTime obj)
    {
        NameValuePair[] propertys = new NameValuePair[]
        {
            new NameValuePair(OBJ_HANDEL,obj),
            //new NameValuePair(OBJ_TYPE,LIB_NAME),
        };

        m_ClassRegHelper.InstanceLuaClass(lua, propertys);
    }

    public static DateTime Lua2Obj(ILuaState lua, int index)
    {
       LuaMemberHelper.CheckClass(lua, index);

        return m_MemberHelper.GetStruct<DateTime>(lua, index, OBJ_HANDEL);
    }

    /*
    public static bool CheckType(ILuaState lua, int index)
    {
       LuaMemberHelper.CheckClass(lua, index);
        m_MemberHelper.GetString(lua,)
    }*/
    //OBJ_TYPE

    static int F_new(ILuaState lua)
    {
        //in year,month,day[,hour,minute,second,millisecond]
        //out DateTime
        int n = lua.GetTop();
        int year = lua.L_CheckInteger(1);
        int month = lua.L_CheckInteger(2);
        int day = lua.L_CheckInteger(3);
        int hour = n > 3 ? lua.L_CheckInteger(4) : 0;
        int minute = n > 4 ? lua.L_CheckInteger(5) : 0;
        int second = n > 5 ? lua.L_CheckInteger(6) : 0;
        int millisecond = n > 6 ? lua.L_CheckInteger(7) : 0;
        _wrap(lua, new DateTime(year, month, day, hour, minute, second, millisecond));
        return 1;
    }

    static int F_Now(ILuaState lua)
    {
        //in void
        //out DateTime
        _wrap(lua, DateTime.Now);
        return 1;
    }

    //取得 年月日
    static int M_YearMonthDay(ILuaState lua)
    {
        //in self
        //out year,month,day
        DateTime self = Lua2Obj(lua, 1);
        lua.PushInteger(self.Year);
        lua.PushInteger(self.Month);
        lua.PushInteger(self.Day);
        return 3;
    }


    //取得 时分秒
    static int M_HourMinuteSecond(ILuaState lua)
    {
        //in self
        //out Hour,Minute,Second
        DateTime self = Lua2Obj(lua, 1);
        lua.PushInteger(self.Hour);
        lua.PushInteger(self.Minute);
        lua.PushInteger(self.Second);
        return 3;
    }


    static int M_Millisecond(ILuaState lua)
    {
        //in self
        //out int
        DateTime self = Lua2Obj(lua, 1);
        lua.PushInteger(self.Millisecond);
        return 1;
    }

    static int M_ToFileTime(ILuaState lua)
    {
        //in self
        //out ulong
        DateTime self = Lua2Obj(lua, 1);
        lua.PushUInt64((ulong)self.ToFileTime());
        return 1;
    }

    static int S_FromFileTime(ILuaState lua)
    {
        //in ulong
        //out DateTime
        var fileTime = lua.L_CheckUInt64(1);
        _wrap(lua, DateTime.FromFileTime((long)fileTime));
        return 1;
    }



}
 
