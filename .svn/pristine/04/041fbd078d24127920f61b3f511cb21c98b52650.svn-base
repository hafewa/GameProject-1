using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
 
public class LuaEquipLibs
{
    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();

    public const string LIB_NAME = "Equip";

    public static int OpenLib(ILuaState lua)
    {

        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        {
            new NameFuncPair("SetXilianST",M_SetXilianST), 
            new NameFuncPair("SetStaticID",M_SetStaticID), 
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        
        //注册枚举
        NameValuePair[] XilianST_define = new NameValuePair[]
        {
            new NameValuePair("None", XilianST.None),
            new NameValuePair("X1A",XilianST.X1A),
            new NameValuePair("X1B",XilianST.X1B),
            new NameValuePair("X2",XilianST.X2),
            new NameValuePair("X3",XilianST.X3), 
        };
        m_ClassRegHelper.RegEnum(lua, "XilianST", XilianST_define);


        

        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        { 
             new NameFuncPair("new",S_new),  
        };
        m_ClassRegHelper.RegStatics(lua, static_define);

        
 
        return 1;
    }



    public static void _wrap(ILuaState lua, Equip obj)
    {
        NameValuePair[] propertys = new NameValuePair[]
        {
            new NameValuePair(LuaOpenLibs.OBJ_HANDELNAME,obj),
        };

        m_ClassRegHelper.InstanceLuaClass(lua, propertys);
    }

    public static Equip Lua2Obj(ILuaState lua, int index)
    {
        LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<Equip>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }


    static int S_new(ILuaState lua)
    {
        //in
        //out Equip
        _wrap(lua,new Equip());
        return 1;
    }

    static int M_SetStaticID(ILuaState lua)
    {
        //in self,equipID

        var self = Lua2Obj(lua, 1);
        var equipID = lua.L_CheckInteger(2);

        self.sid = equipID;
        return 0;
    }

    static int M_SetXilianST(ILuaState lua)
    {
        //in self,XilianST

        var self = Lua2Obj(lua, 1);


        /*
          lua.L_ArgCheck(lua.IsTable(2), 2, "必须是一个lua表");

        var XilianST = new List<bool>();
        //遍历lua表
        lua.PushNil();
        while (lua.Next(-2))
        {
            // 处理相应数据。此时栈上 -1 处为 value, -2 处为 key 
            bool st = lua.ToBoolean(-1);
            XilianST.Add(st);
            lua.Pop(1);
        }

        lua.L_ArgCheck(XilianST.Count == EquipDataInfo.XilianLen, 2, string.Format("洗练状态表长度必须是{0}", EquipDataInfo.XilianLen));*/

        self.XilianST =  (XilianST)lua.L_CheckInteger(2); 
        return 0;
    }
} 