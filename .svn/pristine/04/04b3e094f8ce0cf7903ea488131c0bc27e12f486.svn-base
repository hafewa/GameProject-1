using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;

class LuaCMUISpriteLib
{
    class CMUISpriteInfo : ICoreComponentInfo
    {
        public Type type { get { return typeof(UISprite); } }
        public string name { get { return LuaCMUISpriteLib.LIB_NAME; } }
        public void newLuaObj(ILuaState lua, Component cmp)
        {
            LuaCMUISpriteLib._wrap(lua, cmp as UISprite);
        }
    }

    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
   // static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "CMUISprite";


    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        { 
            new NameFuncPair("SetSpriteName",M_SetSpriteName),
            new NameFuncPair("GetSpriteName",M_GetSpriteName),
            new NameFuncPair("SetAlpha",M_SetAlpha),
            new NameFuncPair("GetAlpha",M_GetAlpha),
            new NameFuncPair("GetSize",M_GetSize),
            new NameFuncPair("SetSize",M_SetSize),
            new NameFuncPair("GetDepth",M_GetDepth),
            new NameFuncPair("SetDepth",M_SetDepth),
            new NameFuncPair("SetFlip",M_SetFlip),
            new NameFuncPair("GetFlip",M_GetFlip),
            new NameFuncPair("SetAtlas",M_SetAtlas),
            new NameFuncPair("MakePixelPerfect",M_MakePixelPerfect), 
            new NameFuncPair("GetFillAmount",M_GetFillAmount),
            new NameFuncPair("SetFillAmount",M_SetFillAmount), 
            new NameFuncPair("SetColor",M_SetColor),
            new NameFuncPair("GetColor",M_GetColor),  
        };
        
        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
           
            
        };
        //注册静态属性
        NameValuePair[] static_property = new NameValuePair[]
        {
            new NameValuePair("Name",LIB_NAME),
        };
        m_ClassRegHelper.RegStatics(lua, static_define, static_property);

        //注册枚举
        NameValuePair[] SpriteFlip_define = new NameValuePair[]
        {
            new NameValuePair("Nothing",UIBasicSprite.Flip. Nothing),
            new NameValuePair("Horizontally",UIBasicSprite.Flip.Horizontally),
            new NameValuePair("Vertically",UIBasicSprite.Flip.Vertically),
            new NameValuePair("Both",UIBasicSprite.Flip.Both), 
        };
        m_ClassRegHelper.RegEnum(lua, "SpriteFlip", SpriteFlip_define);

      

        LuaGameObjectLib.RegComponent(new CMUISpriteInfo());

        return 1;
    }

    public static void _wrap(ILuaState lua, UISprite comp)
    {
        LuaOpenLibs._wrapComponent(lua, comp, LIB_NAME, m_ClassRegHelper);
    }

    public static UISprite Lua2Obj(ILuaState lua, int index)
    {
       LuaMemberHelper.CheckClass(lua, index);
        
        return LuaMemberHelper.GetObject<UISprite>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }

    static int M_SetSpriteName(ILuaState lua)
    {
        //in self,string
        //out nil
        UISprite self = Lua2Obj(lua, 1);

        if (lua.IsNil(2))
        {
            self.spriteName = null;
        }
        else
        {
            string spriteName = lua.L_CheckString(2);
            self.spriteName = spriteName;
        }

        return 0;
    }

    static int M_SetAtlas(ILuaState lua)
    {
        //in self,packName,atlasName
        UISprite self = Lua2Obj(lua, 1);
        string packName = lua.L_CheckString(2);
        string atlasName = lua.L_CheckString(3);
        PacketRouting packetRouting = PacketManage.Single.GetPacket(packName);
        lua.L_ArgCheck(packetRouting != null, 2, "不存在的资源包：" + packName);
        UnityEngine.Object obj = packetRouting.Load(atlasName + ".prefab"); 
        GameObject gameObj = obj as GameObject;
        lua.L_ArgCheck(gameObj != null, 3, "不存在的图集,未找到资源");
        UIAtlas atlas = gameObj.GetComponent<UIAtlas>();
        lua.L_ArgCheck(atlas != null, 3, "不存在的图集，未找到组件");
        self.atlas = atlas;
        return 0;
    } 

    static int M_GetSpriteName(ILuaState lua)
    {
        //in self
        //out string
        UISprite self = Lua2Obj(lua, 1); 
        lua.PushString(self.spriteName);
        return 1;
    }

    static int M_SetAlpha(ILuaState lua)
    {
        //in self,alhpa
        //out nil
        UISprite self = Lua2Obj(lua, 1);
        float alpha = (float)lua.L_CheckNumber(2);
        self.alpha = alpha;

        return 0;
    }
    static int M_GetAlpha(ILuaState lua)
    {
        //in self
        //out alhpa
        UISprite self = Lua2Obj(lua, 1);
        lua.PushNumber(self.alpha); 
        return 1;
    }
    static int M_GetColor(ILuaState lua)
    {
        //in self
        //out color
        UISprite self = Lua2Obj(lua, 1);
        LuaColorLib._wrap(lua, self.color);
        return 1;
    }


    static int M_SetColor(ILuaState lua)
    {
        //in self,color
        UISprite self = Lua2Obj(lua, 1);
        Color c; LuaColorLib.Lua2Obj(lua, 2, out c);
        self.color = c;
        return 0;
    }

    static int M_GetSize(ILuaState lua)
    { 
        //in self
        //out Vector2
        UISprite self = Lua2Obj(lua, 1);
        LuaVector2Lib._wrap(lua, self.width, self.height);
        
        return 1;
    }

    static int M_SetSize(ILuaState lua)
    {
        //in self,Vector2
        //out nil
        UISprite self = Lua2Obj(lua, 1);
        Vector2 size; LuaVector2Lib.Lua2Obj(lua, 2,out size);
        self.SetDimensions((int)size.x ,(int)size.y);
        return 0;
    }



    static int M_SetDepth(ILuaState lua)
    {
        //in self,depth
        //out nil
        UISprite self = Lua2Obj(lua, 1);
        self.depth = lua.L_CheckInteger(2);
        return 0;
    }

    static int M_GetDepth(ILuaState lua)
    {
        //in self
        //out depth
        UISprite self = Lua2Obj(lua, 1);
        lua.PushInteger(self.depth);
        return 1;
    }

    static int M_GetFlip(ILuaState lua)
    {
        //in self
        //out SpriteFlip
        UISprite self = Lua2Obj(lua, 1);
        lua.PushInteger( (int)self.flip);
        return 1;
    }


    static int M_SetFlip(ILuaState lua)
    {
        //in self,SpriteFlip
        //out nil
        UISprite self = Lua2Obj(lua, 1);
        int flip = lua.L_CheckInteger(2);
        self.flip = (UIBasicSprite.Flip)flip;
        return 0;
    }

    /// <summary>
    /// 对齐尺寸到内容
    /// </summary>
    /// <param name="lua"></param>
    /// <returns></returns>
    static int M_MakePixelPerfect(ILuaState lua)
    {
        //in self
        //out nil
        UIWidget self = Lua2Obj(lua, 1);
        self.MakePixelPerfect();
        return 0;
    }

    static int M_SetFillAmount(ILuaState lua)
    {
        //in self,v
        var self = Lua2Obj(lua,1);
        self.fillAmount = (float)lua.L_CheckNumber(2);
        return 0;
    }


    static int M_GetFillAmount(ILuaState lua)
    {
        //in self
        //out float
        var self = Lua2Obj(lua, 1);
        lua.PushNumber(self.fillAmount);
        return 1;
    }
} 
