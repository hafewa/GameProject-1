using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniLua;
using UnityEngine;

class LuaEventCallback_DragDropItem : LuaEventCallback
{
    protected override void _Call(object param)
    {
        QKDragDropItem dragDropItem = param as QKDragDropItem;
        LuaCMDragDropItemLib._wrap(LuaRoot._Lua, dragDropItem);
        using (LuaValue_Any luaDragDropItem = new LuaValue_Any(LuaRoot._Lua.L_Ref(LuaDef.LUA_REGISTRYINDEX)))
        {
            LuaRoot.CallMember(m_FuncRef, m_ClassRef, luaDragDropItem);
        } 
    }
}


class LuaCMDragDropItemLib
{
    class CMDragDropItemInfo : ICoreComponentInfo
    {
        public Type type { get { return typeof(QKDragDropItem); } }
        public string name { get { return LuaCMDragDropItemLib.LIB_NAME; } }
        public void newLuaObj(ILuaState lua, Component cmp)
        {
            LuaCMDragDropItemLib._wrap(lua, cmp as QKDragDropItem);
        }
    }

    static LuaClassRegHelper m_ClassRegHelper = new LuaClassRegHelper();
    static LuaMemberHelper m_MemberHelper = new LuaMemberHelper();

    public const string LIB_NAME = "CMDragDropItem";


    public static int OpenLib(ILuaState lua)
    {
        //注册成员函数
        NameFuncPair[] member_define = new NameFuncPair[]
        { 
            new NameFuncPair("SetTags",M_SetTags),
            new NameFuncPair("GetTags",M_GetTags),
            new NameFuncPair("GetOwnerSurface",M_GetOwnerSurface),
            new NameFuncPair("SetOwnerSurface",M_SetOwnerSurface),
            new NameFuncPair("SetUserData",M_SetUserData),
            new NameFuncPair("GetUserData",M_GetUserData),
            new NameFuncPair("SetCloneOnDrag",M_SetCloneOnDrag),
            new NameFuncPair("GetCloneOnDrag",M_GetCloneOnDrag),

            new NameFuncPair("SetRestriction",M_SetRestriction),
            new NameFuncPair("GetRestriction",M_GetRestriction),

            
        };

        NameFuncPair[] operator_define = new NameFuncPair[]
        {
           
        };

        m_ClassRegHelper.RegMembers(lua, member_define, operator_define);


        //注册静态成员
        NameFuncPair[] static_define = new NameFuncPair[]
        {
           
            
        };
        //注册静态属性
        NameValuePair[] static_property = new NameValuePair[]
        {
            new NameValuePair("Name",LIB_NAME),
        };
        m_ClassRegHelper.RegStatics(lua, static_define, static_property);

        LuaGameObjectLib.RegComponent(new CMDragDropItemInfo());
         

        //注册枚举
        NameValuePair[] DragDropRestriction_define = new NameValuePair[]
        {
            new NameValuePair("None", QKDragDropItem.Restriction.None),
            new NameValuePair("Horizontal",QKDragDropItem.Restriction.Horizontal),
            new NameValuePair("Vertical",QKDragDropItem.Restriction.Vertical),
            new NameValuePair("PressAndHold",QKDragDropItem.Restriction.PressAndHold),
        };
        m_ClassRegHelper.RegEnum(lua, "DragDropRestriction", DragDropRestriction_define);


        return 1;
    }

    public static void _wrap(ILuaState lua, QKDragDropItem comp)
    {
        LuaOpenLibs._wrapComponent(lua, comp, LIB_NAME, m_ClassRegHelper);
    }

    public static QKDragDropItem Lua2Obj(ILuaState lua, int index)
    {
       LuaMemberHelper.CheckClass(lua, index);

        return LuaMemberHelper.GetObject<QKDragDropItem>(lua, index, LuaOpenLibs.OBJ_HANDELNAME);
    }

    static int M_GetUserData(ILuaState lua)
    {
        //in self
        //out string
        QKDragDropItem self = Lua2Obj(lua, 1);
        lua.PushString( self.UserData);

        return 1;
    }

    static int M_SetUserData(ILuaState lua)
    {
        //in self,string
        //out nil
        QKDragDropItem self = Lua2Obj(lua, 1);
        var userData = lua.L_CheckString(2); //LuaRoot.GetAnyValue(lua, 2);
        self.UserData = userData;
        
        return 0;
    }

    //设置拽出限制
    static int M_SetRestriction(ILuaState lua)
    {
        //in self,DragDropRestriction
        //out nil
        QKDragDropItem self = Lua2Obj(lua, 1);
        QKDragDropItem.Restriction restriction = (QKDragDropItem.Restriction)lua.L_CheckInteger(2);
        self.restriction = restriction;
        return 0;
    }

    static int M_GetRestriction(ILuaState lua)
    {
        //in self
        //out DragDropRestriction
        QKDragDropItem self = Lua2Obj(lua, 1);
        lua.PushInteger((int)self.restriction);
        return 1;
    }

    

    static int M_GetCloneOnDrag(ILuaState lua)
    {
        //in self
        //out bool
        QKDragDropItem self = Lua2Obj(lua, 1);
        lua.PushBoolean(self.cloneOnDrag);

        return 1;
    }

    static int M_SetCloneOnDrag(ILuaState lua)
    {
        //in self,bool
        //out nil
        QKDragDropItem self = Lua2Obj(lua, 1);
        bool v = lua.ToBoolean(2);
        self.cloneOnDrag = v;

        return 0;
    }


    static int M_SetOwnerSurface(ILuaState lua)
    {
        //in self,GameObject
        //out nil
        QKDragDropItem self = Lua2Obj(lua, 1);
        GameObject gameObj = LuaGameObjectLib.Lua2Obj(lua, 2);
        self.OwnerSurface = gameObj;

        return 0;
    }

    static int M_GetOwnerSurface(ILuaState lua)
    {
        //in self
        //out GameObject
        QKDragDropItem self = Lua2Obj(lua, 1);
        LuaGameObjectLib._wrap(lua, self.OwnerSurface);

        return 1;
    }

    static int M_GetTags(ILuaState lua)
    {
        //in self
        //out {tag1,tag2,...}
        QKDragDropItem self = Lua2Obj(lua, 1);

        lua.CreateTable(0, 0);
        if (self.tags != null)
        { 
            int index = 1;
            foreach (string curr in self.tags)
            {
                lua.PushString(curr);
                lua.RawSetI(-2, index++);
            }
        }
        return 1;
    }

    static int M_SetTags(ILuaState lua)
    {
        //in self,{tag1,tag2,...}
        //out nil
        try
        {
            QKDragDropItem self = Lua2Obj(lua, 1);
            List<string> tags = m_MemberHelper.GetStringList(lua, 2);
            self.tags = tags.ToArray();
        }
        catch (Exception ex)
        {
            lua.L_Error(ex.ToString());
        }
        return 0;
    }
}
