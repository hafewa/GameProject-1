using System;
using System.Collections.Generic;
using LuaInterface;

public class SData_<1> : MonoEX.Singleton<SData_<1>>
{
    public void setData(LuaTable table1, LuaTable table2)
    {
        var head = new string[table1.Length];
        SDataUtils.dealTable(table1, (Object o1, Object o2) =>
        {
            head[(int)(double)o1 - 1] = (string)o2;
        });
        SDataUtils.dealTable(table2, (Object o1, Object o2) =>
        {
            <1>Info dif = new <1>Info();
            SDataUtils.dealTable((LuaTable)o2, (Object o11, Object o22) =>
            {
                switch (head[(int)(double)o11 - 1])
				{<2>
                }
            });
            if (Data.ContainsKey(dif.<4>))
                MonoEX.Debug.Logout(MonoEX.LOG_TYPE.LT_ERROR, "重复的ID：" + dif.<4>.ToString());
            Data.Add(dif.<4>, dif);
        });
    }

    public <1>Info GetDataOfID(int Id)
    {
        if (!Data.ContainsKey(Id)) throw new Exception(String.Format("<1>Info::GetDataOfID() not found data  Id:{0}", Id));
        return Data[Id];
    }

    internal Dictionary<int, <1>Info> Data = new Dictionary<int, <1>Info>();
}


public struct <1>Info
{<3>
}