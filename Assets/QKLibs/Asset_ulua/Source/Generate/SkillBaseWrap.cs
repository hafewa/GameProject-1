//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SkillBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SkillBase), typeof(AbilityBase));
		L.RegFunction("AdditionAttribute", AdditionAttribute);
		L.RegFunction("AdditionProperty", AdditionProperty);
		L.RegFunction("AdditionField", AdditionField);
		L.RegFunction("SubAttribute", SubAttribute);
		L.RegFunction("GetReplacedDescription", GetReplacedDescription);
		L.RegFunction("New", _CreateSkillBase);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ChangeDataTypeDic", get_ChangeDataTypeDic, set_ChangeDataTypeDic);
		L.RegVar("TriggerLevel1", get_TriggerLevel1, set_TriggerLevel1);
		L.RegVar("TriggerLevel2", get_TriggerLevel2, set_TriggerLevel2);
		L.RegVar("TriggerProbability", get_TriggerProbability, set_TriggerProbability);
		L.RegVar("HpScopeMin", get_HpScopeMin, set_HpScopeMin);
		L.RegVar("HpScopeMax", get_HpScopeMax, set_HpScopeMax);
		L.RegVar("TickTime", get_TickTime, set_TickTime);
		L.RegVar("DemageChangeType", get_DemageChangeType, set_DemageChangeType);
		L.RegVar("DemageChangeProbability", get_DemageChangeProbability, set_DemageChangeProbability);
		L.RegVar("DemageChangeTargetType", get_DemageChangeTargetType, set_DemageChangeTargetType);
		L.RegVar("DemageChange", get_DemageChange, set_DemageChange);
		L.RegVar("ChangeData", get_ChangeData, set_ChangeData);
		L.RegVar("ChangedData", get_ChangedData, set_ChangedData);
		L.RegVar("Description", get_Description, set_Description);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSkillBase(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SkillBase obj = new SkillBase();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SkillBase.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AdditionAttribute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VOBase arg0 = (VOBase)ToLua.CheckObject(L, 1, typeof(VOBase));
			SkillBase arg1 = (SkillBase)ToLua.CheckObject(L, 2, typeof(SkillBase));
			SkillBase.AdditionAttribute(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AdditionProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			System.Reflection.PropertyInfo arg0 = (System.Reflection.PropertyInfo)ToLua.CheckObject(L, 1, typeof(System.Reflection.PropertyInfo));
			VOBase arg1 = (VOBase)ToLua.CheckObject(L, 2, typeof(VOBase));
			VOBase arg2 = (VOBase)ToLua.CheckObject(L, 3, typeof(VOBase));
			VOBase arg3 = (VOBase)ToLua.CheckObject(L, 4, typeof(VOBase));
			System.Collections.Generic.IDictionary<string,ChangeDataType> arg4 = (System.Collections.Generic.IDictionary<string,ChangeDataType>)ToLua.CheckObject(L, 5, typeof(System.Collections.Generic.IDictionary<string,ChangeDataType>));
			SkillBase.AdditionProperty(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AdditionField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			System.Reflection.FieldInfo arg0 = (System.Reflection.FieldInfo)ToLua.CheckObject(L, 1, typeof(System.Reflection.FieldInfo));
			VOBase arg1 = (VOBase)ToLua.CheckObject(L, 2, typeof(VOBase));
			VOBase arg2 = (VOBase)ToLua.CheckObject(L, 3, typeof(VOBase));
			VOBase arg3 = (VOBase)ToLua.CheckObject(L, 4, typeof(VOBase));
			System.Collections.Generic.IDictionary<string,ChangeDataType> arg4 = (System.Collections.Generic.IDictionary<string,ChangeDataType>)ToLua.CheckObject(L, 5, typeof(System.Collections.Generic.IDictionary<string,ChangeDataType>));
			SkillBase.AdditionField(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SubAttribute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			VOBase arg0 = (VOBase)ToLua.CheckObject(L, 1, typeof(VOBase));
			VOBase arg1 = (VOBase)ToLua.CheckObject(L, 2, typeof(VOBase));
			SkillBase.SubAttribute(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetReplacedDescription(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SkillBase obj = (SkillBase)ToLua.CheckObject(L, 1, typeof(SkillBase));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.GetReplacedDescription(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChangeDataTypeDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			System.Collections.Generic.Dictionary<string,ChangeDataType> ret = obj.ChangeDataTypeDic;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ChangeDataTypeDic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TriggerLevel1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			TriggerLevel1 ret = obj.TriggerLevel1;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TriggerLevel1 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TriggerLevel2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			TriggerLevel2 ret = obj.TriggerLevel2;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TriggerLevel2 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TriggerProbability(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float ret = obj.TriggerProbability;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TriggerProbability on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HpScopeMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float ret = obj.HpScopeMin;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HpScopeMin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HpScopeMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float ret = obj.HpScopeMax;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HpScopeMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TickTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float ret = obj.TickTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TickTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DemageChangeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			int ret = obj.DemageChangeType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DemageChangeType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DemageChangeProbability(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float ret = obj.DemageChangeProbability;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DemageChangeProbability on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DemageChangeTargetType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			DemageAdditionOrReductionTargetType ret = obj.DemageChangeTargetType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DemageChangeTargetType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DemageChange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float ret = obj.DemageChange;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DemageChange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChangeData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			VOBase ret = obj.ChangeData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ChangeData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChangedData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			VOBase ret = obj.ChangedData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ChangedData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Description(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			string ret = obj.Description;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Description on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ChangeDataTypeDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			System.Collections.Generic.Dictionary<string,ChangeDataType> arg0 = (System.Collections.Generic.Dictionary<string,ChangeDataType>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,ChangeDataType>));
			obj.ChangeDataTypeDic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ChangeDataTypeDic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TriggerLevel1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			TriggerLevel1 arg0 = (TriggerLevel1)ToLua.CheckObject(L, 2, typeof(TriggerLevel1));
			obj.TriggerLevel1 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TriggerLevel1 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TriggerLevel2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			TriggerLevel2 arg0 = (TriggerLevel2)ToLua.CheckObject(L, 2, typeof(TriggerLevel2));
			obj.TriggerLevel2 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TriggerLevel2 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TriggerProbability(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TriggerProbability = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TriggerProbability on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HpScopeMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.HpScopeMin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HpScopeMin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HpScopeMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.HpScopeMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HpScopeMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TickTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TickTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TickTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DemageChangeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.DemageChangeType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DemageChangeType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DemageChangeProbability(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.DemageChangeProbability = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DemageChangeProbability on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DemageChangeTargetType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			DemageAdditionOrReductionTargetType arg0 = (DemageAdditionOrReductionTargetType)ToLua.CheckObject(L, 2, typeof(DemageAdditionOrReductionTargetType));
			obj.DemageChangeTargetType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DemageChangeTargetType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DemageChange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.DemageChange = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DemageChange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ChangeData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			VOBase arg0 = (VOBase)ToLua.CheckObject(L, 2, typeof(VOBase));
			obj.ChangeData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ChangeData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ChangedData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			VOBase arg0 = (VOBase)ToLua.CheckObject(L, 2, typeof(VOBase));
			obj.ChangedData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ChangedData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Description(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SkillBase obj = (SkillBase)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Description = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Description on a nil value" : e.Message);
		}
	}
}

