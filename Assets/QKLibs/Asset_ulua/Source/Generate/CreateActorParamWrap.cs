//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CreateActorParamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CreateActorParam), typeof(System.Object));
		L.RegFunction("New", _CreateCreateActorParam);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CmType", get_CmType, set_CmType);
		L.RegVar("ColorMat", get_ColorMat, set_ColorMat);
		L.RegVar("FlagColorIdx", get_FlagColorIdx, set_FlagColorIdx);
		L.RegVar("MeshPackName", get_MeshPackName, set_MeshPackName);
		L.RegVar("TexturePackName", get_TexturePackName, set_TexturePackName);
		L.RegVar("IsHero", get_IsHero, set_IsHero);
		L.RegVar("SoldierID", get_SoldierID, set_SoldierID);
		L.RegVar("CardID", get_CardID, set_CardID);
		L.RegVar("Level", get_Level, set_Level);
		L.RegVar("X", get_X, set_X);
		L.RegVar("Y", get_Y, set_Y);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateCreateActorParam(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				CreateActorParam obj = new CreateActorParam(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(float), typeof(int)))
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				CreateActorParam obj = new CreateActorParam(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 8 && TypeChecker.CheckTypes(L, 1, typeof(AvatarCM), typeof(bool), typeof(int), typeof(string), typeof(string), typeof(bool), typeof(int), typeof(int)))
			{
				AvatarCM arg0 = (AvatarCM)ToLua.CheckObject(L, 1, typeof(AvatarCM));
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				string arg4 = ToLua.CheckString(L, 5);
				bool arg5 = LuaDLL.luaL_checkboolean(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				CreateActorParam obj = new CreateActorParam(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 8 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(bool), typeof(int), typeof(string), typeof(string), typeof(bool), typeof(int), typeof(int)))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				string arg4 = ToLua.CheckString(L, 5);
				bool arg5 = LuaDLL.luaL_checkboolean(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				CreateActorParam obj = new CreateActorParam(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: CreateActorParam.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CmType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			AvatarCM ret = obj.CmType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CmType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ColorMat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			bool ret = obj.ColorMat;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ColorMat on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FlagColorIdx(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			int ret = obj.FlagColorIdx;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FlagColorIdx on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MeshPackName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			string ret = obj.MeshPackName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MeshPackName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TexturePackName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			string ret = obj.TexturePackName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TexturePackName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsHero(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			bool ret = obj.IsHero;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsHero on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SoldierID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			int ret = obj.SoldierID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SoldierID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CardID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			int ret = obj.CardID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CardID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			int ret = obj.Level;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Level on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_X(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			float ret = obj.X;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index X on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Y(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			float ret = obj.Y;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Y on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CmType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			AvatarCM arg0 = (AvatarCM)ToLua.CheckObject(L, 2, typeof(AvatarCM));
			obj.CmType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CmType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ColorMat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ColorMat = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ColorMat on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FlagColorIdx(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.FlagColorIdx = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FlagColorIdx on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MeshPackName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.MeshPackName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MeshPackName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TexturePackName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.TexturePackName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TexturePackName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsHero(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsHero = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsHero on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SoldierID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SoldierID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SoldierID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CardID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CardID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CardID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Level = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Level on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_X(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.X = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index X on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Y(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CreateActorParam obj = (CreateActorParam)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Y = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Y on a nil value" : e.Message);
		}
	}
}

