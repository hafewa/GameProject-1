//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PacketManageWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PacketManage), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("LoadPacket", LoadPacket);
		L.RegFunction("AutoGC", AutoGC);
		L.RegFunction("LoadInternalPack", LoadInternalPack);
		L.RegFunction("GetPacket", GetPacket);
		L.RegFunction("UnLoadPacket", UnLoadPacket);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("WorkInResourcesEditor", get_WorkInResourcesEditor, set_WorkInResourcesEditor);
		L.RegVar("Single", get_Single, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPacket(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			PacketManage obj = (PacketManage)ToLua.CheckObject(L, 1, typeof(PacketManage));
			PackType arg0 = (PackType)ToLua.CheckObject(L, 2, typeof(PackType));
			string arg1 = ToLua.CheckString(L, 3);
			System.Action<string,PacketRouting> arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<string,PacketRouting>)ToLua.CheckObject(L, 4, typeof(System.Action<string,PacketRouting>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<string,PacketRouting>), func) as System.Action<string,PacketRouting>;
			}

			System.Action<string,float> arg3 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<string,float>)ToLua.CheckObject(L, 5, typeof(System.Action<string,float>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<string,float>), func) as System.Action<string,float>;
			}

			bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
			obj.LoadPacket(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AutoGC(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PacketManage obj = (PacketManage)ToLua.CheckObject(L, 1, typeof(PacketManage));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.AutoGC(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadInternalPack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			PacketManage obj = (PacketManage)ToLua.CheckObject(L, 1, typeof(PacketManage));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			System.Action<string,PacketRouting> arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<string,PacketRouting>)ToLua.CheckObject(L, 4, typeof(System.Action<string,PacketRouting>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<string,PacketRouting>), func) as System.Action<string,PacketRouting>;
			}

			System.Action<string,float> arg3 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<string,float>)ToLua.CheckObject(L, 5, typeof(System.Action<string,float>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<string,float>), func) as System.Action<string,float>;
			}

			obj.LoadInternalPack(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPacket(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PacketManage obj = (PacketManage)ToLua.CheckObject(L, 1, typeof(PacketManage));
			string arg0 = ToLua.CheckString(L, 2);
			PacketRouting o = obj.GetPacket(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadPacket(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PacketManage obj = (PacketManage)ToLua.CheckObject(L, 1, typeof(PacketManage));
			string arg0 = ToLua.CheckString(L, 2);
			obj.UnLoadPacket(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WorkInResourcesEditor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PacketManage obj = (PacketManage)o;
			bool ret = obj.WorkInResourcesEditor;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WorkInResourcesEditor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Single(IntPtr L)
	{
		try
		{
			ToLua.Push(L, PacketManage.Single);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WorkInResourcesEditor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PacketManage obj = (PacketManage)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.WorkInResourcesEditor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WorkInResourcesEditor on a nil value" : e.Message);
		}
	}
}

