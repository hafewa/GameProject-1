//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AStarPathFindingWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AStarPathFinding), typeof(System.Object));
		L.RegFunction("SearchRoad", SearchRoad);
		L.RegFunction("ISearchRoad", ISearchRoad);
		L.RegFunction("NearObstacleCount", NearObstacleCount);
		L.RegFunction("New", _CreateAStarPathFinding);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("closePathMap", get_closePathMap, set_closePathMap);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAStarPathFinding(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				AStarPathFinding obj = new AStarPathFinding();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: AStarPathFinding.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SearchRoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 9);
			int[][] arg0 = ToLua.CheckObjectArray<int[]>(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
			int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
			bool arg7 = LuaDLL.luaL_checkboolean(L, 8);
			System.Action arg8 = null;
			LuaTypes funcType9 = LuaDLL.lua_type(L, 9);

			if (funcType9 != LuaTypes.LUA_TFUNCTION)
			{
				 arg8 = (System.Action)ToLua.CheckObject(L, 9, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 9);
				arg8 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			System.Collections.Generic.IList<Node> o = AStarPathFinding.SearchRoad(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ISearchRoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			int[][] arg0 = ToLua.CheckObjectArray<int[]>(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
			int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
			System.Collections.IEnumerator o = AStarPathFinding.ISearchRoad(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NearObstacleCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Node arg0 = (Node)ToLua.CheckObject(L, 1, typeof(Node));
			int[][] arg1 = ToLua.CheckObjectArray<int[]>(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = AStarPathFinding.NearObstacleCount(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_closePathMap(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AStarPathFinding.closePathMap);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_closePathMap(IntPtr L)
	{
		try
		{
			int[][] arg0 = ToLua.CheckObjectArray<int[]>(L, 2);
			AStarPathFinding.closePathMap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

