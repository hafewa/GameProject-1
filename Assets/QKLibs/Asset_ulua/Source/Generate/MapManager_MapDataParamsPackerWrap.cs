//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MapManager_MapDataParamsPackerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MapManager.MapDataParamsPacker), typeof(System.Object));
		L.RegFunction("New", _CreateMapManager_MapDataParamsPacker);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("MapId", get_MapId, set_MapId);
		L.RegVar("BaseLevel", get_BaseLevel, set_BaseLevel);
		L.RegVar("TurretLevel", get_TurretLevel, set_TurretLevel);
		L.RegVar("Race", get_Race, set_Race);
		L.RegVar("EnemyBaseLevel", get_EnemyBaseLevel, set_EnemyBaseLevel);
		L.RegVar("EnemyTurretLevel", get_EnemyTurretLevel, set_EnemyTurretLevel);
		L.RegVar("EnemyRace", get_EnemyRace, set_EnemyRace);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMapManager_MapDataParamsPacker(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MapManager.MapDataParamsPacker obj = new MapManager.MapDataParamsPacker();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MapManager.MapDataParamsPacker.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MapId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int ret = obj.MapId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MapId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BaseLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int ret = obj.BaseLevel;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BaseLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TurretLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int ret = obj.TurretLevel;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TurretLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Race(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int ret = obj.Race;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Race on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EnemyBaseLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int ret = obj.EnemyBaseLevel;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnemyBaseLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EnemyTurretLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int ret = obj.EnemyTurretLevel;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnemyTurretLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EnemyRace(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int ret = obj.EnemyRace;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnemyRace on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MapId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MapId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MapId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BaseLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.BaseLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BaseLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TurretLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.TurretLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TurretLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Race(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Race = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Race on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EnemyBaseLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.EnemyBaseLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnemyBaseLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EnemyTurretLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.EnemyTurretLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnemyTurretLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EnemyRace(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MapManager.MapDataParamsPacker obj = (MapManager.MapDataParamsPacker)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.EnemyRace = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnemyRace on a nil value" : e.Message);
		}
	}
}

