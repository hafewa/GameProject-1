//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WordFilterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WordFilter), typeof(System.Object));
		L.RegFunction("AddStirngToFilters", AddStirngToFilters);
		L.RegFunction("filter", filter);
		L.RegFunction("New", _CreateWordFilter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("s_filters", get_s_filters, set_s_filters);
		L.RegVar("substitution_char", get_substitution_char, set_substitution_char);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateWordFilter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				WordFilter obj = new WordFilter();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: WordFilter.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddStirngToFilters(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			WordFilter.AddStirngToFilters(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int filter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = null;
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
			string arg5 = ToLua.CheckString(L, 6);
			string o = WordFilter.filter(arg0, out arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushstring(L, o);
			LuaDLL.lua_pushstring(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_filters(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, WordFilter.s_filters);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_substitution_char(IntPtr L)
	{
		try
		{
			ToLua.Push(L, WordFilter.substitution_char);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_filters(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			WordFilter.s_filters = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_substitution_char(IntPtr L)
	{
		try
		{
			char[] arg0 = ToLua.CheckCharBuffer(L, 2);
			WordFilter.substitution_char = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

