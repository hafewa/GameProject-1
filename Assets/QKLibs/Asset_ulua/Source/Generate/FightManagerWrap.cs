//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FightManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FightManager), typeof(System.Object));
		L.RegFunction("StartFight", StartFight);
		L.RegFunction("EndFight", EndFight);
		L.RegFunction("InitMap", InitMap);
		L.RegFunction("New", _CreateFightManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Single", get_Single, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFightManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				FightManager obj = new FightManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FightManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartFight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			FightManager obj = (FightManager)ToLua.CheckObject(L, 1, typeof(FightManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			MapManager.MapDataParamsPacker arg1 = (MapManager.MapDataParamsPacker)ToLua.CheckObject(L, 3, typeof(MapManager.MapDataParamsPacker));
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.StartFight(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndFight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FightManager obj = (FightManager)ToLua.CheckObject(L, 1, typeof(FightManager));
			obj.EndFight();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FightManager obj = (FightManager)ToLua.CheckObject(L, 1, typeof(FightManager));
			obj.InitMap();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Single(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, FightManager.Single);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

