//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DisplayOwnerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DisplayOwner), typeof(System.Object));
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("CleanData", CleanData);
		L.RegFunction("New", _CreateDisplayOwner);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("GameObj", get_GameObj, set_GameObj);
		L.RegVar("ClusterData", get_ClusterData, set_ClusterData);
		L.RegVar("RanderControl", get_RanderControl, set_RanderControl);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDisplayOwner(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
				PositionObject arg1 = (PositionObject)ToLua.CheckUnityObject(L, 2, typeof(PositionObject));
				DisplayOwner obj = new DisplayOwner(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.GameObject), typeof(PositionObject), typeof(RanderControl)))
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
				PositionObject arg1 = (PositionObject)ToLua.CheckUnityObject(L, 2, typeof(PositionObject));
				RanderControl arg2 = (RanderControl)ToLua.CheckUnityObject(L, 3, typeof(RanderControl));
				DisplayOwner obj = new DisplayOwner(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DisplayOwner.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DisplayOwner obj = (DisplayOwner)ToLua.CheckObject(L, 1, typeof(DisplayOwner));
			obj.Destroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DisplayOwner obj = (DisplayOwner)ToLua.CheckObject(L, 1, typeof(DisplayOwner));
			obj.CleanData();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DisplayOwner obj = (DisplayOwner)o;
			UnityEngine.GameObject ret = obj.GameObj;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameObj on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ClusterData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DisplayOwner obj = (DisplayOwner)o;
			PositionObject ret = obj.ClusterData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ClusterData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RanderControl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DisplayOwner obj = (DisplayOwner)o;
			RanderControl ret = obj.RanderControl;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RanderControl on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DisplayOwner obj = (DisplayOwner)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.GameObj = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameObj on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ClusterData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DisplayOwner obj = (DisplayOwner)o;
			PositionObject arg0 = (PositionObject)ToLua.CheckUnityObject(L, 2, typeof(PositionObject));
			obj.ClusterData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ClusterData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RanderControl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DisplayOwner obj = (DisplayOwner)o;
			RanderControl arg0 = (RanderControl)ToLua.CheckUnityObject(L, 2, typeof(RanderControl));
			obj.RanderControl = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RanderControl on a nil value" : e.Message);
		}
	}
}

